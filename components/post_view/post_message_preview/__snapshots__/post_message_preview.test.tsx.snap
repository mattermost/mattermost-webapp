// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostMessagePreview broadcasted thread replies should render broadcasted thread reply correctly 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={false}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    parentPost={
      Object {
        "id": "parent_post_id",
        "message": "parent post message",
        "metadata": Object {},
      }
    }
    previewPost={
      Object {
        "create_at": 1000,
        "id": "broadcasted_post_id",
        "message": "broadcasted post message",
        "metadata": Object {},
        "props": Object {
          "broadcasted_thread_reply": true,
        },
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview direct and group messages should render preview for D message 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "D",
        "post_id": "post_id",
        "team_name": "",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview direct and group messages should render preview for G message 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "G",
        "post_id": "post_id",
        "team_name": "",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview nested previews should render file preview 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    previewPost={
      Object {
        "file_ids": Array [
          "file_1",
          "file_2",
        ],
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview nested previews should render opengraph preview 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {
          "embeds": Array [
            Object {
              "type": "opengraph",
              "url": "https://example.com",
            },
          ],
        },
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview should not render bot icon 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
        "props": Object {
          "from_webhook": "false",
          "override_icon_url": "https://fakeicon.com/image.jpg",
          "use_user_icon": "false",
        },
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview should render bot icon 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={true}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
        "props": Object {
          "from_webhook": "true",
          "override_icon_url": "https://fakeicon.com/image.jpg",
          "use_user_icon": false,
        },
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview should render correctly 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    previewPost={
      Object {
        "id": "post_id",
        "message": "post message",
        "metadata": Object {},
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;

exports[`PostMessagePreview should render without preview 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "handleChangeWrapper": [Function],
        "listeners": Object {
          "notify": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": null,
      },
    }
  }
>
  <PostMessagePreview
    actions={
      Object {
        "toggleEmbedVisibility": [MockFunction],
      }
    }
    channelDisplayName="channel name"
    compactDisplay={false}
    currentTeamUrl="team1"
    enablePostIconOverride={false}
    handleFileDropdownOpened={[MockFunction]}
    hasImageProxy={false}
    isEmbedVisible={true}
    isPermalink={true}
    isPostPriorityEnabled={false}
    lastReplyAt={0}
    metadata={
      Object {
        "channel_display_name": "channel name",
        "channel_id": "channel_id",
        "channel_type": "O",
        "post_id": "post_id",
        "team_name": "team1",
      }
    }
    user={
      Object {
        "id": "user_1",
        "username": "username1",
      }
    }
  />
</ContextProvider>
`;
