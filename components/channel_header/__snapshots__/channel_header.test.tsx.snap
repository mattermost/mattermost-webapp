// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/ChannelHeader should match snapshot with last active display 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      <MemoizedFormattedMessage
                        defaultMessage="{displayname} (you) "
                        id="channel_header.directchannel.you"
                        values={
                          Object {
                            "displayname": "some-user",
                          }
                        }
                      />
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <StatusIcon
            button={false}
            className=""
            status="offline"
          />
          <span
            className="header-status__text"
          >
            <span
              className="last-active__text"
            >
              <MemoizedFormattedMessage
                defaultMessage="Active {timestamp}"
                id="channel_header.lastActive"
                values={
                  Object {
                    "timestamp": <Memo(Connect(injectIntl(Timestamp)))
                      style="short"
                      units={
                        Array [
                          "now",
                          "minute",
                          "hour",
                        ]
                      }
                      useTime={false}
                      value={1632146562846}
                    />,
                  }
                }
              />
            </span>
          </span>
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="not the bot description"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should match snapshot with no last active display because it is disabled 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      <MemoizedFormattedMessage
                        defaultMessage="{displayname} (you) "
                        id="channel_header.directchannel.you"
                        values={
                          Object {
                            "displayname": "some-user",
                          }
                        }
                      />
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <StatusIcon
            button={false}
            className=""
            status="offline"
          />
          <span
            className="header-status__text"
          >
            <MemoizedFormattedMessage
              defaultMessage="Offline"
              id="status_dropdown.set_offline"
            />
          </span>
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="not the bot description"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render active channel files 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left channel-header__icon--active"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render active flagged posts 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render active mentions posts 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render active pinned posts 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left channel-header__icon--active"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render archived view 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      <ArchiveIcon
                        className="icon icon__archive icon channel-header-archived-icon svg-text-color"
                      />
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 1234,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 1234,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render correct menu when muted 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
          <OverlayTrigger
            defaultOverlayShown={false}
            delayShow={400}
            overlay={
              <Tooltip
                id="channelMutedTooltip"
              >
                <Memo(MemoizedFormattedMessage)
                  defaultMessage="Unmute"
                  id="channelHeader.unmute"
                />
              </Tooltip>
            }
            placement="bottom"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <button
              aria-label="Muted Icon"
              className="style--none color--link channel-header__mute inactive"
              id="toggleMute"
              onClick={[Function]}
            >
              <i
                className="icon icon-bell-off-outline"
              />
            </button>
          </OverlayTrigger>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render not active channel files 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left channel-header__icon--active"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render properly when custom status is expired 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      <MemoizedFormattedMessage
                        defaultMessage="{displayname} (you) "
                        id="channel_header.directchannel.you"
                        values={
                          Object {
                            "displayname": "some-user",
                          }
                        }
                      />
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <StatusIcon
            button={false}
            className=""
            status="offline"
          />
          <span
            className="header-status__text"
          >
            <span
              className="last-active__text"
            >
              <MemoizedFormattedMessage
                defaultMessage="Active {timestamp}"
                id="channel_header.lastActive"
                values={
                  Object {
                    "timestamp": <Memo(Connect(injectIntl(Timestamp)))
                      style="short"
                      units={
                        Array [
                          "now",
                          "minute",
                          "hour",
                        ]
                      }
                      useTime={false}
                      value={1632146562846}
                    />,
                  }
                }
              />
            </span>
          </span>
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="not the bot description"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render properly when custom status is set 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      <MemoizedFormattedMessage
                        defaultMessage="{displayname} (you) "
                        id="channel_header.directchannel.you"
                        values={
                          Object {
                            "displayname": "some-user",
                          }
                        }
                      />
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <StatusIcon
            button={false}
            className=""
            status="offline"
          />
          <span
            className="header-status__text"
          >
            <span
              className="last-active__text"
            >
              <MemoizedFormattedMessage
                defaultMessage="Active {timestamp}"
                id="channel_header.lastActive"
                values={
                  Object {
                    "timestamp": <Memo(Connect(injectIntl(Timestamp)))
                      style="short"
                      units={
                        Array [
                          "now",
                          "minute",
                          "hour",
                        ]
                      }
                      useTime={false}
                      value={1632146562846}
                    />,
                  }
                }
              />
            </span>
            <div
              className="custom-emoji__wrapper"
            >
              <Memo(CustomStatusEmoji)
                emojiStyle={
                  Object {
                    "margin": "0 4px 1px",
                    "verticalAlign": "top",
                  }
                }
                showTooltip={true}
                tooltipDirection="bottom"
                userID="user_id"
              />
              <CustomStatusText
                className=""
                text="In a meeting"
                tooltipDirection="bottom"
              />
            </div>
          </span>
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="not the bot description"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="not the bot description"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "not the bot description",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "status": "offline",
          "team_id": "team_id",
          "type": "D",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render properly when empty 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "DN",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render properly when populated 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render properly when populated with channel props 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="See ~test"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": Object {
                    "test": Object {
                      "display_name": "Test",
                    },
                  },
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="See ~test"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": Object {
                          "test": Object {
                            "display_name": "Test",
                          },
                        },
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="See ~test"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": Object {
                    "test": Object {
                      "display_name": "Test",
                    },
                  },
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "See ~test",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "props": Object {
            "channel_mentions": Object {
              "test": Object {
                "display_name": "Test",
              },
            },
          },
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "See ~test",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "props": Object {
            "channel_mentions": Object {
              "test": Object {
                "display_name": "Test",
              },
            },
          },
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render shared view 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                      <SharedChannelIndicator
                        channelType="O"
                        className="shared-channel-icon"
                        withTooltip={true}
                      />
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <i
                aria-hidden="true"
                className="icon icon-pin-outline channel-header__pin"
              />
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "shared": true,
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "shared": true,
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;

exports[`components/ChannelHeader should render the pinned icon with the pinned posts count 1`] = `
<div
  aria-label="channel header region"
  className="channel-header alt a11y__region"
  data-a11y-sort-order="8"
  data-channelid="channel_id"
  id="channel-header"
  role="banner"
  tabIndex={-1}
>
  <div
    className="flex-parent"
  >
    <div
      className="flex-child"
    >
      <div
        className="channel-header__info"
        id="channelHeaderInfo"
      >
        <div
          className="channel-header__title dropdown"
        >
          <div>
            <MenuWrapper
              animationComponent={[Function]}
              className=""
              onToggle={[Function]}
            >
              <div
                className="channel-header__top"
                id="channelHeaderDropdownButton"
              >
                <button
                  aria-label="channel menu"
                  className="channel-header__trigger style--none "
                >
                  <strong
                    aria-level={2}
                    className="heading"
                    id="channelHeaderTitle"
                    role="heading"
                  >
                    <span>
                      name
                    </span>
                  </strong>
                  <span
                    aria-label="dropdown icon"
                    className="icon icon-chevron-down header-dropdown-chevron-icon"
                    id="channelHeaderDropdownIcon"
                  />
                </button>
              </div>
              <ChannelHeaderDropdown />
            </MenuWrapper>
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              key="isFavorite-undefined"
              onEntering={[Function]}
              overlay={
                <Tooltip
                  id="favoriteTooltip"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Add to Favorites"
                    id="channelHeader.addToFavorites"
                  />
                </Tooltip>
              }
              placement="bottom"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <button
                aria-label="add to favorites"
                className="style--none color--link channel-header__favorites inactive"
                id="toggleFavorite"
                onClick={[Function]}
              >
                <i
                  className="icon icon-star-outline"
                />
              </button>
            </OverlayTrigger>
          </div>
        </div>
        <div
          className="channel-header__description"
          dir="auto"
          id="channelHeaderDescription"
        >
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="member-rhs__trigger channel-header__icon channel-header__icon--left channel-header__icon--wide"
            buttonId="member_rhs"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-account-outline channel-header__members"
                />
                <span
                  className="icon__text"
                  id="channelMemberCountText"
                >
                  -
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="channelMembers"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderPinButton"
            iconComponent={
              <React.Fragment>
                <i
                  aria-hidden="true"
                  className="icon icon-pin-outline channel-header__pin"
                />
                <span
                  className="icon__text"
                  id="channelPinnedPostCountText"
                >
                  2
                </span>
              </React.Fragment>
            }
            onClick={[Function]}
            tooltipKey="pinnedPosts"
          />
          <HeaderIconWrapper
            ariaLabel={true}
            buttonClass="channel-header__icon channel-header__icon--wide channel-header__icon--left"
            buttonId="channelHeaderFilesButton"
            iconComponent={
              <i
                className="icon icon-file-text-outline"
              />
            }
            onClick={[Function]}
            tooltipKey="channelFiles"
          />
          <div
            className="header-popover-text-measurer"
          >
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </div>
          <span
            className="header-description__text"
            onClick={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
          >
            <Overlay
              animation={[Function]}
              onEnter={[Function]}
              onHide={[Function]}
              placement="bottom"
              rootClose={true}
              show={false}
              target={null}
            >
              <Popover
                className="channel-header__popover"
                id="header-popover"
                placement="bottom"
                popoverSize="lg"
                popoverStyle="info"
                style={
                  Object {
                    "maxWidth": "0px",
                    "transform": "translate(0px, 0px)",
                  }
                }
              >
                <span
                  onClick={[Function]}
                >
                  <Connect(Markdown)
                    imageProps={
                      Object {
                        "hideUtilities": true,
                      }
                    }
                    message="header"
                    options={
                      Object {
                        "atMentions": true,
                        "channelNamesMap": undefined,
                        "mentionHighlight": false,
                        "singleline": false,
                      }
                    }
                  />
                </span>
              </Popover>
            </Overlay>
            <Connect(Markdown)
              imageProps={
                Object {
                  "hideUtilities": true,
                }
              }
              message="header"
              options={
                Object {
                  "atMentions": true,
                  "channelNamesMap": undefined,
                  "mentionHighlight": false,
                  "singleline": true,
                }
              }
            />
          </span>
        </div>
      </div>
    </div>
    <Connect(injectIntl(ChannelHeaderPlug))
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
      channelMember={
        Object {
          "channel_id": "channel_id",
          "last_update_at": 0,
          "last_viewed_at": 0,
          "mention_count": 0,
          "mention_count_root": 0,
          "msg_count": 0,
          "msg_count_root": 0,
          "notify_props": Object {
            "desktop": "default",
            "email": "default",
            "ignore_channel_mentions": "default",
            "mark_unread": "all",
            "push": "default",
          },
          "roles": "channel_user",
          "scheme_admin": false,
          "scheme_user": true,
          "urgent_mention_count": 0,
          "user_id": "user_id",
        }
      }
    />
    <Connect(CallButton) />
    <ChannelInfoButton
      channel={
        Object {
          "create_at": 0,
          "creator_id": "id",
          "delete_at": 0,
          "display_name": "name",
          "group_constrained": false,
          "header": "header",
          "id": "channel_id",
          "last_post_at": 0,
          "last_root_post_at": 0,
          "name": "Test",
          "purpose": "purpose",
          "scheme_id": "id",
          "team_id": "team_id",
          "type": "O",
          "update_at": 0,
        }
      }
    />
  </div>
</div>
`;
