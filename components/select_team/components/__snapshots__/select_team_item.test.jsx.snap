// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/select_team/components/SelectTeamItem should match snapshot 1`] = `
<div
  className="signup-team-dir"
>
  <OverlayTrigger
    container={
      SelectTeamItem {
        "context": Object {
          "intl": Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          },
        },
        "handleTeamClick": [Function],
        "props": Object {
          "intl": Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          },
          "loading": false,
          "onTeamClick": [MockFunction],
          "team": Object {
            "description": "team description",
            "display_name": "team_display_name",
          },
        },
        "refs": Object {},
        "setState": [Function],
        "state": null,
        "updater": Updater {
          "_callbacks": Array [],
          "_renderer": ReactShallowRenderer {
            "_context": Object {
              "intl": Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {},
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": "Etc/UTC",
              },
            },
            "_currentlyRenderingComponent": null,
            "_didScheduleRenderPhaseUpdate": false,
            "_dispatcher": Object {
              "readContext": [Function],
              "useCallback": [Function],
              "useContext": [Function],
              "useDebugValue": [Function],
              "useEffect": [Function],
              "useImperativeHandle": [Function],
              "useLayoutEffect": [Function],
              "useMemo": [Function],
              "useReducer": [Function],
              "useRef": [Function],
              "useState": [Function],
            },
            "_element": <SelectTeamItem
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "formatDate": [Function],
                  "formatHTMLMessage": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatPlural": [Function],
                  "formatRelative": [Function],
                  "formatTime": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralFormat": [Function],
                    "getRelativeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {},
                  "now": [Function],
                  "onError": [Function],
                  "textComponent": "span",
                  "timeZone": "Etc/UTC",
                }
              }
              loading={false}
              onTeamClick={[MockFunction]}
              team={
                Object {
                  "description": "team description",
                  "display_name": "team_display_name",
                }
              }
            />,
            "_firstWorkInProgressHook": null,
            "_forcedUpdate": false,
            "_instance": [Circular],
            "_isReRender": false,
            "_newState": null,
            "_numberOfReRenders": 0,
            "_previousComponentIdentity": null,
            "_renderPhaseUpdates": null,
            "_rendered": <div
              className="signup-team-dir"
            >
              <OverlayTrigger
                container={[Circular]}
                defaultOverlayShown={false}
                delayShow={1000}
                overlay={
                  <Tooltip
                    bsClass="tooltip"
                    id="team-description__tooltip"
                    placement="right"
                  >
                    team description
                  </Tooltip>
                }
                placement="top"
                rootClose={true}
                trigger={
                  Array [
                    "hover",
                    "focus",
                    "click",
                  ]
                }
              >
                <TeamInfoIcon
                  className="icon icon--info"
                />
              </OverlayTrigger>
              <a
                href="#"
                id="team_display_name"
                onClick={[Function]}
              >
                <span
                  className="signup-team-dir__name"
                >
                  team_display_name
                </span>
                <span
                  className="fa fa-angle-right right signup-team__icon"
                  title="Join Team Icon"
                />
              </a>
            </div>,
            "_rendering": false,
            "_updater": [Circular],
            "_workInProgressHook": null,
          },
        },
      }
    }
    defaultOverlayShown={false}
    delayShow={1000}
    overlay={
      <Tooltip
        bsClass="tooltip"
        id="team-description__tooltip"
        placement="right"
      >
        team description
      </Tooltip>
    }
    placement="top"
    rootClose={true}
    trigger={
      Array [
        "hover",
        "focus",
        "click",
      ]
    }
  >
    <TeamInfoIcon
      className="icon icon--info"
    />
  </OverlayTrigger>
  <a
    href="#"
    id="team_display_name"
    onClick={[Function]}
  >
    <span
      className="signup-team-dir__name"
    >
      team_display_name
    </span>
    <span
      className="fa fa-angle-right right signup-team__icon"
      title="Join Team Icon"
    />
  </a>
</div>
`;

exports[`components/select_team/components/SelectTeamItem should match snapshot, on loading 1`] = `
<div
  className="signup-team-dir"
>
  <OverlayTrigger
    container={
      SelectTeamItem {
        "context": Object {
          "intl": Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          },
        },
        "handleTeamClick": [Function],
        "props": Object {
          "intl": Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          },
          "loading": true,
          "onTeamClick": [MockFunction],
          "team": Object {
            "description": "team description",
            "display_name": "team_display_name",
          },
        },
        "refs": Object {},
        "setState": [Function],
        "state": null,
        "updater": Updater {
          "_callbacks": Array [],
          "_renderer": ReactShallowRenderer {
            "_context": Object {
              "intl": Object {
                "defaultFormats": Object {},
                "defaultLocale": "en",
                "formatDate": [Function],
                "formatHTMLMessage": [Function],
                "formatMessage": [Function],
                "formatNumber": [Function],
                "formatPlural": [Function],
                "formatRelative": [Function],
                "formatTime": [Function],
                "formats": Object {},
                "formatters": Object {
                  "getDateTimeFormat": [Function],
                  "getMessageFormat": [Function],
                  "getNumberFormat": [Function],
                  "getPluralFormat": [Function],
                  "getRelativeFormat": [Function],
                },
                "locale": "en",
                "messages": Object {},
                "now": [Function],
                "onError": [Function],
                "textComponent": "span",
                "timeZone": "Etc/UTC",
              },
            },
            "_currentlyRenderingComponent": null,
            "_didScheduleRenderPhaseUpdate": false,
            "_dispatcher": Object {
              "readContext": [Function],
              "useCallback": [Function],
              "useContext": [Function],
              "useDebugValue": [Function],
              "useEffect": [Function],
              "useImperativeHandle": [Function],
              "useLayoutEffect": [Function],
              "useMemo": [Function],
              "useReducer": [Function],
              "useRef": [Function],
              "useState": [Function],
            },
            "_element": <SelectTeamItem
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "formatDate": [Function],
                  "formatHTMLMessage": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatPlural": [Function],
                  "formatRelative": [Function],
                  "formatTime": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralFormat": [Function],
                    "getRelativeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {},
                  "now": [Function],
                  "onError": [Function],
                  "textComponent": "span",
                  "timeZone": "Etc/UTC",
                }
              }
              loading={true}
              onTeamClick={[MockFunction]}
              team={
                Object {
                  "description": "team description",
                  "display_name": "team_display_name",
                }
              }
            />,
            "_firstWorkInProgressHook": null,
            "_forcedUpdate": false,
            "_instance": [Circular],
            "_isReRender": false,
            "_newState": null,
            "_numberOfReRenders": 0,
            "_previousComponentIdentity": null,
            "_renderPhaseUpdates": null,
            "_rendered": <div
              className="signup-team-dir"
            >
              <OverlayTrigger
                container={[Circular]}
                defaultOverlayShown={false}
                delayShow={1000}
                overlay={
                  <Tooltip
                    bsClass="tooltip"
                    id="team-description__tooltip"
                    placement="right"
                  >
                    team description
                  </Tooltip>
                }
                placement="top"
                rootClose={true}
                trigger={
                  Array [
                    "hover",
                    "focus",
                    "click",
                  ]
                }
              >
                <TeamInfoIcon
                  className="icon icon--info"
                />
              </OverlayTrigger>
              <a
                href="#"
                id="team_display_name"
                onClick={[Function]}
              >
                <span
                  className="signup-team-dir__name"
                >
                  team_display_name
                </span>
                <span
                  className="fa fa-refresh fa-spin right signup-team__icon"
                  title="Loading Icon"
                />
              </a>
            </div>,
            "_rendering": false,
            "_updater": [Circular],
            "_workInProgressHook": null,
          },
        },
      }
    }
    defaultOverlayShown={false}
    delayShow={1000}
    overlay={
      <Tooltip
        bsClass="tooltip"
        id="team-description__tooltip"
        placement="right"
      >
        team description
      </Tooltip>
    }
    placement="top"
    rootClose={true}
    trigger={
      Array [
        "hover",
        "focus",
        "click",
      ]
    }
  >
    <TeamInfoIcon
      className="icon icon--info"
    />
  </OverlayTrigger>
  <a
    href="#"
    id="team_display_name"
    onClick={[Function]}
  >
    <span
      className="signup-team-dir__name"
    >
      team_display_name
    </span>
    <span
      className="fa fa-refresh fa-spin right signup-team__icon"
      title="Loading Icon"
    />
  </a>
</div>
`;
