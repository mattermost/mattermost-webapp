// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/threading/channel_threads/thread_footer should match snapshot when a single message is followed 1`] = `
<Memo(ThreadFooter)
  threadId="singlemessageid"
>
  <div
    className="ThreadFooter"
  >
    <div
      className="indicator"
    />
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Memo(Button)
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Memo(Button)>
    </Memo(FollowButton)>
  </div>
</Memo(ThreadFooter)>
`;

exports[`components/threading/channel_threads/thread_footer should report total number of replies 1`] = `
<Memo(ThreadFooter)
  threadId="postthreadid"
>
  <div
    className="ThreadFooter"
  >
    <div
      className="indicator"
    />
    <Memo(Avatars)
      size="sm"
      userIds={
        Array [
          "5",
          "4",
          "3",
          "2",
          "1",
        ]
      }
    >
      <div
        className="Avatars Avatars___sm"
        onMouseLeave={[Function]}
      >
        <UserAvatar
          disableProfileOverlay={false}
          key="5"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="5"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/5/image?_=0"
                userId="5"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/5/image?_=0"
                  userId="5"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last5"
                id="name-5"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-5"
                      placement="top"
                    >
                      first.last5
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-5"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last5
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/5/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/5/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <UserAvatar
          disableProfileOverlay={false}
          key="4"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="4"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/4/image?_=0"
                userId="4"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/4/image?_=0"
                  userId="4"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last4"
                id="name-4"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-4"
                      placement="top"
                    >
                      first.last4
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-4"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last4
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/4/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/4/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <UserAvatar
          disableProfileOverlay={false}
          key="3"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="3"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/3/image?_=0"
                userId="3"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/3/image?_=0"
                  userId="3"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last3"
                id="name-3"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-3"
                      placement="top"
                    >
                      first.last3
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-3"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last3
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/3/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/3/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <SimpleTooltip
          animation={true}
          content="first.last2, first.last1"
          id="names-overflow"
          onEntered={[Function]}
        >
          <OverlayTrigger
            animation={true}
            defaultOverlayShown={false}
            delayShow={500}
            onEntered={[Function]}
            overlay={
              <Tooltip
                className="hidden-xs"
                id="names-overflow"
                placement="top"
              >
                first.last2, first.last1
              </Tooltip>
            }
            placement="top"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <OverlayTrigger
              animation={true}
              defaultOverlayShown={false}
              delayShow={500}
              onEntered={[Function]}
              overlay={
                <OverlayWrapper
                  className="hidden-xs"
                  id="names-overflow"
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  placement="top"
                >
                  first.last2, first.last1
                </OverlayWrapper>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <Memo(Avatar)
                onBlur={[Function]}
                onClick={null}
                onFocus={[Function]}
                onMouseOut={[Function]}
                onMouseOver={[Function]}
                size="sm"
                style={
                  Object {
                    "background": "rgb(240, 240, 241)",
                  }
                }
                tabIndex={0}
                text="+2"
              >
                <div
                  className="Avatar Avatar-sm Avatar-plain"
                  data-content="+2"
                  onBlur={[Function]}
                  onClick={null}
                  onFocus={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  style={
                    Object {
                      "background": "rgb(240, 240, 241)",
                    }
                  }
                  tabIndex={0}
                />
              </Memo(Avatar)>
            </OverlayTrigger>
          </OverlayTrigger>
        </SimpleTooltip>
      </div>
    </Memo(Avatars)>
    <Memo(Button)
      className="ReplyButton separated"
      onClick={[Function]}
      prepend={
        <span
          className="icon"
        >
          <i
            className="icon-reply-outline"
          />
        </span>
      }
    >
      <button
        className="Button Button___transparent ReplyButton separated"
        onClick={[Function]}
      >
        <span
          className="Button_prepended"
        >
          <span
            className="icon"
          >
            <i
              className="icon-reply-outline"
            />
          </span>
        </span>
        <span
          className="Button_label"
        >
          <FormattedMessage
            defaultMessage="{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}"
            id="threading.numReplies"
            values={
              Object {
                "totalReplies": 9,
              }
            }
          >
            <span>
              9 replies
            </span>
          </FormattedMessage>
        </span>
      </button>
    </Memo(Button)>
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Memo(Button)
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Memo(Button)>
    </Memo(FollowButton)>
    <Connect(injectIntl(Timestamp))
      day="numeric"
      units={
        Array [
          "now",
          "minute",
          "hour",
          "day",
          "week",
        ]
      }
      useTime={false}
      value={1554161504000}
    >
      <injectIntl(Timestamp)
        day="numeric"
        dispatch={[Function]}
        hourCycle="h12"
        units={
          Array [
            "now",
            "minute",
            "hour",
            "day",
            "week",
          ]
        }
        useTime={false}
        value={1554161504000}
      >
        <Timestamp
          day="numeric"
          dispatch={[Function]}
          hour="numeric"
          hourCycle="h12"
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "defaultRichTextElements": undefined,
              "formatDate": [Function],
              "formatDateTimeRange": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatListToParts": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": "span",
              "timeZone": "Etc/UTC",
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          minute="numeric"
          month="long"
          numeric="auto"
          relNearest={1}
          second="numeric"
          style="long"
          timeZoneName="short"
          units={
            Array [
              "now",
              "minute",
              "hour",
              "day",
              "week",
            ]
          }
          useTime={false}
          value={1554161504000}
          weekday="long"
          year="numeric"
        >
          <span
            className="Timestamp separated alt-visible"
          >
            <FormattedMessage
              defaultMessage="Last reply {formatted}"
              id="threading.footer.lastReplyAt"
              values={
                Object {
                  "formatted": <Memo(SemanticTime)
                    value={2019-04-01T23:31:44.000Z}
                  >
                    April 1, 2019
                  </Memo(SemanticTime)>,
                }
              }
            >
              <span>
                Last reply 
                <Memo(SemanticTime)
                  key=".$.1"
                  value={2019-04-01T23:31:44.000Z}
                >
                  <time
                    dateTime="2019-04-01T23:31:44.000"
                  >
                    April 1, 2019
                  </time>
                </Memo(SemanticTime)>
              </span>
            </FormattedMessage>
          </span>
        </Timestamp>
      </injectIntl(Timestamp)>
    </Connect(injectIntl(Timestamp))>
  </div>
</Memo(ThreadFooter)>
`;

exports[`components/threading/channel_threads/thread_footer should show unread indicator 1`] = `
<Memo(ThreadFooter)
  threadId="postthreadid"
>
  <div
    className="ThreadFooter"
  >
    <SimpleTooltip
      content={
        <Memo(MemoizedFormattedMessage)
          defaultMessage="{newReplies, plural, =0 {no unread messages} =1 {one unread message} other {# unread messages}}"
          id="threading.numNewMessages"
          values={
            Object {
              "newReplies": 2,
            }
          }
        />
      }
      id="threadFooterIndicator"
    >
      <OverlayTrigger
        defaultOverlayShown={false}
        delayShow={500}
        overlay={
          <Tooltip
            className="hidden-xs"
            id="threadFooterIndicator"
            placement="top"
          >
            <Memo(MemoizedFormattedMessage)
              defaultMessage="{newReplies, plural, =0 {no unread messages} =1 {one unread message} other {# unread messages}}"
              id="threading.numNewMessages"
              values={
                Object {
                  "newReplies": 2,
                }
              }
            />
          </Tooltip>
        }
        placement="top"
        trigger={
          Array [
            "hover",
            "focus",
          ]
        }
      >
        <OverlayTrigger
          defaultOverlayShown={false}
          delayShow={500}
          overlay={
            <OverlayWrapper
              className="hidden-xs"
              id="threadFooterIndicator"
              intl={
                Object {
                  "defaultFormats": Object {},
                  "defaultLocale": "en",
                  "defaultRichTextElements": undefined,
                  "formatDate": [Function],
                  "formatDateTimeRange": [Function],
                  "formatDateToParts": [Function],
                  "formatDisplayName": [Function],
                  "formatList": [Function],
                  "formatListToParts": [Function],
                  "formatMessage": [Function],
                  "formatNumber": [Function],
                  "formatNumberToParts": [Function],
                  "formatPlural": [Function],
                  "formatRelativeTime": [Function],
                  "formatTime": [Function],
                  "formatTimeToParts": [Function],
                  "formats": Object {},
                  "formatters": Object {
                    "getDateTimeFormat": [Function],
                    "getDisplayNames": [Function],
                    "getListFormat": [Function],
                    "getMessageFormat": [Function],
                    "getNumberFormat": [Function],
                    "getPluralRules": [Function],
                    "getRelativeTimeFormat": [Function],
                  },
                  "locale": "en",
                  "messages": Object {},
                  "onError": [Function],
                  "textComponent": "span",
                  "timeZone": "Etc/UTC",
                  "wrapRichTextChunksInFragment": undefined,
                }
              }
              placement="top"
            >
              <Memo(MemoizedFormattedMessage)
                defaultMessage="{newReplies, plural, =0 {no unread messages} =1 {one unread message} other {# unread messages}}"
                id="threading.numNewMessages"
                values={
                  Object {
                    "newReplies": 2,
                  }
                }
              />
            </OverlayWrapper>
          }
          placement="top"
          trigger={
            Array [
              "hover",
              "focus",
            ]
          }
        >
          <div
            className="indicator"
            onBlur={[Function]}
            onClick={null}
            onFocus={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
            tabIndex={0}
          >
            <div
              className="dot-unreads"
            />
          </div>
        </OverlayTrigger>
      </OverlayTrigger>
    </SimpleTooltip>
    <Memo(Avatars)
      size="sm"
      userIds={
        Array [
          "5",
          "4",
          "3",
          "2",
          "1",
        ]
      }
    >
      <div
        className="Avatars Avatars___sm"
        onMouseLeave={[Function]}
      >
        <UserAvatar
          disableProfileOverlay={false}
          key="5"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="5"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/5/image?_=0"
                userId="5"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/5/image?_=0"
                  userId="5"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last5"
                id="name-5"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-5"
                      placement="top"
                    >
                      first.last5
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-5"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last5
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/5/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/5/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <UserAvatar
          disableProfileOverlay={false}
          key="4"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="4"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/4/image?_=0"
                userId="4"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/4/image?_=0"
                  userId="4"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last4"
                id="name-4"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-4"
                      placement="top"
                    >
                      first.last4
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-4"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last4
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/4/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/4/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <UserAvatar
          disableProfileOverlay={false}
          key="3"
          overlayProps={
            Object {
              "animation": true,
              "delayShow": undefined,
              "onEntered": [Function],
            }
          }
          size="sm"
          style={
            Object {
              "background": "rgb(240, 240, 241)",
            }
          }
          userId="3"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            disabled={false}
            overlay={
              <Memo(Connect(injectIntl(ProfilePopover)))
                className="user-profile-popover"
                hide={[Function]}
                src="/api/v4/users/3/image?_=0"
                userId="3"
              />
            }
            placement="right"
            rootClose={true}
            trigger="click"
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              overlay={
                <OverlayWrapper
                  className="user-profile-popover"
                  hide={[Function]}
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  src="/api/v4/users/3/image?_=0"
                  userId="3"
                />
              }
              placement="right"
              rootClose={true}
              trigger="click"
            >
              <SimpleTooltip
                animation={true}
                content="first.last3"
                id="name-3"
                onClick={[Function]}
                onEntered={[Function]}
              >
                <OverlayTrigger
                  animation={true}
                  defaultOverlayShown={false}
                  delayShow={500}
                  onClick={[Function]}
                  onEntered={[Function]}
                  overlay={
                    <Tooltip
                      className="hidden-xs"
                      id="name-3"
                      placement="top"
                    >
                      first.last3
                    </Tooltip>
                  }
                  placement="top"
                  trigger={
                    Array [
                      "hover",
                      "focus",
                    ]
                  }
                >
                  <OverlayTrigger
                    animation={true}
                    defaultOverlayShown={false}
                    delayShow={500}
                    onClick={[Function]}
                    onEntered={[Function]}
                    overlay={
                      <OverlayWrapper
                        className="hidden-xs"
                        id="name-3"
                        intl={
                          Object {
                            "defaultFormats": Object {},
                            "defaultLocale": "en",
                            "defaultRichTextElements": undefined,
                            "formatDate": [Function],
                            "formatDateTimeRange": [Function],
                            "formatDateToParts": [Function],
                            "formatDisplayName": [Function],
                            "formatList": [Function],
                            "formatListToParts": [Function],
                            "formatMessage": [Function],
                            "formatNumber": [Function],
                            "formatNumberToParts": [Function],
                            "formatPlural": [Function],
                            "formatRelativeTime": [Function],
                            "formatTime": [Function],
                            "formatTimeToParts": [Function],
                            "formats": Object {},
                            "formatters": Object {
                              "getDateTimeFormat": [Function],
                              "getDisplayNames": [Function],
                              "getListFormat": [Function],
                              "getMessageFormat": [Function],
                              "getNumberFormat": [Function],
                              "getPluralRules": [Function],
                              "getRelativeTimeFormat": [Function],
                            },
                            "locale": "en",
                            "messages": Object {},
                            "onError": [Function],
                            "textComponent": "span",
                            "timeZone": "Etc/UTC",
                            "wrapRichTextChunksInFragment": undefined,
                          }
                        }
                        placement="top"
                      >
                        first.last3
                      </OverlayWrapper>
                    }
                    placement="top"
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <RoundButton
                      className="style--none"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    >
                      <button
                        className="RoundButton-dvlhqG gHOQXq style--none"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <Memo(Avatar)
                          size="sm"
                          style={
                            Object {
                              "background": "rgb(240, 240, 241)",
                            }
                          }
                          tabIndex={-1}
                          url="/api/v4/users/3/image?_=0"
                        >
                          <img
                            alt="user profile image"
                            className="Avatar Avatar-sm"
                            loading="lazy"
                            onError={[Function]}
                            src="/api/v4/users/3/image?_=0"
                            style={
                              Object {
                                "background": "rgb(240, 240, 241)",
                              }
                            }
                            tabIndex={-1}
                          />
                        </Memo(Avatar)>
                      </button>
                    </RoundButton>
                  </OverlayTrigger>
                </OverlayTrigger>
              </SimpleTooltip>
            </OverlayTrigger>
          </OverlayTrigger>
        </UserAvatar>
        <SimpleTooltip
          animation={true}
          content="first.last2, first.last1"
          id="names-overflow"
          onEntered={[Function]}
        >
          <OverlayTrigger
            animation={true}
            defaultOverlayShown={false}
            delayShow={500}
            onEntered={[Function]}
            overlay={
              <Tooltip
                className="hidden-xs"
                id="names-overflow"
                placement="top"
              >
                first.last2, first.last1
              </Tooltip>
            }
            placement="top"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <OverlayTrigger
              animation={true}
              defaultOverlayShown={false}
              delayShow={500}
              onEntered={[Function]}
              overlay={
                <OverlayWrapper
                  className="hidden-xs"
                  id="names-overflow"
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": "Etc/UTC",
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  placement="top"
                >
                  first.last2, first.last1
                </OverlayWrapper>
              }
              placement="top"
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <Memo(Avatar)
                onBlur={[Function]}
                onClick={null}
                onFocus={[Function]}
                onMouseOut={[Function]}
                onMouseOver={[Function]}
                size="sm"
                style={
                  Object {
                    "background": "rgb(240, 240, 241)",
                  }
                }
                tabIndex={0}
                text="+2"
              >
                <div
                  className="Avatar Avatar-sm Avatar-plain"
                  data-content="+2"
                  onBlur={[Function]}
                  onClick={null}
                  onFocus={[Function]}
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                  style={
                    Object {
                      "background": "rgb(240, 240, 241)",
                    }
                  }
                  tabIndex={0}
                />
              </Memo(Avatar)>
            </OverlayTrigger>
          </OverlayTrigger>
        </SimpleTooltip>
      </div>
    </Memo(Avatars)>
    <Memo(Button)
      className="ReplyButton separated"
      onClick={[Function]}
      prepend={
        <span
          className="icon"
        >
          <i
            className="icon-reply-outline"
          />
        </span>
      }
    >
      <button
        className="Button Button___transparent ReplyButton separated"
        onClick={[Function]}
      >
        <span
          className="Button_prepended"
        >
          <span
            className="icon"
          >
            <i
              className="icon-reply-outline"
            />
          </span>
        </span>
        <span
          className="Button_label"
        >
          <FormattedMessage
            defaultMessage="{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}"
            id="threading.numReplies"
            values={
              Object {
                "totalReplies": 9,
              }
            }
          >
            <span>
              9 replies
            </span>
          </FormattedMessage>
        </span>
      </button>
    </Memo(Button)>
    <Memo(FollowButton)
      className="separated"
      isFollowing={true}
      onClick={[Function]}
    >
      <Memo(Button)
        className="separated FollowButton"
        disabled={false}
        isActive={true}
        onClick={[Function]}
      >
        <button
          className="Button Button___transparent is-active separated FollowButton"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="Button_label"
          >
            Following
          </span>
        </button>
      </Memo(Button)>
    </Memo(FollowButton)>
    <Connect(injectIntl(Timestamp))
      day="numeric"
      units={
        Array [
          "now",
          "minute",
          "hour",
          "day",
          "week",
        ]
      }
      useTime={false}
      value={1554161504000}
    >
      <injectIntl(Timestamp)
        day="numeric"
        dispatch={[Function]}
        hourCycle="h12"
        units={
          Array [
            "now",
            "minute",
            "hour",
            "day",
            "week",
          ]
        }
        useTime={false}
        value={1554161504000}
      >
        <Timestamp
          day="numeric"
          dispatch={[Function]}
          hour="numeric"
          hourCycle="h12"
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "defaultRichTextElements": undefined,
              "formatDate": [Function],
              "formatDateTimeRange": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatListToParts": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": "span",
              "timeZone": "Etc/UTC",
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          minute="numeric"
          month="long"
          numeric="auto"
          relNearest={1}
          second="numeric"
          style="long"
          timeZoneName="short"
          units={
            Array [
              "now",
              "minute",
              "hour",
              "day",
              "week",
            ]
          }
          useTime={false}
          value={1554161504000}
          weekday="long"
          year="numeric"
        >
          <span
            className="Timestamp separated alt-visible"
          >
            <FormattedMessage
              defaultMessage="Last reply {formatted}"
              id="threading.footer.lastReplyAt"
              values={
                Object {
                  "formatted": <Memo(SemanticTime)
                    value={2019-04-01T23:31:44.000Z}
                  >
                    April 1, 2019
                  </Memo(SemanticTime)>,
                }
              }
            >
              <span>
                Last reply 
                <Memo(SemanticTime)
                  key=".$.1"
                  value={2019-04-01T23:31:44.000Z}
                >
                  <time
                    dateTime="2019-04-01T23:31:44.000"
                  >
                    April 1, 2019
                  </time>
                </Memo(SemanticTime)>
              </span>
            </FormattedMessage>
          </span>
        </Timestamp>
      </injectIntl(Timestamp)>
    </Connect(injectIntl(Timestamp))>
  </div>
</Memo(ThreadFooter)>
`;
