// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codeBlock should render html code block with proper indentation after syntax highlighting 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={Object {}}
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <CodeBlock
    code="\`\`\`html
<div className='myClass'>
  <a href='https://randomgibberishurl.com'>ClickMe</a>
</div>
\`\`\`
"
    id="randompostid"
    language="html"
  >
    <div
      className="post-code"
    >
      <div
        className="post-code__overlay"
      >
        <CopyButton
          afterCopyText="Copied"
          content="\`\`\`html
<div className='myClass'>
  <a href='https://randomgibberishurl.com'>ClickMe</a>
</div>
\`\`\`
"
          placement="top"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            delayShow={400}
            overlay={
              <Tooltip
                bsClass="tooltip"
                id="copyButton"
                placement="right"
              >
                <Memo(MemoizedFormattedMessage)
                  defaultMessage="Copy code"
                  id="copy.code.message"
                />
              </Tooltip>
            }
            placement="top"
            shouldUpdatePosition={true}
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              overlay={
                <OverlayWrapper
                  bsClass="tooltip"
                  id="copyButton"
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": Symbol(react.fragment),
                      "timeZone": undefined,
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  placement="right"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Copy code"
                    id="copy.code.message"
                  />
                </OverlayWrapper>
              }
              placement="top"
              shouldUpdatePosition={true}
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <span
                className="post-code__clipboard"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onMouseOut={[Function]}
                onMouseOver={[Function]}
              >
                <i
                  className="icon icon-content-copy"
                  role="button"
                />
              </span>
            </OverlayTrigger>
          </OverlayTrigger>
        </CopyButton>
        <span
          className="post-code__language"
        >
          HTML, XML
        </span>
      </div>
      <RootPortal>
        <Portal
          containerInfo={
            <div>
              <nav
                class="react-contextmenu post-code__context-menu"
                role="menu"
                style="position: fixed; opacity: 0; pointer-events: none;"
                tabindex="-1"
              >
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy
                </div>
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  class="react-contextmenu-item react-contextmenu-item--divider"
                  role="menuitem"
                  tabindex="-1"
                />
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy code block
                </div>
              </nav>
            </div>
          }
        >
          <ContextMenu
            className="post-code__context-menu"
            data={Object {}}
            hideOnLeave={false}
            id="copy-code-block-context-menu-randompostid"
            onHide={[Function]}
            onMouseLeave={[Function]}
            onShow={[Function]}
            preventHideOnContextMenu={false}
            preventHideOnResize={false}
            preventHideOnScroll={false}
            rtl={false}
            style={Object {}}
          >
            <nav
              className="react-contextmenu post-code__context-menu"
              onContextMenu={[Function]}
              onMouseLeave={[Function]}
              role="menu"
              style={
                Object {
                  "opacity": 0,
                  "pointerEvents": "none",
                  "position": "fixed",
                }
              }
              tabIndex="-1"
            >
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".0"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy"
                    id="copy.message"
                  >
                    Copy
                  </FormattedMessage>
                </div>
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={true}
                key=".1"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  className="react-contextmenu-item react-contextmenu-item--divider"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                />
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".2"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy code block"
                    id="copy.block.message"
                  >
                    Copy code block
                  </FormattedMessage>
                </div>
              </MenuItem>
            </nav>
          </ContextMenu>
        </Portal>
      </RootPortal>
      <ContextMenuTrigger
        attributes={Object {}}
        collect={[Function]}
        disable={false}
        disableIfShiftIsPressed={false}
        holdToDisplay={-1}
        id="copy-code-block-context-menu-randompostid"
        mouseButton={2}
        posX={0}
        posY={0}
        renderTag="div"
      >
        <div
          className="react-contextmenu-wrapper"
          onClick={[Function]}
          onContextMenu={[Function]}
          onMouseDown={[Function]}
          onMouseOut={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
        >
          <div
            className="hljs"
          >
            <div
              className="post-code__line-numbers"
            >
              1
2
3
4
5
6
            </div>
            <code
              dangerouslySetInnerHTML={
                Object {
                  "__html": "\`\`\`html
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">className</span>=<span class=\\"hljs-string\\">&#x27;myClass&#x27;</span>&gt;</span>
  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">a</span> <span class=\\"hljs-attr\\">href</span>=<span class=\\"hljs-string\\">&#x27;https://randomgibberishurl.com&#x27;</span>&gt;</span>ClickMe<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">a</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>
\`\`\`
",
                }
              }
            />
          </div>
        </div>
      </ContextMenuTrigger>
    </div>
  </CodeBlock>
</IntlProvider>
`;

exports[`codeBlock should render html code block with proper indentation before syntax highlighting 1`] = `
<div
  className="post-code"
>
  <div
    className="post-code__overlay"
  >
    <CopyButton
      afterCopyText="Copied"
      content="\`\`\`html
<div className='myClass'>
  <a href='https://randomgibberishurl.com'>ClickMe</a>
</div>
\`\`\`
"
      placement="top"
    />
    <span
      className="post-code__language"
    >
      HTML, XML
    </span>
  </div>
  <RootPortal>
    <ContextMenu
      className="post-code__context-menu"
      data={Object {}}
      hideOnLeave={false}
      id="copy-code-block-context-menu-randompostid"
      onHide={[Function]}
      onMouseLeave={[Function]}
      onShow={[Function]}
      preventHideOnContextMenu={false}
      preventHideOnResize={false}
      preventHideOnScroll={false}
      rtl={false}
      style={Object {}}
    >
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy"
          id="copy.message"
        />
      </MenuItem>
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={true}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      />
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy code block"
          id="copy.block.message"
        />
      </MenuItem>
    </ContextMenu>
  </RootPortal>
  <ContextMenuTrigger
    attributes={Object {}}
    collect={[Function]}
    disable={false}
    disableIfShiftIsPressed={false}
    holdToDisplay={-1}
    id="copy-code-block-context-menu-randompostid"
    mouseButton={2}
    posX={0}
    posY={0}
    renderTag="div"
  >
    <div
      className="hljs"
    >
      <div
        className="post-code__line-numbers"
      >
        1
2
3
4
5
6
      </div>
      <code
        dangerouslySetInnerHTML={
          Object {
            "__html": "\`\`\`html
&lt;div className=&apos;myClass&apos;&gt;
  &lt;a href=&apos;https://randomgibberishurl.com&apos;&gt;ClickMe&lt;/a&gt;
&lt;/div&gt;
\`\`\`
",
          }
        }
      />
    </div>
  </ContextMenuTrigger>
</div>
`;

exports[`codeBlock should render typescript code block after syntax highlighting 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={Object {}}
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <CodeBlock
    code="\`\`\`typescript
const myFunction = () => {
    console.log('This is a meaningful function');
};
\`\`\`
"
    id="randompostid"
    language="typescript"
  >
    <div
      className="post-code"
    >
      <div
        className="post-code__overlay"
      >
        <CopyButton
          afterCopyText="Copied"
          content="\`\`\`typescript
const myFunction = () => {
    console.log('This is a meaningful function');
};
\`\`\`
"
          placement="top"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            delayShow={400}
            overlay={
              <Tooltip
                bsClass="tooltip"
                id="copyButton"
                placement="right"
              >
                <Memo(MemoizedFormattedMessage)
                  defaultMessage="Copy code"
                  id="copy.code.message"
                />
              </Tooltip>
            }
            placement="top"
            shouldUpdatePosition={true}
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              overlay={
                <OverlayWrapper
                  bsClass="tooltip"
                  id="copyButton"
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": Symbol(react.fragment),
                      "timeZone": undefined,
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  placement="right"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Copy code"
                    id="copy.code.message"
                  />
                </OverlayWrapper>
              }
              placement="top"
              shouldUpdatePosition={true}
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <span
                className="post-code__clipboard"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onMouseOut={[Function]}
                onMouseOver={[Function]}
              >
                <i
                  className="icon icon-content-copy"
                  role="button"
                />
              </span>
            </OverlayTrigger>
          </OverlayTrigger>
        </CopyButton>
        <span
          className="post-code__language"
        >
          TypeScript
        </span>
      </div>
      <RootPortal>
        <Portal
          containerInfo={
            <div>
              <nav
                class="react-contextmenu post-code__context-menu"
                role="menu"
                style="position: fixed; opacity: 0; pointer-events: none;"
                tabindex="-1"
              >
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy
                </div>
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  class="react-contextmenu-item react-contextmenu-item--divider"
                  role="menuitem"
                  tabindex="-1"
                />
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy code block
                </div>
              </nav>
            </div>
          }
        >
          <ContextMenu
            className="post-code__context-menu"
            data={Object {}}
            hideOnLeave={false}
            id="copy-code-block-context-menu-randompostid"
            onHide={[Function]}
            onMouseLeave={[Function]}
            onShow={[Function]}
            preventHideOnContextMenu={false}
            preventHideOnResize={false}
            preventHideOnScroll={false}
            rtl={false}
            style={Object {}}
          >
            <nav
              className="react-contextmenu post-code__context-menu"
              onContextMenu={[Function]}
              onMouseLeave={[Function]}
              role="menu"
              style={
                Object {
                  "opacity": 0,
                  "pointerEvents": "none",
                  "position": "fixed",
                }
              }
              tabIndex="-1"
            >
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".0"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy"
                    id="copy.message"
                  >
                    Copy
                  </FormattedMessage>
                </div>
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={true}
                key=".1"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  className="react-contextmenu-item react-contextmenu-item--divider"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                />
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".2"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy code block"
                    id="copy.block.message"
                  >
                    Copy code block
                  </FormattedMessage>
                </div>
              </MenuItem>
            </nav>
          </ContextMenu>
        </Portal>
      </RootPortal>
      <ContextMenuTrigger
        attributes={Object {}}
        collect={[Function]}
        disable={false}
        disableIfShiftIsPressed={false}
        holdToDisplay={-1}
        id="copy-code-block-context-menu-randompostid"
        mouseButton={2}
        posX={0}
        posY={0}
        renderTag="div"
      >
        <div
          className="react-contextmenu-wrapper"
          onClick={[Function]}
          onContextMenu={[Function]}
          onMouseDown={[Function]}
          onMouseOut={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
        >
          <div
            className="hljs"
          >
            <div
              className="post-code__line-numbers"
            >
              1
2
3
4
5
6
            </div>
            <code
              dangerouslySetInnerHTML={
                Object {
                  "__html": "<span class=\\"hljs-string\\">\`\`</span><span class=\\"hljs-string\\">\`typescript
const myFunction = () =&gt; {
    console.log(&#x27;This is a meaningful function&#x27;);
};
\`</span><span class=\\"hljs-string\\">\`\`</span>
",
                }
              }
            />
          </div>
        </div>
      </ContextMenuTrigger>
    </div>
  </CodeBlock>
</IntlProvider>
`;

exports[`codeBlock should render typescript code block before syntax highlighting 1`] = `
<div
  className="post-code"
>
  <div
    className="post-code__overlay"
  >
    <CopyButton
      afterCopyText="Copied"
      content="\`\`\`typescript
const myFunction = () => {
    console.log('This is a meaningful function');
};
\`\`\`
"
      placement="top"
    />
    <span
      className="post-code__language"
    >
      TypeScript
    </span>
  </div>
  <RootPortal>
    <ContextMenu
      className="post-code__context-menu"
      data={Object {}}
      hideOnLeave={false}
      id="copy-code-block-context-menu-randompostid"
      onHide={[Function]}
      onMouseLeave={[Function]}
      onShow={[Function]}
      preventHideOnContextMenu={false}
      preventHideOnResize={false}
      preventHideOnScroll={false}
      rtl={false}
      style={Object {}}
    >
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy"
          id="copy.message"
        />
      </MenuItem>
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={true}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      />
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy code block"
          id="copy.block.message"
        />
      </MenuItem>
    </ContextMenu>
  </RootPortal>
  <ContextMenuTrigger
    attributes={Object {}}
    collect={[Function]}
    disable={false}
    disableIfShiftIsPressed={false}
    holdToDisplay={-1}
    id="copy-code-block-context-menu-randompostid"
    mouseButton={2}
    posX={0}
    posY={0}
    renderTag="div"
  >
    <div
      className="hljs"
    >
      <div
        className="post-code__line-numbers"
      >
        1
2
3
4
5
6
      </div>
      <code
        dangerouslySetInnerHTML={
          Object {
            "__html": "\`\`\`typescript
const myFunction = () =&gt; {
    console.log(&apos;This is a meaningful function&apos;);
};
\`\`\`
",
          }
        }
      />
    </div>
  </ContextMenuTrigger>
</div>
`;

exports[`codeBlock should render unknown language after syntax highlighting 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={Object {}}
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <CodeBlock
    code="\`\`\`unknownLanguage
this is my unknown language
it shouldn't highlight, it's just garbage
\`\`\`
"
    id="randompostid"
    language="unknownLanguage"
  >
    <div
      className="post-code"
    >
      <div
        className="post-code__overlay"
      >
        <CopyButton
          afterCopyText="Copied"
          content="\`\`\`unknownLanguage
this is my unknown language
it shouldn't highlight, it's just garbage
\`\`\`
"
          placement="top"
        >
          <OverlayTrigger
            defaultOverlayShown={false}
            delayShow={400}
            overlay={
              <Tooltip
                bsClass="tooltip"
                id="copyButton"
                placement="right"
              >
                <Memo(MemoizedFormattedMessage)
                  defaultMessage="Copy code"
                  id="copy.code.message"
                />
              </Tooltip>
            }
            placement="top"
            shouldUpdatePosition={true}
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <OverlayTrigger
              defaultOverlayShown={false}
              delayShow={400}
              overlay={
                <OverlayWrapper
                  bsClass="tooltip"
                  id="copyButton"
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "defaultRichTextElements": undefined,
                      "formatDate": [Function],
                      "formatDateTimeRange": [Function],
                      "formatDateToParts": [Function],
                      "formatDisplayName": [Function],
                      "formatList": [Function],
                      "formatListToParts": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatNumberToParts": [Function],
                      "formatPlural": [Function],
                      "formatRelativeTime": [Function],
                      "formatTime": [Function],
                      "formatTimeToParts": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getDisplayNames": [Function],
                        "getListFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralRules": [Function],
                        "getRelativeTimeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {},
                      "onError": [Function],
                      "textComponent": Symbol(react.fragment),
                      "timeZone": undefined,
                      "wrapRichTextChunksInFragment": undefined,
                    }
                  }
                  placement="right"
                >
                  <Memo(MemoizedFormattedMessage)
                    defaultMessage="Copy code"
                    id="copy.code.message"
                  />
                </OverlayWrapper>
              }
              placement="top"
              shouldUpdatePosition={true}
              trigger={
                Array [
                  "hover",
                  "focus",
                ]
              }
            >
              <span
                className="post-code__clipboard"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onMouseOut={[Function]}
                onMouseOver={[Function]}
              >
                <i
                  className="icon icon-content-copy"
                  role="button"
                />
              </span>
            </OverlayTrigger>
          </OverlayTrigger>
        </CopyButton>
      </div>
      <RootPortal>
        <Portal
          containerInfo={
            <div>
              <nav
                class="react-contextmenu post-code__context-menu"
                role="menu"
                style="position: fixed; opacity: 0; pointer-events: none;"
                tabindex="-1"
              >
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy
                </div>
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  class="react-contextmenu-item react-contextmenu-item--divider"
                  role="menuitem"
                  tabindex="-1"
                />
                <div
                  aria-disabled="false"
                  class="react-contextmenu-item"
                  role="menuitem"
                  tabindex="-1"
                >
                  Copy code block
                </div>
              </nav>
            </div>
          }
        >
          <ContextMenu
            className="post-code__context-menu"
            data={Object {}}
            hideOnLeave={false}
            id="copy-code-block-context-menu-randompostid"
            onHide={[Function]}
            onMouseLeave={[Function]}
            onShow={[Function]}
            preventHideOnContextMenu={false}
            preventHideOnResize={false}
            preventHideOnScroll={false}
            rtl={false}
            style={Object {}}
          >
            <nav
              className="react-contextmenu post-code__context-menu"
              onContextMenu={[Function]}
              onMouseLeave={[Function]}
              role="menu"
              style={
                Object {
                  "opacity": 0,
                  "pointerEvents": "none",
                  "position": "fixed",
                }
              }
              tabIndex="-1"
            >
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".0"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy"
                    id="copy.message"
                  >
                    Copy
                  </FormattedMessage>
                </div>
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={true}
                key=".1"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation="horizontal"
                  className="react-contextmenu-item react-contextmenu-item--divider"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                />
              </MenuItem>
              <MenuItem
                attributes={Object {}}
                className=""
                data={Object {}}
                disabled={false}
                divider={false}
                key=".2"
                onClick={[Function]}
                onMouseLeave={[Function]}
                onMouseMove={[Function]}
                preventClose={false}
                selected={false}
              >
                <div
                  aria-disabled="false"
                  aria-orientation={null}
                  className="react-contextmenu-item"
                  onClick={[Function]}
                  onMouseLeave={[Function]}
                  onMouseMove={[Function]}
                  onTouchEnd={[Function]}
                  role="menuitem"
                  tabIndex="-1"
                >
                  <FormattedMessage
                    defaultMessage="Copy code block"
                    id="copy.block.message"
                  >
                    Copy code block
                  </FormattedMessage>
                </div>
              </MenuItem>
            </nav>
          </ContextMenu>
        </Portal>
      </RootPortal>
      <ContextMenuTrigger
        attributes={Object {}}
        collect={[Function]}
        disable={false}
        disableIfShiftIsPressed={false}
        holdToDisplay={-1}
        id="copy-code-block-context-menu-randompostid"
        mouseButton={2}
        posX={0}
        posY={0}
        renderTag="div"
      >
        <div
          className="react-contextmenu-wrapper"
          onClick={[Function]}
          onContextMenu={[Function]}
          onMouseDown={[Function]}
          onMouseOut={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
        >
          <div
            className="hljs"
          >
            <code
              dangerouslySetInnerHTML={
                Object {
                  "__html": "\`\`\`unknownLanguage
this is my unknown language
it shouldn&apos;t highlight, it&apos;s just garbage
\`\`\`
",
                }
              }
            />
          </div>
        </div>
      </ContextMenuTrigger>
    </div>
  </CodeBlock>
</IntlProvider>
`;

exports[`codeBlock should render unknown language before syntax highlighting 1`] = `
<div
  className="post-code"
>
  <div
    className="post-code__overlay"
  >
    <CopyButton
      afterCopyText="Copied"
      content="\`\`\`unknownLanguage
this is my unknown language
it shouldn't highlight, it's just garbage
\`\`\`
"
      placement="top"
    />
  </div>
  <RootPortal>
    <ContextMenu
      className="post-code__context-menu"
      data={Object {}}
      hideOnLeave={false}
      id="copy-code-block-context-menu-randompostid"
      onHide={[Function]}
      onMouseLeave={[Function]}
      onShow={[Function]}
      preventHideOnContextMenu={false}
      preventHideOnResize={false}
      preventHideOnScroll={false}
      rtl={false}
      style={Object {}}
    >
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy"
          id="copy.message"
        />
      </MenuItem>
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={true}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      />
      <MenuItem
        attributes={Object {}}
        className=""
        data={Object {}}
        disabled={false}
        divider={false}
        onClick={[Function]}
        onMouseLeave={[Function]}
        onMouseMove={[Function]}
        preventClose={false}
        selected={false}
      >
        <MemoizedFormattedMessage
          defaultMessage="Copy code block"
          id="copy.block.message"
        />
      </MenuItem>
    </ContextMenu>
  </RootPortal>
  <ContextMenuTrigger
    attributes={Object {}}
    collect={[Function]}
    disable={false}
    disableIfShiftIsPressed={false}
    holdToDisplay={-1}
    id="copy-code-block-context-menu-randompostid"
    mouseButton={2}
    posX={0}
    posY={0}
    renderTag="div"
  >
    <div
      className="hljs"
    >
      <code
        dangerouslySetInnerHTML={
          Object {
            "__html": "\`\`\`unknownLanguage
this is my unknown language
it shouldn&apos;t highlight, it&apos;s just garbage
\`\`\`
",
          }
        }
      />
    </div>
  </ContextMenuTrigger>
</div>
`;
