// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/TextBox should match snapshot with additional, optional props 1`] = `
<div
  className="textarea-wrapper textarea-wrapper--preview"
>
  <Connect(SuggestionBox)
    channelId="channelId"
    className="form-control custom-textarea custom-textarea--emoji-picker bad-connection custom-textarea--preview"
    contextId="channelId"
    disabled={true}
    id="someid"
    inputComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    isRHS={true}
    listComponent={[Function]}
    listPosition="top"
    listenForMentionKeyClick={true}
    onBlur={[Function]}
    onChange={[Function]}
    onComposition={[Function]}
    onHeightChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onKeyUp={[Function]}
    onMouseUp={[Function]}
    onSelect={[Function]}
    openWhenEmpty={true}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "addLastViewAtToProfiles": [Function],
          "autocompleteGroups": Array [
            Object {
              "id": "gid1",
            },
            Object {
              "id": "gid2",
            },
          ],
          "autocompleteUsersInChannel": [Function],
          "channelId": "channelId",
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "forceDispatch": false,
          "getProfilesInChannel": [Function],
          "lastCompletedWord": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "priorityProfiles": undefined,
          "requestStarted": false,
          "searchAssociatedGroupsForReference": [Function],
          "triggerCharacter": "@",
          "useChannelMentions": true,
        },
        ChannelMentionProvider {
          "autocompleteChannels": [MockFunction],
          "disableDispatches": false,
          "forceDispatch": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": "~",
        },
        EmoticonProvider {
          "disableDispatches": false,
          "forceDispatch": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": ":",
        },
      ]
    }
    renderDividers={
      Array [
        "all",
      ]
    }
    spellCheck="true"
    style={
      Object {
        "visibility": "hidden",
      }
    }
    value="some test text"
  />
  <div
    className="form-control custom-textarea textbox-preview-area"
    onBlur={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    tabIndex={0}
  >
    <Connect(PostMarkdown)
      channelId="channelId"
      imageProps={
        Object {
          "hideUtilities": true,
        }
      }
      isRHS={true}
      mentionKeys={Array []}
      message="some test text"
    />
  </div>
</div>
`;

exports[`components/TextBox should match snapshot with required props 1`] = `
<div
  className="textarea-wrapper"
>
  <Connect(SuggestionBox)
    channelId="channelId"
    className="form-control custom-textarea"
    contextId="channelId"
    id="someid"
    inputComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    isRHS={false}
    listComponent={[Function]}
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onKeyUp={[Function]}
    onMouseUp={[Function]}
    onSelect={[Function]}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "addLastViewAtToProfiles": [Function],
          "autocompleteGroups": Array [
            Object {
              "id": "gid1",
            },
            Object {
              "id": "gid2",
            },
          ],
          "autocompleteUsersInChannel": [Function],
          "channelId": "channelId",
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "forceDispatch": false,
          "getProfilesInChannel": [Function],
          "lastCompletedWord": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "priorityProfiles": undefined,
          "requestStarted": false,
          "searchAssociatedGroupsForReference": [Function],
          "triggerCharacter": "@",
          "useChannelMentions": true,
        },
        ChannelMentionProvider {
          "autocompleteChannels": [MockFunction],
          "disableDispatches": false,
          "forceDispatch": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": "~",
        },
        EmoticonProvider {
          "disableDispatches": false,
          "forceDispatch": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": ":",
        },
      ]
    }
    renderDividers={
      Array [
        "all",
      ]
    }
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text"
  />
</div>
`;

exports[`components/TextBox should throw error when new property is too long 1`] = `
<div
  className="textarea-wrapper"
>
  <Connect(SuggestionBox)
    channelId="channelId"
    className="form-control custom-textarea"
    contextId="channelId"
    id="someid"
    inputComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    isRHS={false}
    listComponent={[Function]}
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onKeyUp={[Function]}
    onMouseUp={[Function]}
    onSelect={[Function]}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "addLastViewAtToProfiles": [Function],
          "autocompleteGroups": Array [
            Object {
              "id": "gid1",
            },
            Object {
              "id": "gid2",
            },
          ],
          "autocompleteUsersInChannel": [Function],
          "channelId": "channelId",
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "forceDispatch": false,
          "getProfilesInChannel": [Function],
          "lastCompletedWord": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "priorityProfiles": undefined,
          "requestStarted": false,
          "searchAssociatedGroupsForReference": [Function],
          "triggerCharacter": "@",
          "useChannelMentions": true,
        },
        ChannelMentionProvider {
          "autocompleteChannels": [MockFunction],
          "disableDispatches": false,
          "forceDispatch": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": "~",
        },
        EmoticonProvider {
          "disableDispatches": false,
          "forceDispatch": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": ":",
        },
      ]
    }
    renderDividers={
      Array [
        "all",
      ]
    }
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text that exceeds char limit"
  />
</div>
`;

exports[`components/TextBox should throw error when value is too long 1`] = `
<div
  className="textarea-wrapper"
>
  <Connect(SuggestionBox)
    channelId="channelId"
    className="form-control custom-textarea"
    contextId="channelId"
    id="someid"
    inputComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    isRHS={false}
    listComponent={[Function]}
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    onKeyUp={[Function]}
    onMouseUp={[Function]}
    onSelect={[Function]}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "addLastViewAtToProfiles": [Function],
          "autocompleteGroups": Array [
            Object {
              "id": "gid1",
            },
            Object {
              "id": "gid2",
            },
          ],
          "autocompleteUsersInChannel": [Function],
          "channelId": "channelId",
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "forceDispatch": false,
          "getProfilesInChannel": [Function],
          "lastCompletedWord": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "priorityProfiles": undefined,
          "requestStarted": false,
          "searchAssociatedGroupsForReference": [Function],
          "triggerCharacter": "@",
          "useChannelMentions": true,
        },
        ChannelMentionProvider {
          "autocompleteChannels": [MockFunction],
          "disableDispatches": false,
          "forceDispatch": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": "~",
        },
        EmoticonProvider {
          "disableDispatches": false,
          "forceDispatch": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
          "triggerCharacter": ":",
        },
      ]
    }
    renderDividers={
      Array [
        "all",
      ]
    }
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text that exceeds char limit"
  />
</div>
`;
