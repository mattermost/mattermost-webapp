// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/TextBox should match snapshot with required props 1`] = `
<div
  className="textarea-wrapper"
>
  <SuggestionBox
    className="form-control custom-textarea"
    completeOnTab={true}
    containerClass=""
    id="someid"
    inputComponent={[Function]}
    isRHS={false}
    listComponent={[Function]}
    listStyle="top"
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onHeightChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    openOnFocus={false}
    openWhenEmpty={false}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "autocompleteUsersInChannel": [Function],
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "profilesInChannel": Array [
            Object {
              "id": "id1",
            },
            Object {
              "id": "id2",
            },
          ],
          "profilesNotInChannel": Array [
            Object {
              "id": "id3",
            },
            Object {
              "id": "id4",
            },
          ],
          "requestStarted": false,
        },
        ChannelMentionProvider {
          "disableDispatches": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
        EmoticonProvider {
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
      ]
    }
    renderDividers={true}
    renderNoResults={false}
    replaceAllInputOnSelect={false}
    requiredCharacters={1}
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text"
  />
</div>
`;

exports[`components/TextBox should throw error when new property is too long 1`] = `
<div
  className="textarea-wrapper"
>
  <SuggestionBox
    className="form-control custom-textarea"
    completeOnTab={true}
    containerClass=""
    id="someid"
    inputComponent={[Function]}
    isRHS={false}
    listComponent={[Function]}
    listStyle="top"
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onHeightChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    openOnFocus={false}
    openWhenEmpty={false}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "autocompleteUsersInChannel": [Function],
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "profilesInChannel": Array [
            Object {
              "id": "id1",
            },
            Object {
              "id": "id2",
            },
          ],
          "profilesNotInChannel": Array [
            Object {
              "id": "id3",
            },
            Object {
              "id": "id4",
            },
          ],
          "requestStarted": false,
        },
        ChannelMentionProvider {
          "disableDispatches": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
        EmoticonProvider {
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
      ]
    }
    renderDividers={true}
    renderNoResults={false}
    replaceAllInputOnSelect={false}
    requiredCharacters={1}
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text that exceeds char limit"
  />
</div>
`;

exports[`components/TextBox should throw error when value is too long 1`] = `
<div
  className="textarea-wrapper"
>
  <SuggestionBox
    className="form-control custom-textarea"
    completeOnTab={true}
    containerClass=""
    id="someid"
    inputComponent={[Function]}
    isRHS={false}
    listComponent={[Function]}
    listStyle="top"
    listenForMentionKeyClick={false}
    onBlur={[Function]}
    onChange={[Function]}
    onHeightChange={[Function]}
    onKeyDown={[Function]}
    onKeyPress={[Function]}
    openOnFocus={false}
    openWhenEmpty={false}
    placeholder="placeholder text"
    providers={
      Array [
        AtMentionProvider {
          "autocompleteUsersInChannel": [Function],
          "currentUserId": "currentUserId",
          "data": null,
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "profilesInChannel": Array [
            Object {
              "id": "id1",
            },
            Object {
              "id": "id2",
            },
          ],
          "profilesNotInChannel": Array [
            Object {
              "id": "id3",
            },
            Object {
              "id": "id4",
            },
          ],
          "requestStarted": false,
        },
        ChannelMentionProvider {
          "disableDispatches": false,
          "lastCompletedWord": "",
          "lastPrefixTrimmed": "",
          "lastPrefixWithNoResults": "",
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
        EmoticonProvider {
          "disableDispatches": false,
          "latestComplete": true,
          "latestPrefix": "",
          "requestStarted": false,
        },
      ]
    }
    renderDividers={true}
    renderNoResults={false}
    replaceAllInputOnSelect={false}
    requiredCharacters={1}
    spellCheck="true"
    style={
      Object {
        "visibility": "visible",
      }
    }
    value="some test text that exceeds char limit"
  />
</div>
`;
