// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/FormattedMarkdownMessage should allow to disable links 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
      "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
      "test.vals": "*Hi* {petName}!",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(FormattedMarkdownMessage)
    defaultMessage="*Hi* {petName}!"
    disableLinks={true}
    id="test.vals"
    values={
      Object {
        "petName": "http://www.mattermost.com",
      }
    }
  >
    <FormattedMarkdownMessage
      defaultMessage="*Hi* {petName}!"
      disableLinks={true}
      id="test.vals"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {
            "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
            "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
            "test.vals": "*Hi* {petName}!",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      values={
        Object {
          "petName": "http://www.mattermost.com",
        }
      }
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "<em>Hi</em> http://www.mattermost.com!",
          }
        }
      />
    </FormattedMarkdownMessage>
  </injectIntl(FormattedMarkdownMessage)>
</IntlProvider>
`;

exports[`components/FormattedMarkdownMessage should backup to default 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
      "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
      "test.vals": "*Hi* {petName}!",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(FormattedMarkdownMessage)
    defaultMessage="testing default message"
    id="xxx"
  >
    <FormattedMarkdownMessage
      defaultMessage="testing default message"
      disableLinks={false}
      id="xxx"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {
            "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
            "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
            "test.vals": "*Hi* {petName}!",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "testing default message",
          }
        }
      />
    </FormattedMarkdownMessage>
  </injectIntl(FormattedMarkdownMessage)>
</IntlProvider>
`;

exports[`components/FormattedMarkdownMessage should escape non-BR 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
      "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
      "test.vals": "*Hi* {petName}!",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(FormattedMarkdownMessage)
    defaultMessage=""
    id="test.bar"
    values={
      Object {
        "b": [Function],
        "script": [Function],
      }
    }
  >
    <FormattedMarkdownMessage
      defaultMessage=""
      disableLinks={false}
      id="test.bar"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {
            "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
            "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
            "test.vals": "*Hi* {petName}!",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      values={
        Object {
          "b": [Function],
          "script": [Function],
        }
      }
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "&lt;b&gt;hello&lt;/b&gt; &lt;script&gt;var malicious = true;&lt;/script&gt; world!",
          }
        }
      />
    </FormattedMarkdownMessage>
  </injectIntl(FormattedMarkdownMessage)>
</IntlProvider>
`;

exports[`components/FormattedMarkdownMessage should render message 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
      "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
      "test.vals": "*Hi* {petName}!",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(FormattedMarkdownMessage)
    defaultMessage="**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)"
    id="test.foo"
  >
    <FormattedMarkdownMessage
      defaultMessage="**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)"
      disableLinks={false}
      id="test.foo"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {
            "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
            "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
            "test.vals": "*Hi* {petName}!",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "<strong>bold</strong> <em>italic</em> <a href=\\"https://mattermost.com/\\">link</a> &lt;br/&gt; <a href=\\"https://mattermost.com/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">link target blank</a>",
          }
        }
      />
    </FormattedMarkdownMessage>
  </injectIntl(FormattedMarkdownMessage)>
</IntlProvider>
`;

exports[`components/FormattedMarkdownMessage values should work 1`] = `
<IntlProvider
  defaultFormats={Object {}}
  defaultLocale="en"
  formats={Object {}}
  locale="en"
  messages={
    Object {
      "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
      "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
      "test.vals": "*Hi* {petName}!",
    }
  }
  onError={[Function]}
  textComponent={Symbol(react.fragment)}
>
  <injectIntl(FormattedMarkdownMessage)
    defaultMessage="*Hi* {petName}!"
    id="test.vals"
    values={
      Object {
        "petName": "sweetie",
      }
    }
  >
    <FormattedMarkdownMessage
      defaultMessage="*Hi* {petName}!"
      disableLinks={false}
      id="test.vals"
      intl={
        Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {
            "test.bar": "<b>hello</b> <script>var malicious = true;</script> world!",
            "test.foo": "**bold** *italic* [link](https://mattermost.com/) <br/> [link target blank](!https://mattermost.com/)",
            "test.vals": "*Hi* {petName}!",
          },
          "onError": [Function],
          "textComponent": Symbol(react.fragment),
          "timeZone": undefined,
          "wrapRichTextChunksInFragment": undefined,
        }
      }
      values={
        Object {
          "petName": "sweetie",
        }
      }
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "<em>Hi</em> sweetie!",
          }
        }
      />
    </FormattedMarkdownMessage>
  </injectIntl(FormattedMarkdownMessage)>
</IntlProvider>
`;
