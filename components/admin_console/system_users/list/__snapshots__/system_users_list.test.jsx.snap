// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/admin_console/system_users/list should match default snapshot 1`] = `
<div>
  <injectIntl(SearchableUserList)
    actionProps={
      Object {
        "doEmailReset": [Function],
        "doManageRoles": [Function],
        "doManageTeams": [Function],
        "doManageTokens": [Function],
        "doPasswordReset": [Function],
        "enableUserAccessTokens": false,
        "experimentalEnableAuthenticationTransfer": false,
        "isDisabled": false,
        "mfaEnabled": false,
      }
    }
    actions={
      Array [
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(SystemUsersDropdown)",
          "type": [Function],
        },
      ]
    }
    enableUserAccessTokens={false}
    experimentalEnableAuthenticationTransfer={false}
    extraInfo={Object {}}
    filter=""
    focusOnMount={false}
    isDisabled={false}
    mfaEnabled={false}
    nextPage={[Function]}
    onTermChange={[MockFunction]}
    page={0}
    previousPage={[Function]}
    renderCount={[Function]}
    renderFilterRow={[MockFunction]}
    rowComponentType={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(UserListRowWithError)",
        "type": [Function],
      }
    }
    search={[Function]}
    teamId=""
    term=""
    total={0}
    users={Array []}
    usersPerPage={0}
  />
  <Connect(ManageTeamsModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageRolesModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageTokensModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ResetPasswordModal)
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
  <ResetEmailModal
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
</div>
`;

exports[`components/admin_console/system_users/list should match default snapshot, with users and mfa disabled 1`] = `
<div>
  <injectIntl(SearchableUserList)
    actionProps={
      Object {
        "doEmailReset": [Function],
        "doManageRoles": [Function],
        "doManageTeams": [Function],
        "doManageTokens": [Function],
        "doPasswordReset": [Function],
        "enableUserAccessTokens": false,
        "experimentalEnableAuthenticationTransfer": false,
        "isDisabled": false,
        "mfaEnabled": false,
      }
    }
    actions={
      Array [
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(SystemUsersDropdown)",
          "type": [Function],
        },
      ]
    }
    enableUserAccessTokens={false}
    experimentalEnableAuthenticationTransfer={false}
    extraInfo={
      Object {
        "id1": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** Email"
            id="admin.user_item.authServiceEmail"
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id1",
              }
            }
          />,
        ],
        "id2": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** Email"
            id="admin.user_item.authServiceEmail"
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id2",
              }
            }
          />,
        ],
        "id3": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "LDAP",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id3",
              }
            }
          />,
        ],
        "id4": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "SAML",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id4",
              }
            }
          />,
        ],
        "id5": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "Other Service",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id5",
              }
            }
          />,
        ],
      }
    }
    filter=""
    focusOnMount={false}
    isDisabled={false}
    mfaEnabled={false}
    nextPage={[Function]}
    onTermChange={[MockFunction]}
    page={0}
    previousPage={[Function]}
    renderCount={[Function]}
    renderFilterRow={[MockFunction]}
    rowComponentType={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(UserListRowWithError)",
        "type": [Function],
      }
    }
    search={[Function]}
    teamId=""
    term=""
    total={0}
    users={
      Array [
        Object {
          "id": "id1",
        },
        Object {
          "id": "id2",
        },
        Object {
          "auth_service": "ldap",
          "id": "id3",
        },
        Object {
          "auth_service": "saml",
          "id": "id4",
        },
        Object {
          "auth_service": "other service",
          "id": "id5",
        },
      ]
    }
    usersPerPage={0}
  />
  <Connect(ManageTeamsModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageRolesModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageTokensModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ResetPasswordModal)
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
  <ResetEmailModal
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
</div>
`;

exports[`components/admin_console/system_users/list should match default snapshot, with users and mfa enabled 1`] = `
<div>
  <injectIntl(SearchableUserList)
    actionProps={
      Object {
        "doEmailReset": [Function],
        "doManageRoles": [Function],
        "doManageTeams": [Function],
        "doManageTokens": [Function],
        "doPasswordReset": [Function],
        "enableUserAccessTokens": false,
        "experimentalEnableAuthenticationTransfer": false,
        "isDisabled": false,
        "mfaEnabled": true,
      }
    }
    actions={
      Array [
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(SystemUsersDropdown)",
          "type": [Function],
        },
      ]
    }
    enableUserAccessTokens={false}
    experimentalEnableAuthenticationTransfer={false}
    extraInfo={
      Object {
        "id1": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** Email"
            id="admin.user_item.authServiceEmail"
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id1",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**MFA**: No"
            id="admin.user_item.mfaNo"
          />,
        ],
        "id2": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** Email"
            id="admin.user_item.authServiceEmail"
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id2",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**MFA**: No"
            id="admin.user_item.mfaNo"
          />,
        ],
        "id3": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "LDAP",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id3",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**MFA**: No"
            id="admin.user_item.mfaNo"
          />,
        ],
        "id4": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "SAML",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id4",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**MFA**: No"
            id="admin.user_item.mfaNo"
          />,
        ],
        "id5": Array [
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**Sign-in Method:** {service}"
            id="admin.user_item.authServiceNotEmail"
            values={
              Object {
                "service": "Other Service",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**User ID:** {userID}"
            id="admin.user_item.user_id"
            values={
              Object {
                "userID": "id5",
              }
            }
          />,
          ", ",
          <injectIntl(FormattedMarkdownMessage)
            defaultMessage="**MFA**: No"
            id="admin.user_item.mfaNo"
          />,
        ],
      }
    }
    filter=""
    focusOnMount={false}
    isDisabled={false}
    mfaEnabled={true}
    nextPage={[Function]}
    onTermChange={[MockFunction]}
    page={0}
    previousPage={[Function]}
    renderCount={[Function]}
    renderFilterRow={[MockFunction]}
    rowComponentType={
      Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(UserListRowWithError)",
        "type": [Function],
      }
    }
    search={[Function]}
    teamId=""
    term=""
    total={0}
    users={
      Array [
        Object {
          "id": "id1",
        },
        Object {
          "id": "id2",
        },
        Object {
          "auth_service": "ldap",
          "id": "id3",
        },
        Object {
          "auth_service": "saml",
          "id": "id4",
        },
        Object {
          "auth_service": "other service",
          "id": "id5",
        },
      ]
    }
    usersPerPage={0}
  />
  <Connect(ManageTeamsModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageRolesModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ManageTokensModal)
    onModalDismissed={[Function]}
    show={false}
    user={null}
  />
  <Connect(ResetPasswordModal)
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
  <ResetEmailModal
    onModalDismissed={[Function]}
    onModalSubmit={[Function]}
    show={false}
    user={null}
  />
</div>
`;
