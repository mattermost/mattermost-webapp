// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

import React from 'react';
import {FormattedMessage} from 'react-intl';

import {Constants} from 'utils/constants';
import {ldapTest, invalidateAllCaches, reloadConfig} from 'actions/admin_actions';
import SystemAnalytics from 'components/analytics/system_analytics';
import TeamAnalytics from 'components/analytics/team_analytics';

import SystemUsers from './system_users';
import ServerLogs from './server_logs';
import Audits from './audits';
import LicenseSettings from './license_settings';

import * as DefinitionConstants from './admin_definition_constants';

// admin_definitions data structure define the autogenerated admin_console
// section. It defines the structure of the menu based on sections, subsections
// and pages. Each page contains an schema which defines a component to use for
// render the entire section or the name of the section (name and
// name_default), the section in the config file (id), and a list of options to
// configure (settings).
//
// All text fiels contains a transation key, and the <field>_default string are the
// default text when the translation is still not avaiable (the english version
// of the text).
//
// We can define different types of settings configuration widgets:
//
// Widget:
//   - type: which define the widget type.
//   - label (and label_default): which define the main text of the setting.
//   - isDisabled: a function which receive current config, the state of the page and the license.
//   - isHidden: a function which receive current config, the state of the page and the license.
//
// Custom Widget (extends from Widget):
//   - component: The component used to render the widget
//
// JobsTable Widget (extends from Widget):
//   - job_type: The kind of job from Constants.JobTypes
//   - render_job: Function to convert a job object into a react component.
//
// Banner Widget (extends from Widget):
//   - banner_type: The type of banner (options: info or warning)
//
// Setting Widget (extends from Widget):
//   - key: The key to store the configuration in the config file.
//   - help_text (and help_text_default): Long description of the field.
//   - help_text_html: True if the translation text contains html.
//   - help_text_values: Values to fill the translation (if needed).
//
// Bool Widget (extends from Setting Widget)
//
// Number Widget (extends from Setting Widget)
//
// Text Widget (extends from Setting Widget)
//   - placeholder (and placeholder_default): Placeholder text to show in the input.
//
// Button Widget (extends from Setting Widget)
//   - action: A redux action to execute on click.
//   - error_message (and error_message_default): Error to show if action doesn't work.
//   - success_message (and success_message_default): Success message to show if action doesn't work.
//
// Language Widget (extends from Setting Widget)
//   - multiple: If you can select multiple languages.
//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).
//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).
//
// Dropdown Widget (extends from Setting Widget)
//   - options: List of options of the dropdown (each options has value, display_name and display_name_default fields).

export const needsUtils = {
    not: (func) => (config, state, license) => !func(config, state, license),
    and: (...funcs) => (config, state, license) => {
        for (const func of funcs) {
            if (!func(config, state, license)) {
                return false;
            }
        }
        return true;
    },
    or: (...funcs) => (config, state, license) => {
        for (const func of funcs) {
            if (func(config, state, license)) {
                return true;
            }
        }
        return false;
    },
    stateValueMatch: (key, regex) => (config, state) => state[key].match(regex),
    stateValueEqual: (key, value) => (config, state) => state[key] === value,
    hasLicense: (config, state, license) => license.IsLicensed,
};

export default {
    reporting: {
        system_analytics: {
            schema: {
                id: 'SystemAnalytics',
                component: SystemAnalytics,
            },
        },
        team_analytics: {
            schema: {
                id: 'TeamAnalytics',
                component: TeamAnalytics,
            },
        },
        system_users: {
            schema: {
                id: 'SystemUsers',
                component: SystemUsers,
            },
        },
        server_logs: {
            schema: {
                id: 'ServerLogs',
                component: ServerLogs,
            },
        },
    },
    settings: {
        general: {
            configuration: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.general.configuration',
                    name_default: 'Configuration',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.rate.noteDescription',
                            label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.SiteURL',
                            label: 'admin.service.siteURL',
                            label_default: 'Site URL:',
                            help_text: 'admin.service.siteURLDescription',
                            help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://mattermost.example.com:8065. This setting is required.',
                            placeholder: 'admin.service.siteURLExample',
                            placeholder_default: 'E.g.: "https://mattermost.example.com:1234"',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.ListenAddress',
                            label: 'admin.service.listenAddress',
                            label_default: 'Listen Address:',
                            placeholder: 'admin.service.listenExample',
                            placeholder_default: 'E.g.: ":8065"',
                            help_text: 'admin.service.listenDescription',
                            help_text_default: 'The address and port to which to bind and listen. Specifying ":8065" will bind to all network interfaces. Specifying "127.0.0.1:8065" will only bind to the network interface having that IP address. If you choose a port of a lower level (called "system ports" or "well-known ports", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: "sudo setcap cap_net_bind_service=+ep ./bin/platform" to allow Mattermost to bind to well-known ports.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.Forward80To443',
                            label: 'admin.service.forward80To443',
                            label_default: 'Forward port 80 to 443:',
                            help_text: 'admin.service.forward80To443Description',
                            help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',
                            disabled_help_text: 'admin.service.forward80To443Description.disabled',
                            disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.<br /><br />This setting cannot be enabled until your server is <a href="#ListenAddress">listening</a> on port 443.',
                            disabled_help_text_html: true,
                            isDisabled: needsUtils.not(needsUtils.stateValueMatch('ServiceSettings.ListenAddress', /:443$/)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'ServiceSettings.ConnectionSecurity',
                            label: 'admin.connectionSecurityTitle',
                            label_default: 'Connection Security:',
                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,
                            options: [
                                {
                                    value: '',
                                    display_name: 'admin.connectionSecurityNone',
                                    display_name_default: 'None',
                                },
                                {
                                    value: 'TLS',
                                    display_name: 'admin.connectionSecurityTls',
                                    display_name_default: 'TLS (Recommended)',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.TLSCertFile',
                            label: 'admin.service.tlsCertFile',
                            label_default: 'TLS Certificate File:',
                            help_text: 'admin.service.tlsCertFileDescription',
                            help_text_default: 'The certificate file to use.',
                            isDisabled: needsUtils.stateValueEqual('ServiceSettings.UseLetsEncrypt', true),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.TLSKeyFile',
                            label: 'admin.service.tlsKeyFile',
                            label_default: 'TLS Key File:',
                            help_text: 'admin.service.tlsKeyFileDescription',
                            help_text_default: 'The private key file to use.',
                            isDisabled: needsUtils.stateValueEqual('ServiceSettings.UseLetsEncrypt', true),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.UseLetsEncrypt',
                            label: 'admin.service.useLetsEncrypt',
                            label_default: 'Use Let\'s Encrypt:',
                            help_text: 'admin.service.useLetsEncryptDescription',
                            help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',
                            disabled_help_text: 'admin.service.useLetsEncryptDescription.disabled',
                            disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.<br /><br />This setting cannot be enabled unless the <a href="#Forward80To443">Forward port 80 to 443</a> setting is set to true.',
                            disabled_help_text_html: true,
                            isDisabled: needsUtils.stateValueEqual('ServiceSettings.Forward80To443', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.LetsEncryptCertificateCacheFile',
                            label: 'admin.service.letsEncryptCertificateCacheFile',
                            label_default: 'Let\'s Encrypt Certificate Cache File:',
                            help_text: 'admin.service.letsEncryptCertificateCacheFileDescription',
                            help_text_default: 'Certificates retrieved and other data about the Let\'s Encrypt service will be stored in this file.',
                            isDisabled: needsUtils.stateValueEqual('ServiceSettings.UseLetsEncrypt', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'ServiceSettings.ReadTimeout',
                            label: 'admin.service.readTimeout',
                            label_default: 'Read Timeout:',
                            help_text: 'admin.service.readTimeoutDescription',
                            help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'ServiceSettings.WriteTimeout',
                            label: 'admin.service.writeTimeout',
                            label_default: 'Write Timeout:',
                            help_text: 'admin.service.writeTimeoutDescription',
                            help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableAPIv3',
                            label: 'admin.service.enableAPIv3',
                            label_default: 'Allow use of API v3 endpoints:',
                            help_text: 'admin.service.enableAPIv3Description',
                            help_text_default: 'Set to false to disable all version 3 endpoints of the REST API. Integrations that rely on API v3 will fail and can then be identified for migration to API v4. API v3 is deprecated and will be removed in the near future. See <a href="https://api.mattermost.com" target="_blank">https://api.mattermost.com</a> for details.',
                            help_text_html: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'ServiceSettings.WebserverMode',
                            label: 'admin.webserverModeTitle',
                            label_default: 'Webserver Mode:',
                            help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,
                            options: [
                                {
                                    value: 'gzip',
                                    display_name: 'admin.webserverModeGzip',
                                    display_name_default: 'gzip',
                                },
                                {
                                    value: 'uncompressed',
                                    display_name: 'admin.webserverModeUncompressed',
                                    display_name_default: 'Uncompressed',
                                },
                                {
                                    value: 'disabled',
                                    display_name: 'admin.webserverModeDisabled',
                                    display_name_default: 'Disabled',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            action: reloadConfig,
                            key: 'ReloadConfigButton',
                            label: 'admin.reload.button',
                            label_default: 'Reload Configuration From Disk',
                            help_text: 'admin.reload.reloadDescription',
                            help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating "config.json" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',
                            help_text_values: {
                                featureName: (
                                    <b>
                                        <FormattedMessage
                                            id='admin.reload.reloadDescription.featureName'
                                            defaultMessage='Reload Configuration from Disk'
                                        />
                                    </b>
                                ),
                                recycleDatabaseConnections: (
                                    <a href='../advanced/database'>
                                        <b>
                                            <FormattedMessage
                                                id='admin.reload.reloadDescription.recycleDatabaseConnections'
                                                defaultMessage='Database > Recycle Database Connections'
                                            />
                                        </b>
                                    </a>
                                ),
                            },
                            error_message: 'admin.reload.reloadFail',
                            error_message_default: 'Reload unsuccessful: {error}',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            key: 'PurgeButton',
                            action: invalidateAllCaches,
                            label: 'admin.purge.button',
                            label_default: 'Purge All Caches',
                            help_text: 'admin.purge.purgeDescription',
                            help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',
                            error_message: 'admin.purge.purgeFail',
                            error_message_default: 'Purging unsuccessful: {error}',
                        },
                    ],
                },
            },
            localization: {
                schema: {
                    id: 'LocalizationSettings',
                    name: 'admin.general.localization',
                    name_default: 'Localization',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.DefaultServerLocale',
                            label: 'admin.general.localization.serverLocaleTitle',
                            label_default: 'Default Server Language:',
                            help_text: 'admin.general.localization.serverLocaleDescription',
                            help_text_default: 'Default language for system messages and logs. Changing this will require a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.DefaultClientLocale',
                            label: 'admin.general.localization.clientLocaleTitle',
                            label_default: 'Default Client Language:',
                            help_text: 'admin.general.localization.clientLocaleDescription',
                            help_text_default: 'Default language for newly created users and pages where the user hasn\'t logged in.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.AvailableLocales',
                            label: 'admin.general.localization.availableLocalesTitle',
                            label_default: 'Available Languages:',
                            help_text: 'admin.general.localization.availableLocalesDescription',
                            help_text_html: true,
                            help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\'re manually adding new languages, the <strong>Default Client Language</strong> must be added before saving this setting.<br /><br />Would like to help with translations? Join the <a href="http://translate.mattermost.com/" target="_blank">Mattermost Translation Server</a> to contribute.',
                            multiple: true,
                            no_result: 'admin.general.localization.availableLocalesNoResults',
                            no_result_default: 'No results found',
                            not_present: 'admin.general.localization.availableLocalesNotPresent',
                            not_present_default: 'The default client language must be included in the available list',
                        },
                    ],
                },
            },
            privacy: {
                schema: {
                    id: 'PrivacySettings',
                    name: 'admin.general.privacy',
                    name_default: 'Privacy',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PrivacySettings.ShowEmailAddress',
                            label: 'admin.privacy.showEmailTitle',
                            label_default: 'Show Email Address:',
                            help_text: 'admin.privacy.showEmailDescription',
                            help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PrivacySettings.ShowFullName',
                            label: 'admin.privacy.showFullNameTitle',
                            label_default: 'Show Full Name:',
                            help_text: 'admin.privacy.showFullNameDescription',
                            help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',
                        },
                    ],
                },
            },
            compliance: {
                schema: {
                    id: 'ComplianceSettings',
                    name: 'admin.compliance.title',
                    name_default: 'Compliance Settings',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.compliance.noLicense',
                            label_default: '<h4 class="banner__heading">Note:</h4><p>Compliance is an enterprise feature. Your current license does not support Compliance. Click <a href="http://mattermost.com"target="_blank">here</a> for information and pricing on enterprise licenses.</p>',
                            isHidden: needsUtils.hasLicense,
                            banner_type: 'warning',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ComplianceSettings.Enable',
                            label: 'admin.compliance.enableTitle',
                            label_default: 'Enable Compliance Reporting:',
                            help_text: 'admin.compliance.enableDesc',
                            help_text_default: 'When true, Mattermost allows compliance reporting from the <strong>Compliance and Auditing</strong> tab. See <a href="https://docs.mattermost.com/administration/compliance.html" target="_blank">documentation</a> to learn more.',
                            help_text_html: true,
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ComplianceSettings.Directory',
                            label: 'admin.compliance.directoryTitle',
                            label_default: 'Compliance Report Directory:',
                            help_text: 'admin.compliance.directoryDescription',
                            help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',
                            placeholder: 'admin.sql.maxOpenExample',
                            placeholder_default: 'E.g.: "10"',
                            isDisabled: needsUtils.stateValueEqual('ComplianceSettings.Enable', false),
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ComplianceSettings.EnableDaily',
                            label: 'admin.compliance.enableDailyTitle',
                            label_default: 'Enable Daily Report:',
                            help_text: 'admin.compliance.enableDailyDesc',
                            help_text_default: 'When true, Mattermost will generate a daily compliance report.',
                            isDisabled: needsUtils.stateValueEqual('ComplianceSettings.Enable', false),
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                    ],
                },
            },
            logging: {
                schema: {
                    id: 'LogSettings',
                    name: 'admin.general.log',
                    name_default: 'Logging',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.log.noteDescription',
                            label_default: 'Changing properties other than <a href="#EnableWebhookDebugging">Enable Webhook Debugging</a> and <a href="#EnableDiagnostics">Enable Diagnostics and Error Reporting</a> in this section will require a server restart before taking effect.',
                            label_html: true,
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableConsole',
                            label: 'admin.log.consoleTitle',
                            label_default: 'Output logs to console: ',
                            help_text: 'admin.log.consoleDescription',
                            help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout).',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LogSettings.ConsoleLevel',
                            label: 'admin.log.levelTitle',
                            label_default: 'Console Log Level:',
                            help_text: 'admin.log.levelDescription',
                            help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,
                            isDisabled: needsUtils.stateValueEqual('LogSettings.EnableConsole', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableFile',
                            label: 'admin.log.fileTitle',
                            label_default: 'Output logs to file: ',
                            help_text: 'admin.log.fileDescription',
                            help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LogSettings.FileLevel',
                            label: 'admin.log.fileLevelTitle',
                            label_default: 'File Log Level:',
                            help_text: 'admin.log.fileLevelDescription',
                            help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,
                            isDisabled: needsUtils.stateValueEqual('LogSettings.EnableFile', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LogSettings.FileLocation',
                            label: 'admin.log.locationTitle',
                            label_default: 'File Log Directory:',
                            help_text: 'admin.log.locationDescription',
                            help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it.',
                            placeholder: 'admin.log.locationPlaceholder',
                            placeholder_default: 'Enter your file location',
                            isDisabled: needsUtils.stateValueEqual('LogSettings.EnableFile', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LogSettings.FileFormat',
                            label: 'admin.log.formatTitle',
                            label_default: 'File Log Format:',
                            help_text: DefinitionConstants.LOG_FORMAT_HELP_TEXT,
                            placeholder: 'admin.log.formatPlaceholder',
                            placeholder_default: 'Enter your file format',
                            isDisabled: needsUtils.stateValueEqual('LogSettings.EnableFile', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableWebhookDebugging',
                            label: 'admin.log.enableWebhookDebugging',
                            label_default: 'Enable Webhook Debugging:',
                            help_text: 'admin.log.enableWebhookDebuggingDescription',
                            help_text_default: 'To output the request body of incoming webhooks to the console, enable this setting and set {boldedConsoleLogLevel} to "DEBUG". Disable this setting to remove webhook request body information from console logs when in DEBUG mode.',
                            help_text_values: {
                                boldedConsoleLogLevel: (
                                    <strong>
                                        <FormattedMessage
                                            id='admin.log.consoleLogLevel'
                                            defaultMessage='Console Log Level'
                                        />
                                    </strong>
                                ),
                            },
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableDiagnostics',
                            label: 'admin.log.enableDiagnostics',
                            label_default: 'Enable Diagnostics and Error Reporting:',
                            help_text: 'admin.log.enableDiagnosticsDescription',
                            help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our <a href="https://about.mattermost.com/default-privacy-policy/" target="_blank">privacy policy</a> to learn more.',
                            help_text_html: true,
                        },
                    ],
                },
            },
        },
        authentication: {
            email: {
                schema: {
                    id: 'EmailSettings',
                    name: 'admin.authentication.email',
                    name_default: 'Email Authentication',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignUpWithEmail',
                            label: 'admin.email.allowSignupTitle',
                            label_default: 'Enable account creation with email:',
                            help_text: 'admin.email.allowSignupDescription',
                            help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignInWithEmail',
                            label: 'admin.email.allowEmailSignInTitle',
                            label_default: 'Enable sign-in with email:',
                            help_text: 'admin.email.allowEmailSignInDescription',
                            help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignInWithUsername',
                            label: 'admin.email.allowUsernameSignInTitle',
                            label_default: 'Enable sign-in with username:',
                            help_text: 'admin.email.allowUsernameSignInDescription',
                            help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',
                        },
                    ],
                },
            },
            ldap: {
                schema: {
                    id: 'LdapSettings',
                    name: 'admin.authentication.ldap',
                    name_default: 'AD/LDAP',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.Enable',
                            label: 'admin.ldap.enableTitle',
                            label_default: 'Enable sign-in with AD/LDAP:',
                            help_text: 'admin.ldap.enableDesc',
                            help_text_default: 'When true, Mattermost allows login using AD/LDAP',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.EnableSync',
                            label: 'admin.ldap.enableSyncTitle',
                            label_default: 'Enable Synchronization with AD/LDAP:',
                            help_text: 'admin.ldap.enableSyncDesc',
                            help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LdapServer',
                            label: 'admin.ldap.serverTitle',
                            label_default: 'AD/LDAP Server:',
                            help_text: 'admin.ldap.serverDesc',
                            help_text_default: 'The domain or IP address of AD/LDAP server.',
                            placeholder: 'admin.ldap.serverEx',
                            placeholder_default: 'E.g.: "10.0.0.23"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LdapPort',
                            label: 'admin.ldap.portTitle',
                            label_default: 'AD/LDAP Port:',
                            help_text: 'admin.ldap.portDesc',
                            help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',
                            placeholder: 'admin.ldap.portEx',
                            placeholder_default: 'E.g.: "389"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LdapSettings.ConnectionSecurity',
                            label: 'admin.connectionSecurityTitle',
                            label_default: 'Connection Security:',
                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,
                            options: [
                                {
                                    value: '',
                                    display_name: 'admin.connectionSecurityNone',
                                    display_name_default: 'None',
                                },
                                {
                                    value: 'TLS',
                                    display_name: 'admin.connectionSecurityTls',
                                    display_name_default: 'TLS (Recommended)',
                                },
                                {
                                    value: 'STARTTLS',
                                    display_name: 'admin.connectionSecurityStart',
                                    display_name_default: 'STARTTLS',
                                },
                            ],
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.SkipCertificateVerification',
                            label: 'admin.ldap.skipCertificateVerification',
                            label_default: 'Skip Certificate Verification:',
                            help_text: 'admin.ldap.skipCertificateVerificationDesc',
                            help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',
                            isDisabled: needsUtils.stateValueEqual('LdapSettings.ConnectionSecurity', ''),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BaseDN',
                            label: 'admin.ldap.baseTitle',
                            label_default: 'BaseDN:',
                            help_text: 'admin.ldap.baseDesc',
                            help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',
                            placeholder: 'admin.ldap.baseEx',
                            placeholder_default: 'E.g.: "ou=Unit Name,dc=corp,dc=example,dc=com"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BindUsername',
                            label: 'admin.ldap.bindUserTitle',
                            label_default: 'Bind Username:',
                            help_text: 'admin.ldap.bindUserDesc',
                            help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BindPassword',
                            label: 'admin.ldap.bindPwdTitle',
                            label_default: 'Bind Password:',
                            help_text: 'admin.ldap.bindPwdDesc',
                            help_text_default: 'Password of the user given in "Bind Username".',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.UserFilter',
                            label: 'admin.ldap.userFilterTitle',
                            label_default: 'User Filter:',
                            help_text: 'admin.ldap.userFilterDisc',
                            help_text_default: '(Optional) Enter an AD/LDAP Filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',
                            placeholder: 'admin.ldap.userFilterEx',
                            placeholder_default: 'Ex. "(objectClass=user)"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.FirstNameAttribute',
                            label: 'admin.ldap.firstnameAttrTitle',
                            label_default: 'First Name Attribute:',
                            placeholder: 'admin.ldap.firstnameAttrEx',
                            placeholder_default: 'E.g.: "givenName"',
                            help_text: 'admin.ldap.firstnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server that will be used to populate the first name of users in Mattermost.  When set, users will not be able to edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their own first name in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LastNameAttribute',
                            label: 'admin.ldap.lastnameAttrTitle',
                            label_default: 'Last Name Attribute:',
                            placeholder: 'admin.ldap.lastnameAttrEx',
                            placeholder_default: 'E.g.: "sn"',
                            help_text: 'admin.ldap.lastnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server that will be used to populate the last name of users in Mattermost. When set, users will not be able to edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their own last name in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.NicknameAttribute',
                            label: 'admin.ldap.nicknameAttrTitle',
                            label_default: 'Nickname Attribute:',
                            placeholder: 'admin.ldap.nicknameAttrEx',
                            placeholder_default: 'E.g.: "nickname"',
                            help_text: 'admin.ldap.nicknameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server that will be used to populate the nickname of users in Mattermost. When set, users will not be able to edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their own nickname in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.PositionAttribute',
                            label: 'admin.ldap.positionAttrTitle',
                            label_default: 'Position Attribute:',
                            placeholder: 'admin.ldap.positionAttrEx',
                            placeholder_default: 'E.g.: "title"',
                            help_text: 'admin.ldap.positionAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server that will be used to populate the position field in Mattermost.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.EmailAttribute',
                            label: 'admin.ldap.emailAttrTitle',
                            label_default: 'Email Attribute:',
                            placeholder: 'admin.ldap.emailAttrEx',
                            placeholder_default: 'E.g.: "mail" or "userPrincipalName"',
                            help_text: 'admin.ldap.emailAttrDesc',
                            help_text_default: 'The attribute in the AD/LDAP server that will be used to populate the email addresses of users in Mattermost.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.UsernameAttribute',
                            label: 'admin.ldap.usernameAttrTitle',
                            label_default: 'Username Attribute:',
                            placeholder: 'admin.ldap.usernameAttrEx',
                            placeholder_default: 'E.g.: "sAMAccountName"',
                            help_text: 'admin.ldap.uernameAttrDesc',
                            help_text_default: 'The attribute in the AD/LDAP server that will be used to populate the username field in Mattermost. This may be the same as the ID Attribute.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.IdAttribute',
                            label: 'admin.ldap.idAttrTitle',
                            label_default: 'ID Attribute: ',
                            placeholder: 'admin.ldap.idAttrEx',
                            placeholder_default: 'E.g.: "sAMAccountName"',
                            help_text: 'admin.ldap.idAttrDesc',
                            help_text_default: 'The attribute in the AD/LDAP server that will be used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change, such as username or uid. If a user\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one. This is the value used to log in to Mattermost in the "AD/LDAP Username" field on the sign in page. Normally this attribute is the same as the "Username Attribute" field above. If your team typically uses domain\\username to sign in to other services with AD/LDAP, you may choose to put domain\\username in this field to maintain consistency between sites.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LoginFieldName',
                            label: 'admin.ldap.loginNameTitle',
                            label_default: 'Sign-in Field Default Text:',
                            placeholder: 'admin.ldap.loginNameEx',
                            placeholder_default: 'E.g.: "AD/LDAP Username"',
                            help_text: 'admin.ldap.loginNameDesc',
                            help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to "AD/LDAP Username".',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.SyncIntervalMinutes',
                            label: 'admin.ldap.syncIntervalTitle',
                            label_default: 'Synchronization Interval (minutes):',
                            help_text: 'admin.ldap.syncIntervalHelpText',
                            help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to "Inactive" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.MaxPageSize',
                            label: 'admin.ldap.maxPageSizeTitle',
                            label_default: 'Maximum Page Size:',
                            placeholder: 'admin.ldap.maxPageSizeEx',
                            placeholder_default: 'E.g.: "2000"',
                            help_text: 'admin.ldap.maxPageSizeHelpText',
                            help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.QueryTimeout',
                            label: 'admin.ldap.queryTitle',
                            label_default: 'Query Timeout (seconds):',
                            placeholder: 'admin.ldap.queryEx',
                            placeholder_default: 'E.g.: "60"',
                            help_text: 'admin.ldap.queryDesc',
                            help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            action: ldapTest,
                            key: 'LdapSettings.LdapTest',
                            label: 'admin.ldap.ldap_test_button',
                            label_default: 'AD/LDAP Test',
                            help_text: 'admin.ldap.testHelpText',
                            help_text_default: 'Tests if the Mattermost server can connect to the AD/LDAP server specified. See log file for more detailed error messages.',
                            error_message: 'admin.ldap.testFailure',
                            error_message_default: 'AD/LDAP Test Failure: {error}',
                            success_message: 'admin.ldap.testSuccess',
                            success_message_default: 'AD/LDAP Test Successful',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_JOBSTABLE,
                            job_type: Constants.JobTypes.LDAP_SYNC,
                            label: 'admin.ldap.sync_button',
                            label_default: 'AD/LDAP Synchronize Now',
                            help_text: 'admin.ldap.testHelpText',
                            help_text_default: 'Initiates an AD/LDAP synchronization immediately.',
                            isDisabled: needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            render_job: (job) => {
                                let mattermostUsers = '0';
                                let ldapUsers = '0';
                                let deleteCount = '0';
                                let updateCount = '0';

                                if (job && job.data) {
                                    if (job.data.mattermost_users_count && job.data.mattermost_users_count.length > 0) {
                                        mattermostUsers = job.data.mattermost_users_count;
                                    }

                                    if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {
                                        ldapUsers = job.data.ldap_users_count;
                                    }

                                    if (job.data.delete_count && job.data.delete_count.length > 0) {
                                        deleteCount = job.data.delete_count;
                                    }

                                    if (job.data.update_count && job.data.update_count.length > 0) {
                                        updateCount = job.data.update_count;
                                    }
                                }

                                return (
                                    <FormattedMessage
                                        id='admin.ldap.jobExtraInfo'
                                        defaultMessage='Scanned {ldapUsers} LDAP users, updated {updateCount}, deactivated {deleteCount}'
                                        values={{
                                            mattermostUsers,
                                            ldapUsers,
                                            deleteCount,
                                            updateCount,
                                        }}
                                    />
                                );
                            },
                        },
                    ],
                },
            },
            mfa: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.mfa.title',
                    name_default: 'Multi-factor Authentication',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.mfa.bannerDesc',
                            label_default: '<a href=\'https://docs.mattermost.com/deployment/auth.html\' target=\'_blank\'>Multi-factor authentication</a> is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',
                            label_html: true,
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableMultifactorAuthentication',
                            label: 'admin.service.mfaTitle',
                            label_default: 'Enable Multi-factor Authentication:',
                            help_text: 'admin.service.mfaDesc',
                            help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnforceMultifactorAuthentication',
                            label: 'admin.service.enforceMfaTitle',
                            label_default: 'Enforce Multi-factor Authentication:',
                            help_text: 'admin.service.enforceMfaDesc',
                            help_text_html: true,
                            help_text_default: 'When true, <a href=\'https://docs.mattermost.com/deployment/auth.html\' target=\'_blank\'>multi-factor authentication</a> is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.<br/><br/>If your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',
                            isDisabled: needsUtils.stateValueEqual('ServiceSettings.EnableMultifactorAuthentication', false),
                        },
                    ],
                },
            },
        },
        security: {
            signup: {
                schema: {
                    id: 'SignupSettings',
                    name: 'admin.security.signup',
                    name_default: 'Signup',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.RequireEmailVerification',
                            label: 'admin.email.requireVerificationTitle',
                            label_default: 'Require Email Verification: ',
                            help_text: 'admin.email.requireVerificationDescription',
                            help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',
                            disabled_help_text: 'admin.security.requireEmailVerification.disabled',
                            disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',
                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_GENERATED,
                            key: 'EmailSettings.InviteSalt',
                            label: 'admin.email.inviteSaltTitle',
                            label_default: 'Email Invite Salt:',
                            help_text: 'admin.email.inviteSaltDescription',
                            help_text_default: '32-character salt added to signing of email invites. Randomly generated on install. Click "Regenerate" to create new salt.',
                            disabled_help_text: 'admin.security.inviteSalt.disabled',
                            disabled_help_text_default: 'Invite salt cannot be changed while sending emails is disabled.',
                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'TeamSettings.EnableOpenServer',
                            label: 'admin.team.openServerTitle',
                            label_default: 'Enable Open Server: ',
                            help_text: 'admin.team.openServerDescription',
                            help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',
                        },
                    ],
                },
            },
            public_links: {
                schema: {
                    id: 'PublicLinkSettings',
                    name: 'admin.security.public_links',
                    name_default: 'Public Links',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.EnablePublicLink',
                            label: 'admin.image.shareTitle',
                            label_default: 'Enable Public File Links: ',
                            help_text: 'admin.image.shareDescription',
                            help_text_default: 'Allow users to share public links to files and images.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_GENERATED,
                            key: 'FileSettings.PublicLinkSalt',
                            label: 'admin.image.publicLinkTitle',
                            label_default: 'Public Link Salt:',
                            help_text: 'admin.image.publicLinkDescription',
                            help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click "Regenerate" to create new salt.',
                        },
                    ],
                },
            },
            connections: {
                schema: {
                    id: 'ConnectionSettings',
                    name: 'admin.security.connection',
                    name_default: 'Connections',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.AllowCorsFrom',
                            label: 'min.service.corsTitle',
                            label_default: 'Enable cross-origin requests from:',
                            placeholder: 'admin.service.corsEx',
                            placeholder_default: 'http://example.com',
                            help_text: 'admin.service.corsDescription',
                            help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use "*" if you want to allow CORS from any domain or leave it blank to disable it.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableInsecureOutgoingConnections',
                            label: 'admin.service.insecureTlsTitle',
                            label_default: 'Enable Insecure Outgoing Connections: ',
                            help_text: 'admin.service.insecureTlsDesc',
                            help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',
                        },
                    ],
                },
            },
        },
        notifications: {
        },
        integrations: {
            webrtc: {
                schema: {
                    id: 'WebrtcSettings',
                    name: 'admin.integrations.webrtc',
                    name_default: 'Mattermost WebRTC (Beta)',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'WebrtcSettings.Enable',
                            label: 'admin.webrtc.enableTitle',
                            label_default: 'Enable Mattermost WebRTC: ',
                            help_text: 'admin.webrtc.enableDescription',
                            help_text_default: 'When true, Mattermost allows making <strong>one-on-one</strong> video calls. WebRTC calls are available on Chrome, Firefox and Mattermost Desktop Apps.',
                            help_text_html: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayWebsocketUrl',
                            label: 'admin.webrtc.gatewayWebsocketUrlTitle',
                            label_default: 'Gateway WebSocket URL:',
                            placeholder: 'admin.webrtc.gatewayWebsocketUrlExample',
                            placeholder_default: 'E.g.: "wss://webrtc.mattermost.com:8189"',
                            help_text: 'admin.webrtc.gatewayWebsocketUrlDescription',
                            help_text_default: 'Enter wss://<mattermost-webrtc-gateway-url>:<port>. Make sure you use WS or WSS in your URL depending on your server configuration.\n' +
                                'This is the WebSocket used to signal and establish communication between the peers.',
                            isDisabled: needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayAdminUrl',
                            label: 'admin.webrtc.gatewayAdminUrlTitle',
                            label_default: 'Gateway Admin URL:',
                            placeholder: 'admin.webrtc.gatewayAdminUrlExample',
                            placeholder_default: 'E.g.: "https://webrtc.mattermost.com:7089/admin"',
                            help_text: 'admin.webrtc.gatewayAdminUrlDescription',
                            help_text_default: 'Enter https://<mattermost-webrtc-gateway-url>:<port>/admin. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.\n' +
                                'Mattermost WebRTC uses this URL to obtain valid tokens for each peer to establish the connection.',
                            isDisabled: needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayAdminSecret',
                            label: 'admin.webrtc.gatewayAdminSecretTitle',
                            label_default: 'Gateway Admin Secret:',
                            placeholder: 'admin.webrtc.gatewayAdminSecretExample',
                            placeholder_default: 'E.g.: "PVRzWNN1Tg6szn7IQWvhpAvLByScWxdy"',
                            help_text: 'admin.webrtc.gatewayAdminSecretDescription',
                            help_text_default: 'Enter your admin secret password to access the Gateway Admin URL.',
                            isDisabled: needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.StunURI',
                            label: 'admin.webrtc.stunUriTitle',
                            label_default: 'STUN URI:',
                            placeholder: 'admin.webrtc.stunUriExample',
                            placeholder_default: 'E.g.: "stun:webrtc.mattermost.com:5349"',
                            help_text: 'admin.webrtc.stunUriDescription',
                            help_text_default: 'Enter your STUN URI as stun:<your-stun-url>:<port>. STUN is a standardized network protocol to allow an end host to assist devices to access its public IP address if it is located behind a NAT.',
                            isDisabled: needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnURI',
                            label: 'admin.webrtc.turnUriTitle',
                            label_default: 'TURN URI:',
                            placeholder: 'admin.webrtc.turnUriExample',
                            placeholder_default: 'E.g.: "turn:webrtc.mattermost.com:5349"',
                            help_text: 'admin.webrtc.turnUriDescription',
                            help_text_default: 'Enter your TURN URI as turn:<your-turn-url>:<port>. TURN is a standardized network protocol to allow an end host to assist devices to establish a connection by using a relay public IP address if it is located behind a symmetric NAT.',
                            isDisabled: needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnUsername',
                            label: 'admin.webrtc.turnUsernameTitle',
                            label_default: 'TURN Username:',
                            placeholder: 'admin.webrtc.turnUsernameExample',
                            placeholder_default: 'E.g.: "myusername"',
                            help_text: 'admin.webrtc.turnUsernameDescription',
                            help_text_default: 'Enter your TURN Server Username.',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                                needsUtils.stateValueEqual('WebrtcSettings.TurnURI', ''),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnSharedKey',
                            label: 'admin.webrtc.turnSharedKeyTitle',
                            label_default: 'TURN Shared Key:',
                            placeholder: 'admin.webrtc.turnSharedKeyExample',
                            placeholder_default: 'E.g.: "bXdkOWQxc3d0Ynk3emY5ZmsxZ3NtazRjaWg="',
                            help_text: 'admin.webrtc.turnSharedKeyDescription',
                            help_text_default: 'Enter your TURN Server Shared Key. This is used to created dynamic passwords to establish the connection. Each password is valid for a short period of time.',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueEqual('WebrtcSettings.Enable', false),
                                needsUtils.stateValueEqual('WebrtcSettings.TurnURI', ''),
                            ),
                        },
                    ],
                },
            },
            external: {
                schema: {
                    id: 'ExternalServiceSettings',
                    name: 'admin.integrations.external',
                    name_default: 'External Services',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.GoogleDeveloperKey',
                            label: 'admin.service.googleTitle',
                            label_default: 'Google API Key:',
                            placeholder: 'admin.service.googleExample',
                            placeholder_default: 'E.g.: "7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV"',
                            help_text: 'admin.service.googleDescription',
                            help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a <a href="https://www.youtube.com/watch?v=Im69kzhpR3I" target="_blank">Google Developers Tutorial</a> for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',
                            help_text_html: true,
                        },
                    ],
                },
            },
        },
        plugins: {
            configuration: {
                schema: {
                    id: 'PluginSettings',
                    name: 'admin.plugins.settings.title',
                    name_default: 'Configuration',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PluginSettings.Enable',
                            label: 'admin.plugins.settings.enable',
                            label_default: 'Enable Plugins: ',
                            help_text: 'admin.plugins.settings.enableDesc',
                            help_text_default: 'When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality or customize the user interface of your Mattermost server. See <a href="https://about.mattermost.com/default-plugins" target="_blank">documentation</a> to learn more.',
                            help_text_html: true,
                        },
                    ],
                },
            },
        },
        files: {
        },
        customization: {
            link_previews: {
                schema: {
                    id: 'LinkPreviewsSettings',
                    name: 'admin.customization.linkPreviews',
                    name_default: 'Link Previews',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableLinkPreviews',
                            label: 'admin.customization.enableLinkPreviewsTitle',
                            label_default: 'Enable Link Previews:',
                            help_text: 'admin.customization.enableLinkPreviewsDesc',
                            help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews.',
                        },
                    ],
                },
            },
            legal_and_support: {
                schema: {
                    id: 'LegalAndSupportSettings',
                    name: 'admin.customization.support',
                    name_default: 'Legal and Support',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.TermsOfServiceLink',
                            label: 'admin.support.termsTitle',
                            label_default: 'Terms of Service link:',
                            help_text: 'admin.support.termsDesc',
                            help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the "Mattermost Conditions of Use (End Users)" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.PrivacyPolicyLink',
                            label: 'admin.support.privacyTitle',
                            label_default: 'Privacy Policy link:',
                            help_text: 'admin.support.privacyDesc',
                            help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.AboutLink',
                            label: 'admin.support.aboutTitle',
                            label_default: 'About link:',
                            help_text: 'admin.support.aboutDesc',
                            help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.HelpLink',
                            label: 'admin.support.helpTitle',
                            label_default: 'Help link:',
                            help_text: 'admin.support.helpDesc',
                            help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.ReportAProblemLink',
                            label: 'admin.support.problemTitle',
                            label_default: 'Report a Problem link:',
                            help_text: 'admin.support.problemDesc',
                            help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.SupportEmail',
                            label: 'admin.support.emailTitle',
                            label_default: 'Support Email:',
                            help_text: 'admin.support.emailHelp',
                            help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',
                        },
                    ],
                },
            },
            native_app_links: {
                schema: {
                    id: 'LegalAndSupportSettings',
                    name: 'admin.customization.nativeAppLinks',
                    name_default: 'Mattermost App Links',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.AppDownloadLink',
                            label: 'admin.customization.appDownloadLinkTitle',
                            label_default: 'Mattermost Apps Download Page Link:',
                            help_text: 'admin.customization.appDownloadLinkDesc',
                            help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to "Download Mattermost Apps" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.AndroidAppDownloadLink',
                            label: 'admin.customization.androidAppDownloadLinkTitle',
                            label_default: 'Android App Download Link:',
                            help_text: 'admin.customization.androidAppDownloadLinkDesc',
                            help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.IosAppDownloadLink',
                            label: 'admin.customization.iosAppDownloadLinkTitle',
                            label_default: 'iOS App Download Link:',
                            help_text: 'admin.customization.iosAppDownloadLinkDesc',
                            help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',
                        },
                    ],
                },
            },
        },
        compliance: {
        },
        advanced: {
            developer: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.developer.title',
                    name_default: 'Developer Settings',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableTesting',
                            label: 'admin.service.testingTitle',
                            label_default: 'Enable Testing Commands:',
                            help_text: 'admin.service.testingDescription',
                            help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableDeveloper',
                            label: 'admin.service.developerTitle',
                            label_default: 'Enable Developer Mode: ',
                            help_text: 'admin.service.developerDesc',
                            help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.AllowedUntrustedInternalConnections',
                            label: 'admin.service.internalConnectionsTitle',
                            label_default: 'Allow untrusted internal connections to: ',
                            placeholder: 'admin.service.internalConnectionsEx',
                            placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',
                            help_text: 'admin.service.internalConnectionsDesc',
                            help_text_default: 'In testing environments, such as when developing integrations locally on a development machine, use this setting to specify domains, IP addresses, or CIDR notations to allow internal connections. <b>Not recommended for use in production</b>, since this can allow a user to extract confidential data from your server or internal network.<br /><br />By default, user-supplied URLs such as those used for Open Graph metadata, webhooks, or slash commands will not be allowed to connect to reserved IP addresses including loopback or link-local addresses used for internal networks. Push notification, OAuth 2.0 and WebRTC server URLs are trusted and not affected by this setting.',
                            help_text_html: true,
                        },
                    ],
                },
            },
            metrics: {
                schema: {
                    id: 'MetricsSettings',
                    name: 'admin.advance.metrics',
                    name_default: 'Performance Monitoring',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'MetricsSettings.Enable',
                            label: 'admin.metrics.enableTitle',
                            label_default: 'Enable Performance Monitoring:',
                            help_text: 'admin.metrics.enableDescription',
                            help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see <a href="http://docs.mattermost.com/deployment/metrics.html" target="_blank">documentation</a> to learn more about configuring performance monitoring for Mattermost.',
                            help_text_html: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'MetricsSettings.ListenAddress',
                            label: 'admin.metrics.listenAddressTitle',
                            label_default: 'Listen Address:',
                            placeholder: 'admin.metrics.listenAddressEx',
                            placeholder_default: 'E.g.: ":8067"',
                            help_text: 'admin.metrics.listenAddressDesc',
                            help_text_default: 'The address the server will listen on to expose performance metrics.',
                        },
                    ],
                },
            },
        },
    },
    other: {
        license: {
            schema: {
                id: 'LicenseSettings',
                component: LicenseSettings,
            },
        },
        audits: {
            schema: {
                id: 'Audits',
                component: Audits,
            },
        },
    },
};
