// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

import React from 'react';
import {FormattedMessage} from 'react-intl';

import {Constants} from 'utils/constants';
import {getSiteURL} from 'utils/url';
import {
    ldapTest, invalidateAllCaches, reloadConfig, testS3Connection,
    removeIdpSamlCertificate, uploadIdpSamlCertificate,
    removePrivateSamlCertificate, uploadPrivateSamlCertificate,
    removePublicSamlCertificate, uploadPublicSamlCertificate,
} from 'actions/admin_actions';
import SystemAnalytics from 'components/analytics/system_analytics';
import TeamAnalytics from 'components/analytics/team_analytics';
import {trackEvent} from 'actions/diagnostics_actions.jsx';

import Audits from './audits';
import CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';
import LicenseSettings from './license_settings';
import PermissionSchemesSettings from './permission_schemes_settings';
import PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';
import PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';
import SystemUsers from './system_users';
import ServerLogs from './server_logs';
import BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';

import * as DefinitionConstants from './admin_definition_constants';

const FILE_STORAGE_DRIVER_LOCAL = 'local';
const FILE_STORAGE_DRIVER_S3 = 'amazons3';
const MEBIBYTE = Math.pow(1024, 2);

// admin_definitions data structure define the autogenerated admin_console
// section. It defines the structure of the menu based on sections, subsections
// and pages. Each page contains an schema which defines a component to use for
// render the entire section or the name of the section (name and
// name_default), the section in the config file (id), and a list of options to
// configure (settings).
//
// All text fiels contains a transation key, and the <field>_default string are the
// default text when the translation is still not avaiable (the english version
// of the text).
//
// We can define different types of settings configuration widgets:
//
// Widget:
//   - type: which define the widget type.
//   - label (and label_default): which define the main text of the setting.
//   - isDisabled: a function which receive current config, the state of the page and the license.
//   - isHidden: a function which receive current config, the state of the page and the license.
//
// Custom Widget (extends from Widget):
//   - component: The component used to render the widget
//
// JobsTable Widget (extends from Widget):
//   - job_type: The kind of job from Constants.JobTypes
//   - render_job: Function to convert a job object into a react component.
//
// Banner Widget (extends from Widget):
//   - banner_type: The type of banner (options: info or warning)
//
// Setting Widget (extends from Widget):
//   - key: The key to store the configuration in the config file.
//   - help_text (and help_text_default): Long description of the field.
//   - help_text_markdown: True if the translation text contains markdown.
//   - help_text_values: Values to fill the translation (if needed).
//
// Bool Widget (extends from Setting Widget)
//
// Number Widget (extends from Setting Widget)
//
// Color Widget (extends from Setting Widget)
//
// Text Widget (extends from Setting Widget)
//   - placeholder (and placeholder_default): Placeholder text to show in the input.
//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.
//   - default_value: function that generate the default value of the field based on the config, the state and the license.
//   - max_length: The maximun length allowed
//
// Button Widget (extends from Setting Widget)
//   - action: A redux action to execute on click.
//   - error_message (and error_message_default): Error to show if action doesn't work.
//   - success_message (and success_message_default): Success message to show if action doesn't work.
//
// Language Widget (extends from Setting Widget)
//   - multiple: If you can select multiple languages.
//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).
//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).
//
// Dropdown Widget (extends from Setting Widget)
//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).
//
// Permissions Flag (extends from Setting Widget)
//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.
//
// FileUpload (extends from Setting Widget)
//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.
//   - remove_help_text_markdown: True if the translation text contains markdown.
//   - remove_help_text_values: Values to fill the translation (if needed).
//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.
//   - removing_text (and removing_text_default): Text shown while the system is removing the file.
//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.
//   - upload_action: An store action to upload the file.
//   - remove_action: An store action to remove the file.
//   - fileType: A list of extensions separated by ",". E.g. ".jpg,.png,.gif".

export const needsUtils = {
    not: (func) => (config, state, license) => !func(config, state, license),
    and: (...funcs) => (config, state, license) => {
        for (const func of funcs) {
            if (!func(config, state, license)) {
                return false;
            }
        }
        return true;
    },
    or: (...funcs) => (config, state, license) => {
        for (const func of funcs) {
            if (func(config, state, license)) {
                return true;
            }
        }
        return false;
    },
    stateValueMatch: (key, regex) => (config, state) => state[key].match(regex),
    stateValueEqual: (key, value) => (config, state) => state[key] === value,
    stateValueTrue: (key) => (config, state) => Boolean(state[key]),
    stateValueFalse: (key) => (config, state) => !state[key],
    hasLicense: (config, state, license) => license.IsLicensed === 'true',
    hasLicenseFeature: (feature) => (config, state, license) => license.IsLicensed && license[feature] === 'true',
};

export default {
    reporting: {
        system_analytics: {
            schema: {
                id: 'SystemAnalytics',
                component: SystemAnalytics,
            },
        },
        team_analytics: {
            schema: {
                id: 'TeamAnalytics',
                component: TeamAnalytics,
            },
        },
        system_users: {
            schema: {
                id: 'SystemUsers',
                component: SystemUsers,
            },
        },
        server_logs: {
            schema: {
                id: 'ServerLogs',
                component: ServerLogs,
            },
        },
    },
    settings: {
        general: {
            configuration: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.general.configuration',
                    name_default: 'Configuration',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.rate.noteDescription',
                            label_default: 'Changing properties in this section will require a server restart before taking effect.',
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.SiteURL',
                            label: 'admin.service.siteURL',
                            label_default: 'Site URL:',
                            help_text: 'admin.service.siteURLDescription',
                            help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\n \nMattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',
                            help_text_markdown: true,
                            placeholder: 'admin.service.siteURLExample',
                            placeholder_default: 'E.g.: "http://example.com:8065"',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.ListenAddress',
                            label: 'admin.service.listenAddress',
                            label_default: 'Listen Address:',
                            placeholder: 'admin.service.listenExample',
                            placeholder_default: 'E.g.: ":8065"',
                            help_text: 'admin.service.listenDescription',
                            help_text_default: 'The address and port to which to bind and listen. Specifying ":8065" will bind to all network interfaces. Specifying "127.0.0.1:8065" will only bind to the network interface having that IP address. If you choose a port of a lower level (called "system ports" or "well-known ports", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: "sudo setcap cap_net_bind_service=+ep ./bin/mattermost" to allow Mattermost to bind to well-known ports.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.Forward80To443',
                            label: 'admin.service.forward80To443',
                            label_default: 'Forward port 80 to 443:',
                            help_text: 'admin.service.forward80To443Description',
                            help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',
                            disabled_help_text: 'admin.service.forward80To443Description.disabled',
                            disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\n \nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',
                            disabled_help_text_markdown: true,
                            isDisabled: needsUtils.not(needsUtils.stateValueMatch('ServiceSettings.ListenAddress', /:443$/)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'ServiceSettings.ConnectionSecurity',
                            label: 'admin.connectionSecurityTitle',
                            label_default: 'Connection Security:',
                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,
                            options: [
                                {
                                    value: '',
                                    display_name: 'admin.connectionSecurityNone',
                                    display_name_default: 'None',
                                },
                                {
                                    value: 'TLS',
                                    display_name: 'admin.connectionSecurityTls',
                                    display_name_default: 'TLS (Recommended)',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.TLSCertFile',
                            label: 'admin.service.tlsCertFile',
                            label_default: 'TLS Certificate File:',
                            help_text: 'admin.service.tlsCertFileDescription',
                            help_text_default: 'The certificate file to use.',
                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.TLSKeyFile',
                            label: 'admin.service.tlsKeyFile',
                            label_default: 'TLS Key File:',
                            help_text: 'admin.service.tlsKeyFileDescription',
                            help_text_default: 'The private key file to use.',
                            isDisabled: needsUtils.stateValueTrue('ServiceSettings.UseLetsEncrypt'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.UseLetsEncrypt',
                            label: 'admin.service.useLetsEncrypt',
                            label_default: 'Use Let\'s Encrypt:',
                            help_text: 'admin.service.useLetsEncryptDescription',
                            help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',
                            disabled_help_text: 'admin.service.useLetsEncryptDescription.disabled',
                            disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\n \nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',
                            disabled_help_text_markdown: true,
                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.Forward80To443'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.LetsEncryptCertificateCacheFile',
                            label: 'admin.service.letsEncryptCertificateCacheFile',
                            label_default: 'Let\'s Encrypt Certificate Cache File:',
                            help_text: 'admin.service.letsEncryptCertificateCacheFileDescription',
                            help_text_default: 'Certificates retrieved and other data about the Let\'s Encrypt service will be stored in this file.',
                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.UseLetsEncrypt'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'ServiceSettings.ReadTimeout',
                            label: 'admin.service.readTimeout',
                            label_default: 'Read Timeout:',
                            help_text: 'admin.service.readTimeoutDescription',
                            help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'ServiceSettings.WriteTimeout',
                            label: 'admin.service.writeTimeout',
                            label_default: 'Write Timeout:',
                            help_text: 'admin.service.writeTimeoutDescription',
                            help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'ServiceSettings.WebserverMode',
                            label: 'admin.webserverModeTitle',
                            label_default: 'Webserver Mode:',
                            help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,
                            options: [
                                {
                                    value: 'gzip',
                                    display_name: 'admin.webserverModeGzip',
                                    display_name_default: 'gzip',
                                },
                                {
                                    value: 'uncompressed',
                                    display_name: 'admin.webserverModeUncompressed',
                                    display_name_default: 'Uncompressed',
                                },
                                {
                                    value: 'disabled',
                                    display_name: 'admin.webserverModeDisabled',
                                    display_name_default: 'Disabled',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            action: reloadConfig,
                            key: 'ReloadConfigButton',
                            label: 'admin.reload.button',
                            label_default: 'Reload Configuration From Disk',
                            help_text: 'admin.reload.reloadDescription',
                            help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating "config.json" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',
                            help_text_values: {
                                featureName: (
                                    <b>
                                        <FormattedMessage
                                            id='admin.reload.reloadDescription.featureName'
                                            defaultMessage='Reload Configuration from Disk'
                                        />
                                    </b>
                                ),
                                recycleDatabaseConnections: (
                                    <a href='../advanced/database'>
                                        <b>
                                            <FormattedMessage
                                                id='admin.reload.reloadDescription.recycleDatabaseConnections'
                                                defaultMessage='Database > Recycle Database Connections'
                                            />
                                        </b>
                                    </a>
                                ),
                            },
                            error_message: 'admin.reload.reloadFail',
                            error_message_default: 'Reload unsuccessful: {error}',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            key: 'PurgeButton',
                            action: invalidateAllCaches,
                            label: 'admin.purge.button',
                            label_default: 'Purge All Caches',
                            help_text: 'admin.purge.purgeDescription',
                            help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',
                            error_message: 'admin.purge.purgeFail',
                            error_message_default: 'Purging unsuccessful: {error}',
                        },
                    ],
                },
            },
            localization: {
                schema: {
                    id: 'LocalizationSettings',
                    name: 'admin.general.localization',
                    name_default: 'Localization',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.DefaultServerLocale',
                            label: 'admin.general.localization.serverLocaleTitle',
                            label_default: 'Default Server Language:',
                            help_text: 'admin.general.localization.serverLocaleDescription',
                            help_text_default: 'Default language for system messages and logs. Changing this will require a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.DefaultClientLocale',
                            label: 'admin.general.localization.clientLocaleTitle',
                            label_default: 'Default Client Language:',
                            help_text: 'admin.general.localization.clientLocaleDescription',
                            help_text_default: 'Default language for newly created users and pages where the user hasn\'t logged in.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_LANGUAGE,
                            key: 'LocalizationSettings.AvailableLocales',
                            label: 'admin.general.localization.availableLocalesTitle',
                            label_default: 'Available Languages:',
                            help_text: 'admin.general.localization.availableLocalesDescription',
                            help_text_markdown: true,
                            help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\n \nWould like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.',
                            multiple: true,
                            no_result: 'admin.general.localization.availableLocalesNoResults',
                            no_result_default: 'No results found',
                            not_present: 'admin.general.localization.availableLocalesNotPresent',
                            not_present_default: 'The default client language must be included in the available list',
                        },
                    ],
                },
            },
            privacy: {
                schema: {
                    id: 'PrivacySettings',
                    name: 'admin.general.privacy',
                    name_default: 'Privacy',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PrivacySettings.ShowEmailAddress',
                            label: 'admin.privacy.showEmailTitle',
                            label_default: 'Show Email Address:',
                            help_text: 'admin.privacy.showEmailDescription',
                            help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PrivacySettings.ShowFullName',
                            label: 'admin.privacy.showFullNameTitle',
                            label_default: 'Show Full Name:',
                            help_text: 'admin.privacy.showFullNameDescription',
                            help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',
                        },
                    ],
                },
            },
            compliance: {
                schema: {
                    id: 'ComplianceSettings',
                    name: 'admin.compliance.title',
                    name_default: 'Compliance Settings',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.compliance.newComplianceExportBanner',
                            label_markdown: true,
                            label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/message_export) feature, and will be removed in a future release. We recommend migrating to the new system.',
                            label_values: {siteURL: getSiteURL()},
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ComplianceSettings.Enable',
                            label: 'admin.compliance.enableTitle',
                            label_default: 'Enable Compliance Reporting:',
                            help_text: 'admin.compliance.enableDesc',
                            help_text_default: 'When true, Mattermost allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',
                            help_text_markdown: true,
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ComplianceSettings.Directory',
                            label: 'admin.compliance.directoryTitle',
                            label_default: 'Compliance Report Directory:',
                            help_text: 'admin.compliance.directoryDescription',
                            help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',
                            placeholder: 'admin.sql.maxOpenExample',
                            placeholder_default: 'E.g.: "10"',
                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ComplianceSettings.EnableDaily',
                            label: 'admin.compliance.enableDailyTitle',
                            label_default: 'Enable Daily Report:',
                            help_text: 'admin.compliance.enableDailyDesc',
                            help_text_default: 'When true, Mattermost will generate a daily compliance report.',
                            isDisabled: needsUtils.stateValueFalse('ComplianceSettings.Enable'),
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                    ],
                },
            },
            logging: {
                schema: {
                    id: 'LogSettings',
                    name: 'admin.general.log',
                    name_default: 'Logging',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableConsole',
                            label: 'admin.log.consoleTitle',
                            label_default: 'Output logs to console: ',
                            help_text: 'admin.log.consoleDescription',
                            help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LogSettings.ConsoleLevel',
                            label: 'admin.log.levelTitle',
                            label_default: 'Console Log Level:',
                            help_text: 'admin.log.levelDescription',
                            help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,
                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.ConsoleJson',
                            label: 'admin.log.consoleJsonTitle',
                            label_default: 'Output console logs as JSON:',
                            help_text: 'admin.log.jsonDescription',
                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',
                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableConsole'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableFile',
                            label: 'admin.log.fileTitle',
                            label_default: 'Output logs to file: ',
                            help_text: 'admin.log.fileDescription',
                            help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LogSettings.FileLevel',
                            label: 'admin.log.fileLevelTitle',
                            label_default: 'File Log Level:',
                            help_text: 'admin.log.fileLevelDescription',
                            help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',
                            options: DefinitionConstants.LOG_LEVEL_OPTIONS,
                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.FileJson',
                            label: 'admin.log.fileJsonTitle',
                            label_default: 'Output file logs as JSON:',
                            help_text: 'admin.log.jsonDescription',
                            help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',
                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LogSettings.FileLocation',
                            label: 'admin.log.locationTitle',
                            label_default: 'File Log Directory:',
                            help_text: 'admin.log.locationDescription',
                            help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',
                            placeholder: 'admin.log.locationPlaceholder',
                            placeholder_default: 'Enter your file location',
                            isDisabled: needsUtils.stateValueFalse('LogSettings.EnableFile'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableWebhookDebugging',
                            label: 'admin.log.enableWebhookDebugging',
                            label_default: 'Enable Webhook Debugging:',
                            help_text: 'admin.log.enableWebhookDebuggingDescription',
                            help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to "DEBUG".',
                            help_text_values: {
                                boldedLogLevel: (
                                    <strong>
                                        <FormattedMessage
                                            id='admin.log.logLevel'
                                            defaultMessage='Log Level'
                                        />
                                    </strong>
                                ),
                            },
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LogSettings.EnableDiagnostics',
                            label: 'admin.log.enableDiagnostics',
                            label_default: 'Enable Diagnostics and Error Reporting:',
                            help_text: 'admin.log.enableDiagnosticsDescription',
                            help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our [privacy policy](!https://about.mattermost.com/default-privacy-policy/) to learn more.',
                            help_text_markdown: true,
                            onConfigSave: (displayVal, previousVal) => {
                                if (previousVal && previousVal !== displayVal) {
                                    trackEvent('ui', 'diagnostics_disabled');
                                }
                                return displayVal;
                            },
                        },
                    ],
                },
            },
        },
        permissions: {
            schemes: {
                schema: {
                    id: 'PermissionSchemes',
                    component: PermissionSchemesSettings,
                },
            },
            systemScheme: {
                schema: {
                    id: 'PermissionSystemScheme',
                    component: PermissionSystemSchemeSettings,
                },
            },
            teamScheme: {
                schema: {
                    id: 'PermissionSystemScheme',
                    component: PermissionTeamSchemeSettings,
                },
            },
        },
        authentication: {
            oauth: {
                schema: {
                    id: 'OAuthSettings',
                    name: 'admin.authentication.email',
                    name_default: 'Email Authentication',
                    onConfigLoad: (config) => {
                        const newState = {};
                        if (config.GitLabSettings && config.GitLabSettings.Enable) {
                            newState.oauthType = Constants.GITLAB_SERVICE;
                        }
                        if (config.Office365Settings && config.Office365Settings.Enable) {
                            newState.oauthType = Constants.OFFICE365_SERVICE;
                        }
                        if (config.GoogleSettings && config.GoogleSettings.Enable) {
                            newState.oauthType = Constants.GOOGLE_SERVICE;
                        }

                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');

                        return newState;
                    },
                    onConfigSave: (config, prevConfig) => {
                        const newConfig = {...config};
                        newConfig.GitLabSettings = config.GitLabSettings || {};
                        newConfig.Office365Settings = config.Office365Settings || {};
                        newConfig.GoogleSettings = config.GoogleSettings || {};

                        newConfig.GitLabSettings.Enable = false;
                        newConfig.Office365Settings.Enable = false;
                        newConfig.GoogleSettings.Enable = false;
                        newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url + '/api/v4/user';

                        if (config.oauthType === Constants.GITLAB_SERVICE) {
                            newConfig.GitLabSettings.Enable = true;
                            newConfig.Office365Settings = prevConfig.Office365Settings;
                            newConfig.GoogleSettings = prevConfig.GoogleSettings;
                        }
                        if (config.oauthType === Constants.OFFICE365_SERVICE) {
                            newConfig.Office365Settings.Enable = true;
                            newConfig.GitLabSettings = prevConfig.GitLabSettings;
                            newConfig.GoogleSettings = prevConfig.GoogleSettings;
                        }
                        if (config.oauthType === Constants.GOOGLE_SERVICE) {
                            newConfig.GoogleSettings.Enable = true;
                            newConfig.Office365Settings = prevConfig.Office365Settings;
                            newConfig.GitLabSettings = prevConfig.GitLabSettings;
                        }
                        delete newConfig.oauthType;
                        return newConfig;
                    },
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'oauthType',
                            label: 'admin.oauth.select',
                            label_default: 'Select OAuth 2.0 Service Provider:',
                            options: [
                                {
                                    value: 'off',
                                    display_name: 'admin.oauth.off',
                                    display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.',
                                },
                                {
                                    value: Constants.GITLAB_SERVICE,
                                    display_name: 'admin.oauth.gitlab',
                                    display_name_default: 'GitLab',
                                    help_text: 'admin.gitlab.EnableMarkdownDesc',
                                    help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\n2. Enter Redirect URIs "<your-mattermost-url>/login/gitlab/complete" (example: http://localhost:8065/login/gitlab/complete) and "<your-mattermost-url>/signup/gitlab/complete".\n3. Then use "Application Secret Key" and "Application ID" fields from GitLab to complete the options below.\n4. Complete the Endpoint URLs below.',
                                    help_text_markdown: true,
                                },
                                {
                                    value: Constants.GOOGLE_SERVICE,
                                    display_name: 'admin.oauth.google',
                                    display_name_default: 'Google Apps',
                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('GoogleOAuth')),
                                    help_text: 'admin.google.EnableMarkdownDesc',
                                    help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter "Mattermost - your-company-name" as the **Project Name**, then click **Create**.\n3. Click the **OAuth consent screen** header and enter "Mattermost" as the **Product name shown to users**, then click **Save**.\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\n7. Finally, go to [Google+ API](!https://console.developers.google.com/apis/api/plus/overview") and click *Enable*. This might take a few minutes to propagate through Google`s systems.',
                                    help_text_markdown: true,
                                },
                                {
                                    value: Constants.OFFICE365_SERVICE,
                                    display_name: 'admin.oauth.office365',
                                    display_name_default: 'Office 365 (Beta)',
                                    isHidden: needsUtils.not(needsUtils.hasLicenseFeature('Office365OAuth')),
                                    help_text: 'admin.office365.EnableMarkdownDesc',
                                    help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use "Mattermost - your-company-name" as the **Application Name**.\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\n5. Finally, click **Save** and then paste the **Application ID** below.',
                                    help_text_markdown: true,
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.Id',
                            label: 'admin.gitlab.clientIdTitle',
                            label_default: 'Application ID:',
                            help_text: 'admin.gitlab.clientIdDescription',
                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab',
                            placeholder: 'admin.gitlab.clientIdExample',
                            placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.Secret',
                            label: 'admin.gitlab.clientSecretTitle',
                            label_default: 'Application Secret Key:',
                            help_text: 'admin.gitlab.clientSecretDescription',
                            help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',
                            placeholder: 'admin.gitlab.clientSecretExample',
                            placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.Url',
                            label: 'admin.gitlab.siteUrl',
                            label_default: 'GitLab Site URL:',
                            help_text: 'admin.gitlab.siteUrlDescription',
                            help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',
                            placeholder: 'admin.gitlab.siteUrlExample',
                            placeholder_default: 'E.g.: https://',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.UserApiEndpoint',
                            label: 'admin.gitlab.userTitle',
                            label_default: 'User API Endpoint:',
                            dynamic_value: (value, config, state) => {
                                if (state['GitLabSettings.Url']) {
                                    return state['GitLabSettings.Url'] + '/api/v4/user';
                                }
                                return '';
                            },
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.AuthEndpoint',
                            label: 'admin.gitlab.authTitle',
                            label_default: 'Auth Endpoint:',
                            dynamic_value: (value, config, state) => {
                                if (state['GitLabSettings.Url']) {
                                    return state['GitLabSettings.Url'] + '/oauth/authorize';
                                }
                                return '';
                            },
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GitLabSettings.TokenEndpoint',
                            label: 'admin.gitlab.tokenTitle',
                            label_default: 'Token Endpoint:',
                            dynamic_value: (value, config, state) => {
                                if (state['GitLabSettings.Url']) {
                                    return state['GitLabSettings.Url'] + '/oauth/token';
                                }
                                return '';
                            },
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'gitlab')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GoogleSettings.Id',
                            label: 'admin.google.clientIdTitle',
                            label_default: 'Client ID:',
                            help_text: 'admin.google.clientIdDescription',
                            help_text_default: 'The Client ID you received when registering your application with Google.',
                            placeholder: 'admin.google.clientIdExample',
                            placeholder_default: 'E.g.: "7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GoogleSettings.Secret',
                            label: 'admin.google.clientSecretTitle',
                            label_default: 'Client Secret:',
                            help_text: 'admin.google.clientSecretDescription',
                            help_text_default: 'The Client Secret you received when registering your application with Google.',
                            placeholder: 'admin.google.clientSecretExample',
                            placeholder_default: 'E.g.: "H8sz0Az-dDs2p15-7QzD231"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GoogleSettings.UserApiEndpoint',
                            label: 'admin.google.userTitle',
                            label_default: 'User API Endpoint:',
                            dynamic_value: () => 'https://www.googleapis.com/plus/v1/people/me',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GoogleSettings.AuthEndpoint',
                            label: 'admin.google.authTitle',
                            label_default: 'Auth Endpoint:',
                            dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'GoogleSettings.TokenEndpoint',
                            label: 'admin.google.tokenTitle',
                            label_default: 'Token Endpoint:',
                            dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'google')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'Office365Settings.Id',
                            label: 'admin.office365.clientIdTitle',
                            label_default: 'Application ID:',
                            help_text: 'admin.office365.clientIdDescription',
                            help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',
                            placeholder: 'admin.office365.clientIdExample',
                            placeholder_default: 'E.g.: "adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'Office365Settings.Secret',
                            label: 'admin.office365.clientSecretTitle',
                            label_default: 'Application Secret Password:',
                            help_text: 'admin.office365.clientSecretDescription',
                            help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',
                            placeholder: 'admin.office365.clientSecretExample',
                            placeholder_default: 'E.g.: "shAieM47sNBfgl20f8ci294"',
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'Office365Settings.UserApiEndpoint',
                            label: 'admin.office365.userTitle',
                            label_default: 'User API Endpoint:',
                            dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'Office365Settings.AuthEndpoint',
                            label: 'admin.office365.authTitle',
                            label_default: 'Auth Endpoint:',
                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'Office365Settings.TokenEndpoint',
                            label: 'admin.office365.tokenTitle',
                            label_default: 'Token Endpoint:',
                            dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/token',
                            isDisabled: () => true,
                            isHidden: needsUtils.not(needsUtils.stateValueEqual('oauthType', 'office365')),
                        },
                    ],
                },
            },
            email: {
                schema: {
                    id: 'EmailSettings',
                    name: 'admin.authentication.email',
                    name_default: 'Email Authentication',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignUpWithEmail',
                            label: 'admin.email.allowSignupTitle',
                            label_default: 'Enable account creation with email:',
                            help_text: 'admin.email.allowSignupDescription',
                            help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignInWithEmail',
                            label: 'admin.email.allowEmailSignInTitle',
                            label_default: 'Enable sign-in with email:',
                            help_text: 'admin.email.allowEmailSignInDescription',
                            help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.EnableSignInWithUsername',
                            label: 'admin.email.allowUsernameSignInTitle',
                            label_default: 'Enable sign-in with username:',
                            help_text: 'admin.email.allowUsernameSignInDescription',
                            help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',
                        },
                    ],
                },
            },
            ldap: {
                schema: {
                    id: 'LdapSettings',
                    name: 'admin.authentication.ldap',
                    name_default: 'AD/LDAP',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.Enable',
                            label: 'admin.ldap.enableTitle',
                            label_default: 'Enable sign-in with AD/LDAP:',
                            help_text: 'admin.ldap.enableDesc',
                            help_text_default: 'When true, Mattermost allows login using AD/LDAP',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.EnableSync',
                            label: 'admin.ldap.enableSyncTitle',
                            label_default: 'Enable Synchronization with AD/LDAP:',
                            help_text: 'admin.ldap.enableSyncDesc',
                            help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LdapServer',
                            label: 'admin.ldap.serverTitle',
                            label_default: 'AD/LDAP Server:',
                            help_text: 'admin.ldap.serverDesc',
                            help_text_default: 'The domain or IP address of AD/LDAP server.',
                            placeholder: 'admin.ldap.serverEx',
                            placeholder_default: 'E.g.: "10.0.0.23"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.LdapPort',
                            label: 'admin.ldap.portTitle',
                            label_default: 'AD/LDAP Port:',
                            help_text: 'admin.ldap.portDesc',
                            help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',
                            placeholder: 'admin.ldap.portEx',
                            placeholder_default: 'E.g.: "389"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'LdapSettings.ConnectionSecurity',
                            label: 'admin.connectionSecurityTitle',
                            label_default: 'Connection Security:',
                            help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,
                            options: [
                                {
                                    value: '',
                                    display_name: 'admin.connectionSecurityNone',
                                    display_name_default: 'None',
                                },
                                {
                                    value: 'TLS',
                                    display_name: 'admin.connectionSecurityTls',
                                    display_name_default: 'TLS (Recommended)',
                                },
                                {
                                    value: 'STARTTLS',
                                    display_name: 'admin.connectionSecurityStart',
                                    display_name_default: 'STARTTLS',
                                },
                            ],
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'LdapSettings.SkipCertificateVerification',
                            label: 'admin.ldap.skipCertificateVerification',
                            label_default: 'Skip Certificate Verification:',
                            help_text: 'admin.ldap.skipCertificateVerificationDesc',
                            help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Not recommended for production environments where TLS is required. For testing only.',
                            isDisabled: needsUtils.stateValueFalse('LdapSettings.ConnectionSecurity'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BaseDN',
                            label: 'admin.ldap.baseTitle',
                            label_default: 'BaseDN:',
                            help_text: 'admin.ldap.baseDesc',
                            help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for users in the AD/LDAP tree.',
                            placeholder: 'admin.ldap.baseEx',
                            placeholder_default: 'E.g.: "ou=Unit Name,dc=corp,dc=example,dc=com"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BindUsername',
                            label: 'admin.ldap.bindUserTitle',
                            label_default: 'Bind Username:',
                            help_text: 'admin.ldap.bindUserDesc',
                            help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.BindPassword',
                            label: 'admin.ldap.bindPwdTitle',
                            label_default: 'Bind Password:',
                            help_text: 'admin.ldap.bindPwdDesc',
                            help_text_default: 'Password of the user given in "Bind Username".',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.UserFilter',
                            label: 'admin.ldap.userFilterTitle',
                            label_default: 'User Filter:',
                            help_text: 'admin.ldap.userFilterDisc',
                            help_text_default: '(Optional) Enter an AD/LDAP Filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',
                            placeholder: 'admin.ldap.userFilterEx',
                            placeholder_default: 'Ex. "(objectClass=user)"',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.FirstNameAttribute',
                            label: 'admin.ldap.firstnameAttrTitle',
                            label_default: 'First Name Attribute:',
                            placeholder: 'admin.ldap.firstnameAttrEx',
                            placeholder_default: 'E.g.: "givenName"',
                            help_text: 'admin.ldap.firstnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LastNameAttribute',
                            label: 'admin.ldap.lastnameAttrTitle',
                            label_default: 'Last Name Attribute:',
                            placeholder: 'admin.ldap.lastnameAttrEx',
                            placeholder_default: 'E.g.: "sn"',
                            help_text: 'admin.ldap.lastnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.NicknameAttribute',
                            label: 'admin.ldap.nicknameAttrTitle',
                            label_default: 'Nickname Attribute:',
                            placeholder: 'admin.ldap.nicknameAttrEx',
                            placeholder_default: 'E.g.: "nickname"',
                            help_text: 'admin.ldap.nicknameAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.PositionAttribute',
                            label: 'admin.ldap.positionAttrTitle',
                            label_default: 'Position Attribute:',
                            placeholder: 'admin.ldap.positionAttrEx',
                            placeholder_default: 'E.g.: "title"',
                            help_text: 'admin.ldap.positionAttrDesc',
                            help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.EmailAttribute',
                            label: 'admin.ldap.emailAttrTitle',
                            label_default: 'Email Attribute:',
                            placeholder: 'admin.ldap.emailAttrEx',
                            placeholder_default: 'E.g.: "mail" or "userPrincipalName"',
                            help_text: 'admin.ldap.emailAttrDesc',
                            help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.UsernameAttribute',
                            label: 'admin.ldap.usernameAttrTitle',
                            label_default: 'Username Attribute:',
                            placeholder: 'admin.ldap.usernameAttrEx',
                            placeholder_default: 'E.g.: "sAMAccountName"',
                            help_text: 'admin.ldap.usernameAttrDesc',
                            help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.IdAttribute',
                            label: 'admin.ldap.idAttrTitle',
                            label_default: 'ID Attribute: ',
                            placeholder: 'admin.ldap.idAttrEx',
                            placeholder_default: 'E.g.: "objectGUID"',
                            help_text: 'admin.ldap.idAttrDesc',
                            help_text_markdown: true,
                            help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change. If a user\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.\n \nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueEqual('LdapSettings.Enable', false),
                                needsUtils.stateValueEqual('LdapSettings.EnableSync', false),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LoginIdAttribute',
                            label: 'admin.ldap.loginAttrTitle',
                            label_default: 'Login ID Attribute: ',
                            placeholder: 'admin.ldap.loginIdAttrEx',
                            placeholder_default: 'E.g.: "sAMAccountName"',
                            help_text: 'admin.ldap.loginAttrDesc',
                            help_text_markdown: true,
                            help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the "Username Attribute" field above.\n \nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'LdapSettings.LoginFieldName',
                            label: 'admin.ldap.loginNameTitle',
                            label_default: 'Sign-in Field Default Text:',
                            placeholder: 'admin.ldap.loginNameEx',
                            placeholder_default: 'E.g.: "AD/LDAP Username"',
                            help_text: 'admin.ldap.loginNameDesc',
                            help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to "AD/LDAP Username".',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.SyncIntervalMinutes',
                            label: 'admin.ldap.syncIntervalTitle',
                            label_default: 'Synchronization Interval (minutes):',
                            help_text: 'admin.ldap.syncIntervalHelpText',
                            help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to "Inactive" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.MaxPageSize',
                            label: 'admin.ldap.maxPageSizeTitle',
                            label_default: 'Maximum Page Size:',
                            placeholder: 'admin.ldap.maxPageSizeEx',
                            placeholder_default: 'E.g.: "2000"',
                            help_text: 'admin.ldap.maxPageSizeHelpText',
                            help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'LdapSettings.QueryTimeout',
                            label: 'admin.ldap.queryTitle',
                            label_default: 'Query Timeout (seconds):',
                            placeholder: 'admin.ldap.queryEx',
                            placeholder_default: 'E.g.: "60"',
                            help_text: 'admin.ldap.queryDesc',
                            help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            action: ldapTest,
                            key: 'LdapSettings.LdapTest',
                            label: 'admin.ldap.ldap_test_button',
                            label_default: 'AD/LDAP Test',
                            help_text: 'admin.ldap.testHelpText',
                            help_text_markdown: true,
                            help_text_default: 'Tests if the Mattemost server can connect to the AD/LDAP server specified. Please review "System Console > Logs" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',
                            error_message: 'admin.ldap.testFailure',
                            error_message_default: 'AD/LDAP Test Failure: {error}',
                            success_message: 'admin.ldap.testSuccess',
                            success_message_default: 'AD/LDAP Test Successful',
                            isDisabled: needsUtils.and(
                                needsUtils.stateValueFalse('LdapSettings.Enable'),
                                needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_JOBSTABLE,
                            job_type: Constants.JobTypes.LDAP_SYNC,
                            label: 'admin.ldap.sync_button',
                            label_default: 'AD/LDAP Synchronize Now',
                            help_text: 'admin.ldap.syncNowHelpText',
                            help_text_markdown: true,
                            help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review "System Console > Logs" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',
                            isDisabled: needsUtils.stateValueFalse('LdapSettings.EnableSync'),
                            render_job: (job) => {
                                let mattermostUsers = '0';
                                let ldapUsers = '0';
                                let deleteCount = '0';
                                let updateCount = '0';

                                if (job && job.data) {
                                    if (job.data.mattermost_users_count && job.data.mattermost_users_count.length > 0) {
                                        mattermostUsers = job.data.mattermost_users_count;
                                    }

                                    if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {
                                        ldapUsers = job.data.ldap_users_count;
                                    }

                                    if (job.data.delete_count && job.data.delete_count.length > 0) {
                                        deleteCount = job.data.delete_count;
                                    }

                                    if (job.data.update_count && job.data.update_count.length > 0) {
                                        updateCount = job.data.update_count;
                                    }
                                }

                                return (
                                    <FormattedMessage
                                        id='admin.ldap.jobExtraInfo'
                                        defaultMessage='Scanned {ldapUsers} LDAP users, updated {updateCount}, deactivated {deleteCount}'
                                        values={{
                                            mattermostUsers,
                                            ldapUsers,
                                            deleteCount,
                                            updateCount,
                                        }}
                                    />
                                );
                            },
                        },
                    ],
                },
            },
            saml: {
                schema: {
                    id: 'SamlSettings',
                    name: 'admin.authentication.saml',
                    name_default: 'SAML 2.0',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'SamlSettings.Enable',
                            label: 'admin.saml.enableTitle',
                            label_default: 'Enable Login With SAML 2.0:',
                            help_text: 'admin.saml.enableDescription',
                            help_text_default: 'When true, Mattermost allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for Mattermost.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'SamlSettings.EnableSyncWithLdap',
                            label: 'admin.saml.enableSyncWithLdapTitle',
                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',
                            help_text: 'admin.saml.enableSyncWithLdapDescription',
                            help_text_default: 'When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',
                            help_text_markdown: true,
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',
                            label: 'admin.saml.enableSyncWithLdapIncludeAuthTitle',
                            label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',
                            help_text: 'admin.saml.enableSyncWithLdapIncludeAuthDescription',
                            help_text_default: 'When true, Mattermost will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\n \n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',
                            help_text_markdown: true,
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('SamlSettings.Enable'),
                                needsUtils.stateValueFalse('SamlSettings.EnableSyncWithLdap'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.IdpUrl',
                            label: 'admin.saml.idpUrlTitle',
                            label_default: 'SAML SSO URL:',
                            help_text: 'admin.saml.idpUrlDesc',
                            help_text_default: 'The URL where Mattermost sends a SAML request to start login sequence.',
                            placeholder: 'admin.saml.idpUrlEx',
                            placeholder_default: 'E.g.: "https://idp.example.org/SAML2/SSO/Login"',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.IdpDescriptorUrl',
                            label: 'admin.saml.idpDescriptorUrlTitle',
                            label_default: 'Identity Provider Issuer URL:',
                            help_text: 'admin.saml.idpDescriptorUrlDesc',
                            help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',
                            placeholder: 'admin.saml.idpDescriptorUrlEx',
                            placeholder_default: 'E.g.: "https://idp.example.org/SAML2/issuer"',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,
                            key: 'SamlSettings.IdpCertificateFile',
                            label: 'admin.saml.idpCertificateFileTitle',
                            label_default: 'Identity Provider Public Certificate:',
                            help_text: 'admin.saml.idpCertificateFileDesc',
                            help_text_default: 'The public authentication certificate issued by your Identity Provider.',
                            remove_help_text: 'admin.saml.idpCertificateFileRemoveDesc',
                            remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',
                            remove_button_text: 'admin.saml.remove.idp_certificate',
                            remove_button_text_default: 'Remove Identity Provider Certificate',
                            removing_text: 'admin.saml.removing.certificate',
                            removing_text_default: 'Removing Certificate...',
                            uploading_text: 'admin.saml.uploading.certificate',
                            uploading_text_default: 'Uploading Certificate...',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                            fileType: '.crt,.cer,.cert,.pem',
                            upload_action: uploadIdpSamlCertificate,
                            remove_action: removeIdpSamlCertificate,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'SamlSettings.Verify',
                            label: 'admin.saml.verifyTitle',
                            label_default: 'Verify Signature:',
                            help_text: 'admin.saml.verifyDescription',
                            help_text_default: 'When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Not recommended for production environments. For testing only.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.AssertionConsumerServiceURL',
                            label: 'admin.saml.assertionConsumerServiceURLTitle',
                            label_default: 'Service Provider Login URL:',
                            help_text: 'admin.saml.assertionConsumerServiceURLPopulatedDesc',
                            help_text_default: 'This field is also known as the Assertion Consumer Service URL.',
                            placeholder: 'admin.saml.assertionConsumerServiceURLEx',
                            placeholder_default: 'E.g.: "https://<your-mattermost-url>/login/sso/saml"',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('SamlSettings.Enable'),
                                needsUtils.stateValueFalse('SamlSettings.Verify'),
                            ),
                            onConfigLoad: (value, config) => {
                                const siteUrl = config.ServiceSettings.SiteURL;
                                if (siteUrl.length > 0 && value.length === 0) {
                                    const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';
                                    return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;
                                }
                                return value;
                            },
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'SamlSettings.Encrypt',
                            label: 'admin.saml.encryptTitle',
                            label_default: 'Enable Encryption:',
                            help_text: 'admin.saml.encryptDescription',
                            help_text_default: 'When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Not recommended for production environments. For testing only.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,
                            key: 'SamlSettings.PrivateKeyFile',
                            label: 'admin.saml.privateKeyFileTitle',
                            label_default: 'Service Provider Private Key:',
                            help_text: 'admin.saml.privateKeyFileFileDesc',
                            help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',
                            remove_help_text: 'admin.saml.privateKeyFileFileRemoveDesc',
                            remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',
                            remove_button_text: 'admin.saml.remove.privKey',
                            remove_button_text_default: 'Remove Service Provider Private Key',
                            removing_text: 'admin.saml.removing.privKey',
                            removing_text_default: 'Removing Private Key...',
                            uploading_text: 'admin.saml.uploading.privateKey',
                            uploading_text_default: 'Uploading Private Key...',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('SamlSettings.Enable'),
                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),
                            ),
                            fileType: '.key',
                            upload_action: uploadPrivateSamlCertificate,
                            remove_action: removePrivateSamlCertificate,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,
                            key: 'SamlSettings.PublicCertificateFile',
                            label: 'admin.saml.publicCertificateFileTitle',
                            label_default: 'Service Provider Public Certificate:',
                            help_text: 'admin.saml.publicCertificateFileDesc',
                            help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',
                            remove_help_text: 'admin.saml.publicCertificateFileRemoveDesc',
                            remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',
                            remove_button_text: 'admin.saml.remove.sp_certificate',
                            remove_button_text_default: 'Remove Service Provider Certificate',
                            removing_text: 'admin.saml.removing.certificate',
                            removing_text_default: 'Removing Certificate...',
                            uploading_text: 'admin.saml.uploading.certificate',
                            uploading_text_default: 'Uploading Certificate...',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('SamlSettings.Enable'),
                                needsUtils.stateValueFalse('SamlSettings.Encrypt'),
                            ),
                            fileType: '.crt,.cer',
                            upload_action: uploadPublicSamlCertificate,
                            remove_action: removePublicSamlCertificate,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.EmailAttribute',
                            label: 'admin.saml.emailAttrTitle',
                            label_default: 'Email Attribute:',
                            placeholder: 'admin.saml.emailAttrEx',
                            placeholder_default: 'E.g.: "Email" or "PrimaryEmail"',
                            help_text: 'admin.saml.emailAttrDesc',
                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.UsernameAttribute',
                            label: 'admin.saml.usernameAttrTitle',
                            label_default: 'Username Attribute:',
                            placeholder: 'admin.saml.usernameAttrEx',
                            placeholder_default: 'E.g.: "Username"',
                            help_text: 'admin.saml.usernameAttrDesc',
                            help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.IdAttribute',
                            label: 'admin.saml.idAttrTitle',
                            label_default: 'Id Attribute:',
                            placeholder: 'admin.saml.idAttrEx',
                            placeholder_default: 'E.g.: "Id"',
                            help_text: 'admin.saml.idAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.FirstNameAttribute',
                            label: 'admin.saml.firstnameAttrTitle',
                            label_default: 'First Name Attribute:',
                            placeholder: 'admin.saml.firstnameAttrEx',
                            placeholder_default: 'E.g.: "FirstName"',
                            help_text: 'admin.saml.firstnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.LastNameAttribute',
                            label: 'admin.saml.lastnameAttrTitle',
                            label_default: 'Last Name Attribute:',
                            placeholder: 'admin.saml.lastnameAttrEx',
                            placeholder_default: 'E.g.: "LastName"',
                            help_text: 'admin.saml.lastnameAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.NicknameAttribute',
                            label: 'admin.saml.nicknameAttrTitle',
                            label_default: 'Nickname Attribute:',
                            placeholder: 'admin.saml.nicknameAttrEx',
                            placeholder_default: 'E.g.: "Nickname"',
                            help_text: 'admin.saml.nicknameAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.PositionAttribute',
                            label: 'admin.saml.positionAttrTitle',
                            label_default: 'Position Attribute:',
                            placeholder: 'admin.saml.positionAttrEx',
                            placeholder_default: 'E.g.: "Role"',
                            help_text: 'admin.saml.positionAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.LocaleAttribute',
                            label: 'admin.saml.localeAttrTitle',
                            label_default: 'Preferred Language Attribute:',
                            placeholder: 'admin.saml.localeAttrEx',
                            placeholder_default: 'E.g.: "Locale" or "PrimaryLanguage"',
                            help_text: 'admin.saml.localeAttrDesc',
                            help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SamlSettings.LoginButtonText',
                            label: 'admin.saml.loginButtonTextTitle',
                            label_default: 'Login Button Text:',
                            placeholder: 'admin.saml.loginButtonTextEx',
                            placeholder_default: 'E.g.: "With OKTA"',
                            help_text: 'admin.saml.loginButtonTextDesc',
                            help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to "With SAML".',
                            isDisabled: needsUtils.stateValueFalse('SamlSettings.Enable'),
                        },
                    ],
                },
            },
            mfa: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.mfa.title',
                    name_default: 'Multi-factor Authentication',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.mfa.bannerDesc',
                            label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',
                            label_markdown: true,
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableMultifactorAuthentication',
                            label: 'admin.service.mfaTitle',
                            label_default: 'Enable Multi-factor Authentication:',
                            help_text: 'admin.service.mfaDesc',
                            help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnforceMultifactorAuthentication',
                            label: 'admin.service.enforceMfaTitle',
                            label_default: 'Enforce Multi-factor Authentication:',
                            help_text: 'admin.service.enforceMfaDesc',
                            help_text_markdown: true,
                            help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\n \nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',
                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.EnableMultifactorAuthentication'),
                        },
                    ],
                },
            },
        },
        security: {
            signup: {
                schema: {
                    id: 'SignupSettings',
                    name: 'admin.security.signup',
                    name_default: 'Signup',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'EmailSettings.RequireEmailVerification',
                            label: 'admin.email.requireVerificationTitle',
                            label_default: 'Require Email Verification: ',
                            help_text: 'admin.email.requireVerificationDescription',
                            help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',
                            disabled_help_text: 'admin.security.requireEmailVerification.disabled',
                            disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',
                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_GENERATED,
                            key: 'EmailSettings.InviteSalt',
                            label: 'admin.email.inviteSaltTitle',
                            label_default: 'Email Invite Salt:',
                            help_text: 'admin.email.inviteSaltDescription',
                            help_text_default: '32-character salt added to signing of email invites. Randomly generated on install. Click "Regenerate" to create new salt.',
                            disabled_help_text: 'admin.security.inviteSalt.disabled',
                            disabled_help_text_default: 'Invite salt cannot be changed while sending emails is disabled.',
                            isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'TeamSettings.EnableOpenServer',
                            label: 'admin.team.openServerTitle',
                            label_default: 'Enable Open Server: ',
                            help_text: 'admin.team.openServerDescription',
                            help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableEmailInvitations',
                            label: 'admin.team.emailInvitationsTitle',
                            label_default: 'Enable Email Invitations: ',
                            help_text: 'admin.team.emailInvitationsDescription',
                            help_text_default: 'When true users can invite others to the system using email.',
                        },
                    ],
                },
            },
            public_links: {
                schema: {
                    id: 'PublicLinkSettings',
                    name: 'admin.security.public_links',
                    name_default: 'Public Links',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.EnablePublicLink',
                            label: 'admin.image.shareTitle',
                            label_default: 'Enable Public File Links: ',
                            help_text: 'admin.image.shareDescription',
                            help_text_default: 'Allow users to share public links to files and images.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_GENERATED,
                            key: 'FileSettings.PublicLinkSalt',
                            label: 'admin.image.publicLinkTitle',
                            label_default: 'Public Link Salt:',
                            help_text: 'admin.image.publicLinkDescription',
                            help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click "Regenerate" to create new salt.',
                        },
                    ],
                },
            },
            connections: {
                schema: {
                    id: 'ConnectionSettings',
                    name: 'admin.security.connection',
                    name_default: 'Connections',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.AllowCorsFrom',
                            label: 'admin.service.corsTitle',
                            label_default: 'Enable cross-origin requests from:',
                            placeholder: 'admin.service.corsEx',
                            placeholder_default: 'http://example.com',
                            help_text: 'admin.service.corsDescription',
                            help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use "*" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to "*" in production.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.CorsExposedHeaders',
                            label: 'admin.service.corsExposedHeadersTitle',
                            label_default: 'CORS Exposed Headers:',
                            placeholder: 'admin.service.corsHeadersEx',
                            placeholder_default: 'X-My-Header',
                            help_text: 'admin.service.corsExposedHeadersDescription',
                            help_text_default: 'Whitelist of headers that will be accessible to the requester.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.CorsAllowCredentials',
                            label: 'admin.service.corsAllowCredentialsLabel',
                            label_default: 'CORS Allow Credentials:',
                            help_text: 'admin.service.corsAllowCredentialsDescription',
                            help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.CorsDebug',
                            label: 'admin.service.CorsDebugLabel',
                            label_default: 'CORS Debug:',
                            help_text: 'admin.service.corsDebugDescription',
                            help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair "source":"cors".',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableInsecureOutgoingConnections',
                            label: 'admin.service.insecureTlsTitle',
                            label_default: 'Enable Insecure Outgoing Connections: ',
                            help_text: 'admin.service.insecureTlsDesc',
                            help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',
                        },
                    ],
                },
            },
        },
        notifications: {
        },
        integrations: {
            custom_integrations: {
                schema: {
                    id: 'CustomIntegrationSettings',
                    name: 'admin.integrations.custom',
                    name_default: 'Custom Integrations',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableIncomingWebhooks',
                            label: 'admin.service.webhooksTitle',
                            label_default: 'Enable Incoming Webhooks: ',
                            help_text: 'admin.service.webhooksDescription',
                            help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableOutgoingWebhooks',
                            label: 'admin.service.outWebhooksTitle',
                            label_default: 'Enable Outgoing Webhooks: ',
                            help_text: 'admin.service.outWebhooksDesc',
                            help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableCommands',
                            label: 'admin.service.cmdsTitle',
                            label_default: 'Enable Custom Slash Commands: ',
                            help_text: 'admin.service.cmdsDesc',
                            help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableOAuthServiceProvider',
                            label: 'admin.oauth.providerTitle',
                            label_default: 'Enable OAuth 2.0 Service Provider: ',
                            help_text: 'admin.oauth.providerDescription',
                            help_text_default: 'When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_PERMISSION,
                            key: 'ServiceSettings.EnableOnlyAdminIntegrations',
                            label: 'admin.service.integrationAdmin',
                            label_default: 'Restrict managing integrations to Admins:',
                            help_text: 'admin.service.integrationAdminDesc',
                            help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',
                            permissions_mapping_name: 'enableOnlyAdminIntegrations',
                            isHidden: needsUtils.hasLicense,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnablePostUsernameOverride',
                            label: 'admin.service.overrideTitle',
                            label_default: 'Enable integrations to override usernames:',
                            help_text: 'admin.service.overrideDescription',
                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnablePostIconOverride',
                            label: 'admin.service.iconTitle',
                            label_default: 'Enable integrations to override profile picture icons:',
                            help_text: 'admin.service.iconDescription',
                            help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableUserAccessTokens',
                            label: 'admin.service.userAccessTokensTitle',
                            label_default: 'Enable User Access Tokens: ',
                            help_text: 'admin.service.userAccessTokensDescription',
                            help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\n\n To manage who can create personal access tokens or to search users by token ID, go to the **System Console > Users** page.',
                            help_text_markdown: true,
                        },
                    ],
                },
            },
            webrtc: {
                schema: {
                    id: 'WebrtcSettings',
                    name: 'admin.integrations.webrtc',
                    name_default: 'Mattermost WebRTC (Beta)',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'WebrtcSettings.Enable',
                            label: 'admin.webrtc.enableTitle',
                            label_default: 'Enable Mattermost WebRTC: ',
                            help_text: 'admin.webrtc.enableDescription',
                            help_text_default: 'When true, Mattermost allows making **one-on-one** video calls. WebRTC calls are available on Chrome, Firefox and Mattermost Desktop Apps.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayWebsocketUrl',
                            label: 'admin.webrtc.gatewayWebsocketUrlTitle',
                            label_default: 'Gateway WebSocket URL:',
                            placeholder: 'admin.webrtc.gatewayWebsocketUrlExample',
                            placeholder_default: 'E.g.: "wss://webrtc.mattermost.com:8189"',
                            help_text: 'admin.webrtc.gatewayWebsocketUrlDescription',
                            help_text_default: 'Enter wss://<mattermost-webrtc-gateway-url>:<port>. Make sure you use WS or WSS in your URL depending on your server configuration.\n' +
                                'This is the WebSocket used to signal and establish communication between the peers.',
                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayAdminUrl',
                            label: 'admin.webrtc.gatewayAdminUrlTitle',
                            label_default: 'Gateway Admin URL:',
                            placeholder: 'admin.webrtc.gatewayAdminUrlExample',
                            placeholder_default: 'E.g.: "https://webrtc.mattermost.com:7089/admin"',
                            help_text: 'admin.webrtc.gatewayAdminUrlDescription',
                            help_text_default: 'Enter https://<mattermost-webrtc-gateway-url>:<port>/admin. Make sure you use HTTP or HTTPS in your URL depending on your server configuration.\n' +
                                'Mattermost WebRTC uses this URL to obtain valid tokens for each peer to establish the connection.',
                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.GatewayAdminSecret',
                            label: 'admin.webrtc.gatewayAdminSecretTitle',
                            label_default: 'Gateway Admin Secret:',
                            placeholder: 'admin.webrtc.gatewayAdminSecretExample',
                            placeholder_default: 'E.g.: "PVRzWNN1Tg6szn7IQWvhpAvLByScWxdy"',
                            help_text: 'admin.webrtc.gatewayAdminSecretDescription',
                            help_text_default: 'Enter your admin secret password to access the Gateway Admin URL.',
                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.StunURI',
                            label: 'admin.webrtc.stunUriTitle',
                            label_default: 'STUN URI:',
                            placeholder: 'admin.webrtc.stunUriExample',
                            placeholder_default: 'E.g.: "stun:webrtc.mattermost.com:5349"',
                            help_text: 'admin.webrtc.stunUriDescription',
                            help_text_default: 'Enter your STUN URI as stun:<your-stun-url>:<port>. STUN is a standardized network protocol to allow an end host to assist devices to access its public IP address if it is located behind a NAT.',
                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnURI',
                            label: 'admin.webrtc.turnUriTitle',
                            label_default: 'TURN URI:',
                            placeholder: 'admin.webrtc.turnUriExample',
                            placeholder_default: 'E.g.: "turn:webrtc.mattermost.com:5349"',
                            help_text: 'admin.webrtc.turnUriDescription',
                            help_text_default: 'Enter your TURN URI as turn:<your-turn-url>:<port>. TURN is a standardized network protocol to allow an end host to assist devices to establish a connection by using a relay public IP address if it is located behind a symmetric NAT.',
                            isDisabled: needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnUsername',
                            label: 'admin.webrtc.turnUsernameTitle',
                            label_default: 'TURN Username:',
                            placeholder: 'admin.webrtc.turnUsernameExample',
                            placeholder_default: 'E.g.: "myusername"',
                            help_text: 'admin.webrtc.turnUsernameDescription',
                            help_text_default: 'Enter your TURN Server Username.',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),
                            ),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'WebrtcSettings.TurnSharedKey',
                            label: 'admin.webrtc.turnSharedKeyTitle',
                            label_default: 'TURN Shared Key:',
                            placeholder: 'admin.webrtc.turnSharedKeyExample',
                            placeholder_default: 'E.g.: "bXdkOWQxc3d0Ynk3emY5ZmsxZ3NtazRjaWg="',
                            help_text: 'admin.webrtc.turnSharedKeyDescription',
                            help_text_default: 'Enter your TURN Server Shared Key. This is used to created dynamic passwords to establish the connection. Each password is valid for a short period of time.',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueFalse('WebrtcSettings.Enable'),
                                needsUtils.stateValueFalse('WebrtcSettings.TurnURI'),
                            ),
                        },
                    ],
                },
            },
            external: {
                schema: {
                    id: 'ExternalServiceSettings',
                    name: 'admin.integrations.external',
                    name_default: 'External Services',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.GoogleDeveloperKey',
                            label: 'admin.service.googleTitle',
                            label_default: 'Google API Key:',
                            placeholder: 'admin.service.googleExample',
                            placeholder_default: 'E.g.: "7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV"',
                            help_text: 'admin.service.googleDescription',
                            help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',
                            help_text_markdown: true,
                        },
                    ],
                },
            },
        },
        plugins: {
            configuration: {
                schema: {
                    id: 'PluginSettings',
                    name: 'admin.plugins.settings.title',
                    name_default: 'Configuration',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'PluginSettings.Enable',
                            label: 'admin.plugins.settings.enable',
                            label_default: 'Enable Plugins: ',
                            help_text: 'admin.plugins.settings.enableDesc',
                            help_text_default: 'When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality or customize the user interface of your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugins) to learn more.',
                            help_text_markdown: true,
                        },
                    ],
                },
            },
        },
        files: {
            storage: {
                schema: {
                    id: 'FileSettings',
                    name: 'admin.files.storage',
                    name_default: 'Storage',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'FileSettings.DriverName',
                            label: 'admin.image.storeTitle',
                            label_default: 'File Storage System:',
                            help_text: 'admin.image.storeDescription',
                            help_text_default: 'Storage system where files and image attachments are saved.\n \nSelecting "Amazon S3" enables fields to enter your Amazon credentials and bucket details.\n \nSelecting "Local File System" enables the field to specify a local file directory.',
                            help_text_markdown: true,
                            options: [
                                {
                                    value: FILE_STORAGE_DRIVER_LOCAL,
                                    display_name: 'admin.image.storeLocal',
                                    display_name_default: 'Local File System',
                                },
                                {
                                    value: FILE_STORAGE_DRIVER_S3,
                                    display_name: 'admin.image.storeAmazonS3',
                                    display_name_default: 'Amazon S3',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'FileSettings.Directory',
                            label: 'admin.image.localTitle',
                            label_default: 'Local Storage Directory:',
                            help_text: 'admin.image.localDescription',
                            help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',
                            placeholder: 'admin.image.localExample',
                            placeholder_default: 'E.g.: "./data/"',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'FileSettings.AmazonS3Bucket',
                            label: 'admin.image.amazonS3BucketTitle',
                            label_default: 'Amazon S3 Bucket:',
                            help_text: 'admin.image.amazonS3BucketDescription',
                            help_text_default: 'Name you selected for your S3 bucket in AWS.',
                            placeholder: 'admin.image.amazonS3BucketExample',
                            placeholder_default: 'E.g.: "mattermost-media"',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'FileSettings.AmazonS3Region',
                            label: 'admin.image.amazonS3RegionTitle',
                            label_default: 'Amazon S3 Region:',
                            help_text: 'admin.image.amazonS3RegionDescription',
                            help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to "us-east-1" if none found.',
                            placeholder: 'admin.image.amazonS3RegionExample',
                            placeholder_default: 'E.g.: "us-east-1"',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'FileSettings.AmazonS3AccessKeyId',
                            label: 'admin.image.amazonS3IdTitle',
                            label_default: 'Amazon S3 Access Key ID:',
                            help_text: 'admin.image.amazonS3IdDescription',
                            help_text_markdown: true,
                            help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',
                            placeholder: 'admin.image.amazonS3IdExample',
                            placeholder_default: 'E.g.: "AKIADTOVBGERKLCBV"',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'FileSettings.AmazonS3SecretAccessKey',
                            label: 'admin.image.amazonS3SecretTitle',
                            label_default: 'Amazon S3 Secret Access Key:',
                            help_text: 'admin.image.amazonS3SecretDescription',
                            help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',
                            placeholder: 'admin.image.amazonS3SecretExample',
                            placeholder_default: 'E.g.: "jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY"',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.AmazonS3SSL',
                            label: 'admin.image.amazonS3SSLTitle',
                            label_default: 'Enable Secure Amazon S3 Connections:',
                            help_text: 'admin.image.amazonS3SSLDescription',
                            help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.AmazonS3SSE',
                            label: 'admin.image.amazonS3SSETitle',
                            label_default: 'Enable Server-Side Encryption for Amazon S3:',
                            help_text: 'admin.image.amazonS3SSEDescription',
                            help_text_markdown: true,
                            help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.AmazonS3Trace',
                            label: 'admin.image.amazonS3TraceTitle',
                            label_default: 'Enable Amazon S3 Debugging:',
                            help_text: 'admin.image.amazonS3TraceDescription',
                            help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',
                            isDisabled: needsUtils.not(needsUtils.stateValueEqual('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BUTTON,
                            action: testS3Connection,
                            key: 'TestS3Connection',
                            label: 'admin.s3.connectionS3Test',
                            label_default: 'Test Connection',
                            loading: 'admin.s3.testing',
                            loading_default: 'Testing...',
                            error_message: 'admin.s3.s3Fail',
                            error_message_default: 'Connection unsuccessful: {error}',
                            success_message: 'admin.s3.s3Success',
                            success_message_default: 'Connection was successful',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.EnableFileAttachments',
                            label: 'admin.file.enableFileAttachments',
                            label_default: 'Allow File Sharing:',
                            help_text: 'admin.file.enableFileAttachmentsDesc',
                            help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.EnableMobileUpload',
                            label: 'admin.file.enableMobileUploadTitle',
                            label_default: 'Allow File Uploads on Mobile:',
                            help_text: 'admin.file.enableMobileUploadDesc',
                            help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'FileSettings.EnableMobileDownload',
                            label: 'admin.file.enableMobileDownloadTitle',
                            label_default: 'Allow File Downloads on Mobile:',
                            help_text: 'admin.file.enableMobileDownloadDesc',
                            help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',
                            isHidden: needsUtils.not(needsUtils.hasLicense),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'FileSettings.MaxFileSize',
                            label: 'admin.image.maxFileSizeTitle',
                            label_default: 'Maximum File Size:',
                            help_text: 'admin.image.maxFileSizeDescription',
                            help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',
                            placeholder: 'admin.image.maxFileSizeExample',
                            placeholder_default: '50',
                            onConfigLoad: (configVal) => configVal / MEBIBYTE,
                            onConfigSave: (displayVal) => displayVal * MEBIBYTE,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_DROPDOWN,
                            key: 'ServiceSettings.ImageProxyType',
                            label: 'admin.image.proxyType',
                            label_default: 'Image Proxy Type:',
                            help_text: 'admin.image.proxyTypeDescription',
                            help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',
                            help_text_markdown: true,
                            options: [
                                {
                                    value: '',
                                    display_name: 'admin.image.proxyTypeNone',
                                    display_name_default: 'None',
                                },
                                {
                                    value: 'atmos/camo',
                                    display_name: 'atmos/camo',
                                    display_name_default: 'atmos/camo',
                                },
                            ],
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.ImageProxyURL',
                            label: 'admin.image.proxyURL',
                            label_default: 'Image Proxy URL:',
                            help_text: 'admin.image.proxyURLDescription',
                            help_text_default: 'URL of your image proxy server.',
                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.ImageProxyOptions',
                            label: 'admin.image.proxyOptions',
                            label_default: 'Image Proxy Options:',
                            help_text: 'admin.image.proxyOptionsDescription',
                            help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',
                            isDisabled: needsUtils.stateValueFalse('ServiceSettings.ImageProxyType'),
                        },
                    ],
                },
            },
        },
        customization: {
            customBrand: {
                schema: {
                    id: 'CustomBrandSettings',
                    name: 'admin.customization.customBrand',
                    name_default: 'Custom Branding',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'TeamSettings.SiteName',
                            label: 'admin.team.siteNameTitle',
                            label_default: 'Site Name:',
                            help_text: 'admin.team.siteNameDescription',
                            help_text_default: 'Name of service shown in login screens and UI.',
                            placeholder: 'admin.team.siteNameExample',
                            placeholder_default: 'E.g.: "Mattermost"',
                            max_length: Constants.MAX_SITENAME_LENGTH,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'TeamSettings.CustomDescriptionText',
                            label: 'admin.team.brandDescriptionTitle',
                            label_default: 'Site Description: ',
                            help_text: 'admin.team.brandDescriptionHelp',
                            help_text_default: 'Description of service shown in login screens and UI. When not specified, "All team communication in one place, searchable and accessible anywhere" is displayed.',
                            placeholder: 'web.root.signup_info',
                            placeholder_default: 'All team communication in one place, searchable and accessible anywhere',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'TeamSettings.EnableCustomBrand',
                            label: 'admin.team.brandTitle',
                            label_default: 'Enable Custom Branding: ',
                            help_text: 'admin.team.brandDesc',
                            help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_CUSTOM,
                            component: BrandImageSetting,
                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),
                            key: 'CustomBrandImage',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_LONG_TEXT,
                            key: 'TeamSettings.CustomBrandText',
                            label: 'admin.team.brandTextTitle',
                            label_default: 'Custom Brand Text:',
                            help_text: 'admin.team.brandTextDescription',
                            help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',
                            isDisabled: needsUtils.stateValueFalse('TeamSettings.EnableCustomBrand'),
                            max_length: Constants.MAX_CUSTOM_BRAND_TEXT_LENGTH,
                        },
                    ],
                },
            },
            announcement: {
                schema: {
                    id: 'AnnouncementSettings',
                    name: 'admin.customization.announcement',
                    name_default: 'Announcement Banner',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'AnnouncementSettings.EnableBanner',
                            label: 'admin.customization.announcement.enableBannerTitle',
                            label_default: 'Enable Announcement Banner:',
                            help_text: 'admin.customization.announcement.enableBannerDesc',
                            help_text_default: 'Enable an announcement banner across all teams.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'AnnouncementSettings.BannerText',
                            label: 'admin.customization.announcement.bannerTextTitle',
                            label_default: 'Banner Text:',
                            help_text: 'admin.customization.announcement.bannerTextDesc',
                            help_text_default: 'Text that will appear in the announcement banner.',
                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_COLOR,
                            key: 'AnnouncementSettings.BannerColor',
                            label: 'admin.customization.announcement.bannerColorTitle',
                            label_default: 'Banner Color:',
                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_COLOR,
                            key: 'AnnouncementSettings.BannerTextColor',
                            label: 'admin.customization.announcement.bannerTextColorTitle',
                            label_default: 'Banner Text Color:',
                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'AnnouncementSettings.AllowBannerDismissal',
                            label: 'admin.customization.announcement.allowBannerDismissalTitle',
                            label_default: 'Allow Banner Dismissal:',
                            help_text: 'admin.customization.announcement.allowBannerDismissalDesc',
                            help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',
                            isDisabled: needsUtils.stateValueFalse('AnnouncementSettings.EnableBanner'),
                        },
                    ],
                },
            },
            posts: {
                schema: {
                    id: 'PostSettings',
                    name: 'admin.customization.posts',
                    name_default: 'Posts',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableLinkPreviews',
                            label: 'admin.customization.enableLinkPreviewsTitle',
                            label_default: 'Enable Link Previews:',
                            help_text: 'admin.customization.enableLinkPreviewsDesc',
                            help_text_default: 'Display a preview of website content below messages, when available. Users can disable these previews from Account Settings > Display > Website Link Previews.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_CUSTOM,
                            component: CustomUrlSchemesSetting,
                            key: 'DisplaySettings.CustomUrlSchemes',
                        },
                    ],
                },
            },
            legal_and_support: {
                schema: {
                    id: 'LegalAndSupportSettings',
                    name: 'admin.customization.support',
                    name_default: 'Legal and Support',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.TermsOfServiceLink',
                            label: 'admin.support.termsTitle',
                            label_default: 'Terms of Service link:',
                            help_text: 'admin.support.termsDesc',
                            help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the "Mattermost Conditions of Use (End Users)" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.PrivacyPolicyLink',
                            label: 'admin.support.privacyTitle',
                            label_default: 'Privacy Policy link:',
                            help_text: 'admin.support.privacyDesc',
                            help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.AboutLink',
                            label: 'admin.support.aboutTitle',
                            label_default: 'About link:',
                            help_text: 'admin.support.aboutDesc',
                            help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.HelpLink',
                            label: 'admin.support.helpTitle',
                            label_default: 'Help link:',
                            help_text: 'admin.support.helpDesc',
                            help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.ReportAProblemLink',
                            label: 'admin.support.problemTitle',
                            label_default: 'Report a Problem link:',
                            help_text: 'admin.support.problemDesc',
                            help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'SupportSettings.SupportEmail',
                            label: 'admin.support.emailTitle',
                            label_default: 'Support Email:',
                            help_text: 'admin.support.emailHelp',
                            help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',
                        },
                    ],
                },
            },
            native_app_links: {
                schema: {
                    id: 'LegalAndSupportSettings',
                    name: 'admin.customization.nativeAppLinks',
                    name_default: 'Mattermost App Links',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.AppDownloadLink',
                            label: 'admin.customization.appDownloadLinkTitle',
                            label_default: 'Mattermost Apps Download Page Link:',
                            help_text: 'admin.customization.appDownloadLinkDesc',
                            help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to "Download Mattermost Apps" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.AndroidAppDownloadLink',
                            label: 'admin.customization.androidAppDownloadLinkTitle',
                            label_default: 'Android App Download Link:',
                            help_text: 'admin.customization.androidAppDownloadLinkDesc',
                            help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'NativeAppSettings.IosAppDownloadLink',
                            label: 'admin.customization.iosAppDownloadLinkTitle',
                            label_default: 'iOS App Download Link:',
                            help_text: 'admin.customization.iosAppDownloadLinkDesc',
                            help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',
                        },
                    ],
                },
            },
        },
        compliance: {
        },
        advanced: {
            rate: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.rate.title',
                    name_default: 'Rate Limit Settings',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BANNER,
                            label: 'admin.rate.noteDescription',
                            label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',
                            banner_type: 'info',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'RateLimitSettings.Enable',
                            label: 'admin.rate.enableLimiterTitle',
                            label_default: 'Enable Rate Limiting:',
                            help_text: 'admin.rate.enableLimiterDescription',
                            help_text_default: 'When true, APIs are throttled at rates specified below.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'RateLimitSettings.PerSec',
                            label: 'admin.rate.queriesTitle',
                            label_default: 'Maximum Queries per Second:',
                            placeholder: 'admin.rate.queriesExample',
                            placeholder_default: 'E.g.: "10"',
                            help_text: 'admin.rate.queriesDescription',
                            help_text_default: 'Throttles API at this number of requests per second.',
                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'RateLimitSettings.MaxBurst',
                            label: 'admin.rate.maxBurst',
                            label_default: 'Maximum Burst Size:',
                            placeholder: 'admin.rate.maxBurstExample',
                            placeholder_default: 'E.g.: "100"',
                            help_text: 'admin.rate.maxBurstDescription',
                            help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',
                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_NUMBER,
                            key: 'RateLimitSettings.MemoryStoreSize',
                            label: 'admin.rate.memoryTitle',
                            label_default: 'Memory Store Size:',
                            placeholder: 'admin.rate.memoryExample',
                            placeholder_default: 'E.g.: "10000"',
                            help_text: 'admin.rate.memoryDescription',
                            help_text_default: 'Maximum number of users sessions connected to the system as determined by "Vary rate limit by remote address" and "Vary rate limit by HTTP header".',
                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'RateLimitSettings.VaryByRemoteAddr',
                            label: 'admin.rate.remoteTitle',
                            label_default: 'Vary rate limit by remote address:',
                            help_text: 'admin.rate.remoteDescription',
                            help_text_default: 'When true, rate limit API access by IP address.',
                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'RateLimitSettings.VaryByUser',
                            label: 'admin.rate.varyByUser',
                            label_default: 'Vary rate limit by user:',
                            help_text: 'admin.rate.varyByUserDescription',
                            help_text_default: 'When true, rate limit API access by user athentication token.',
                            isDisabled: needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'RateLimitSettings.VaryByHeader',
                            label: 'admin.rate.httpHeaderTitle',
                            label_default: 'Vary rate limit by HTTP header:',
                            placeholder: 'admin.rate.httpHeaderExample',
                            placeholder_default: 'E.g.: "X-Real-IP", "X-Forwarded-For"',
                            help_text: 'admin.rate.httpHeaderDescription',
                            help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to "X-Real-IP", when configuring AmazonELB set to "X-Forwarded-For").',
                            isDisabled: needsUtils.or(
                                needsUtils.stateValueEqual('RateLimitSettings.Enable', false),
                                needsUtils.stateValueEqual('RateLimitSettings.VaryByRemoteAddr', true),
                            ),
                        },
                    ],
                },
            },
            developer: {
                schema: {
                    id: 'ServiceSettings',
                    name: 'admin.developer.title',
                    name_default: 'Developer Settings',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableTesting',
                            label: 'admin.service.testingTitle',
                            label_default: 'Enable Testing Commands:',
                            help_text: 'admin.service.testingDescription',
                            help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'ServiceSettings.EnableDeveloper',
                            label: 'admin.service.developerTitle',
                            label_default: 'Enable Developer Mode: ',
                            help_text: 'admin.service.developerDesc',
                            help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'ServiceSettings.AllowedUntrustedInternalConnections',
                            label: 'admin.service.internalConnectionsTitle',
                            label_default: 'Allow untrusted internal connections to: ',
                            placeholder: 'admin.service.internalConnectionsEx',
                            placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',
                            help_text: 'admin.service.internalConnectionsDesc',
                            help_text_default: 'In testing environments, such as when developing integrations locally on a development machine, use this setting to specify domains, IP addresses, or CIDR notations to allow internal connections. Separate two or more domains with spaces. **Not recommended for use in production**, since this can allow a user to extract confidential data from your server or internal network.\n \nBy default, user-supplied URLs such as those used for Open Graph metadata, webhooks, or slash commands will not be allowed to connect to reserved IP addresses including loopback or link-local addresses used for internal networks. Push notification, OAuth 2.0 and WebRTC server URLs are trusted and not affected by this setting.',
                            help_text_markdown: true,
                        },
                    ],
                },
            },
            metrics: {
                schema: {
                    id: 'MetricsSettings',
                    name: 'admin.advance.metrics',
                    name_default: 'Performance Monitoring',
                    settings: [
                        {
                            type: Constants.SettingsTypes.TYPE_BOOL,
                            key: 'MetricsSettings.Enable',
                            label: 'admin.metrics.enableTitle',
                            label_default: 'Enable Performance Monitoring:',
                            help_text: 'admin.metrics.enableDescription',
                            help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for Mattermost.',
                            help_text_markdown: true,
                        },
                        {
                            type: Constants.SettingsTypes.TYPE_TEXT,
                            key: 'MetricsSettings.ListenAddress',
                            label: 'admin.metrics.listenAddressTitle',
                            label_default: 'Listen Address:',
                            placeholder: 'admin.metrics.listenAddressEx',
                            placeholder_default: 'E.g.: ":8067"',
                            help_text: 'admin.metrics.listenAddressDesc',
                            help_text_default: 'The address the server will listen on to expose performance metrics.',
                        },
                    ],
                },
            },
        },
    },
    other: {
        license: {
            schema: {
                id: 'LicenseSettings',
                component: LicenseSettings,
            },
        },
        audits: {
            schema: {
                id: 'Audits',
                component: Audits,
            },
        },
    },
};
