// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should allow to edit when have license and always allow to edit 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={true}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    >
      <span
        className="emoji-picker__container"
      >
        <EmojiPickerOverlay
          container={[Function]}
          onEmojiClick={[Function]}
          onHide={[Function]}
          rightOffset={50}
          show={false}
          spaceRequiredAbove={422}
          spaceRequiredBelow={436}
          target={[Function]}
          topOffset={-20}
        />
        <span
          className="icon icon--emoji"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<svg width='15px' height='15px' viewBox='0 0 15 15' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <g stroke='none' stroke-width='1' fill='inherit' fill-rule='evenodd'> <g transform='translate(-1071.000000, -954.000000)' fill='inherit'> <g transform='translate(25.000000, 937.000000)'> <g transform='translate(1046.000000, 17.000000)'> <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'></path> <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'></path> <ellipse cx='4.94318182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> <ellipse cx='10.0568182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> </g> </g> </g> </g> </svg>",
            }
          }
          onClick={[Function]}
        />
      </span>
    </span>
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should allow to edit when have license and the post is before the editing time limit 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={false}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    />
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should match with default config 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={true}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    >
      <span
        className="emoji-picker__container"
      >
        <EmojiPickerOverlay
          container={[Function]}
          onEmojiClick={[Function]}
          onHide={[Function]}
          rightOffset={50}
          show={false}
          spaceRequiredAbove={422}
          spaceRequiredBelow={436}
          target={[Function]}
          topOffset={-20}
        />
        <span
          className="icon icon--emoji"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<svg width='15px' height='15px' viewBox='0 0 15 15' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <g stroke='none' stroke-width='1' fill='inherit' fill-rule='evenodd'> <g transform='translate(-1071.000000, -954.000000)' fill='inherit'> <g transform='translate(25.000000, 937.000000)'> <g transform='translate(1046.000000, 17.000000)'> <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'></path> <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'></path> <ellipse cx='4.94318182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> <ellipse cx='10.0568182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> </g> </g> </g> </g> </svg>",
            }
          }
          onClick={[Function]}
        />
      </span>
    </span>
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should match without editingPost 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": undefined,
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={true}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    >
      <span
        className="emoji-picker__container"
      >
        <EmojiPickerOverlay
          container={[Function]}
          onEmojiClick={[Function]}
          onHide={[Function]}
          rightOffset={50}
          show={false}
          spaceRequiredAbove={422}
          spaceRequiredBelow={436}
          target={[Function]}
          topOffset={-20}
        />
        <span
          className="icon icon--emoji"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<svg width='15px' height='15px' viewBox='0 0 15 15' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <g stroke='none' stroke-width='1' fill='inherit' fill-rule='evenodd'> <g transform='translate(-1071.000000, -954.000000)' fill='inherit'> <g transform='translate(25.000000, 937.000000)'> <g transform='translate(1046.000000, 17.000000)'> <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'></path> <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'></path> <ellipse cx='4.94318182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> <ellipse cx='10.0568182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> </g> </g> </g> </g> </svg>",
            }
          }
          onClick={[Function]}
        />
      </span>
    </span>
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should match without emoji picker 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={false}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    />
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should not allow to edit when config and license restrict edition 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={false}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    />
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should not allow to edit when have license and the post is after the editing time limit 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={false}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={false}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    />
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should show emojis on emojis click 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={true}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    >
      <span
        className="emoji-picker__container"
      >
        <EmojiPickerOverlay
          container={[Function]}
          onEmojiClick={[Function]}
          onHide={[Function]}
          rightOffset={50}
          show={true}
          spaceRequiredAbove={422}
          spaceRequiredBelow={436}
          target={[Function]}
          topOffset={-20}
        />
        <span
          className="icon icon--emoji"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<svg width='15px' height='15px' viewBox='0 0 15 15' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <g stroke='none' stroke-width='1' fill='inherit' fill-rule='evenodd'> <g transform='translate(-1071.000000, -954.000000)' fill='inherit'> <g transform='translate(25.000000, 937.000000)'> <g transform='translate(1046.000000, 17.000000)'> <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'></path> <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'></path> <ellipse cx='4.94318182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> <ellipse cx='10.0568182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> </g> </g> </g> </g> </svg>",
            }
          }
          onClick={[Function]}
        />
      </span>
    </span>
    <div
      className="edit-post-footer"
    />
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;

exports[`comoponents/edit_post_modal/edit_post_modal.jsx should show errors when it is set in the state 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="edit-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onEnter={[Function]}
  onEntered={[Function]}
  onExit={[Function]}
  onExited={[Function]}
  onHide={[Function]}
  onKeyDown={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h4"
    >
      <FormattedMessage
        defaultMessage="Edit {title}"
        id="edit_post.edit"
        values={
          Object {
            "title": "test",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body edit-modal-body"
    componentClass="div"
  >
    <Textbox
      channelId="5"
      characterLimit={4000}
      createMessage="Edit the post..."
      emojiEnabled={true}
      handlePostError={[Function]}
      id="edit_textbox"
      isRHS={false}
      onChange={[Function]}
      onKeyDown={[Function]}
      onKeyPress={[Function]}
      popoverMentionKeyClick={false}
      suggestionListStyle="bottom"
      supportsCommands={false}
      value=""
    />
    <span
      className="edit-post__actions"
    >
      <span
        className="emoji-picker__container"
      >
        <EmojiPickerOverlay
          container={[Function]}
          onEmojiClick={[Function]}
          onHide={[Function]}
          rightOffset={50}
          show={false}
          spaceRequiredAbove={422}
          spaceRequiredBelow={436}
          target={[Function]}
          topOffset={-20}
        />
        <span
          className="icon icon--emoji"
          dangerouslySetInnerHTML={
            Object {
              "__html": "<svg width='15px' height='15px' viewBox='0 0 15 15' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'> <g stroke='none' stroke-width='1' fill='inherit' fill-rule='evenodd'> <g transform='translate(-1071.000000, -954.000000)' fill='inherit'> <g transform='translate(25.000000, 937.000000)'> <g transform='translate(1046.000000, 17.000000)'> <path d='M7.5,0.0852272727 C3.405,0.0852272727 0.0852272727,3.405 0.0852272727,7.5 C0.0852272727,11.595 3.405,14.9147727 7.5,14.9147727 C11.595,14.9147727 14.9147727,11.595 14.9147727,7.5 C14.9147727,3.405 11.595,0.0852272727 7.5,0.0852272727 Z M7.5,14.0663436 C3.87926951,14.0663436 0.933656417,11.1207305 0.933656417,7.5 C0.933656417,3.87926951 3.87926951,0.933656417 7.5,0.933656417 C11.1207305,0.933656417 14.0663436,3.87926951 14.0663436,7.5 C14.0663436,11.1207305 11.1207305,14.0663436 7.5,14.0663436 Z'></path> <path d='M11.7732955,8.95397727 C12.0119318,8.90488636 12.2159659,9.11778409 12.1684091,9.35676136 C11.8063636,11.1790909 9.85346591,12.5710227 7.49846591,12.5710227 C5.15096591,12.5710227 3.20284091,11.1877841 2.83193182,9.37397727 C2.78181818,9.129375 2.99267045,8.911875 3.23744318,8.96198864 C4.85369318,9.29232955 10.1786932,9.28142045 11.7732955,8.95397727 Z'></path> <ellipse cx='4.94318182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> <ellipse cx='10.0568182' cy='5.50431818' rx='1' ry='1.06534091'></ellipse> </g> </g> </g> </g> </svg>",
            }
          }
          onClick={[Function]}
        />
      </span>
    </span>
    <div
      className="edit-post-footer has-error"
    >
      <label
        className="post-error"
      >
        Test error message
      </label>
    </div>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <button
      className="btn btn-default"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="edit_post.cancel"
        values={Object {}}
      />
    </button>
    <button
      className="btn btn-primary"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="edit_post.save"
        values={Object {}}
      />
    </button>
  </ModalFooter>
</Modal>
`;
