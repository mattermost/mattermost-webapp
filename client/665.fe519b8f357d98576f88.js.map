{"version":3,"file":"665.fe519b8f357d98576f88.js","mappings":"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","sources":["webpack://@mattermost/webapp/./actions/views/mfa.js","webpack://@mattermost/webapp/./components/common/back_button.tsx","webpack://@mattermost/webapp/./components/mfa/setup/setup.tsx","webpack://@mattermost/webapp/./components/mfa/setup/index.ts","webpack://@mattermost/webapp/./components/mfa/confirm.tsx","webpack://@mattermost/webapp/./components/mfa/mfa_controller/mfa_controller.tsx","webpack://@mattermost/webapp/./components/mfa/mfa_controller/index.ts","webpack://@mattermost/webapp/./components/widgets/icons/fa_logout_icon.tsx","webpack://@mattermost/webapp/./images/logo.png"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div\n            id='back_button'\n            className={classNames('signup-header', className)}\n        >\n            <Link\n                onClick={onClick}\n                to={url}\n            >\n                <span\n                    id='back_button_icon'\n                    className='fa fa-1x fa-angle-left'\n                    title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n                />\n                <FormattedMessage\n                    id='web.header.back'\n                    defaultMessage='Back'\n                />\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\ntype MFAControllerState = {\n    enforceMultifactorAuthentication: boolean;\n};\n\ntype Props = {\n\n    /*\n     * Object containing enforceMultifactorAuthentication\n     */\n    state: MFAControllerState;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: MFAControllerState) => void;\n\n    currentUser: UserProfile;\n    siteName?: string;\n    enforceMultifactorAuthentication: boolean;\n    actions: {\n        activateMfa: (code: string) => Promise<{\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        generateMfaSecret: () => Promise<{\n            data: {\n                secret: string;\n                qr_code: string;\n            };\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\ntype State = {\n    secret: string;\n    qrCode: string;\n    error?: any | null;\n    serverError?: string;\n}\n\nexport default class Setup extends React.PureComponent<Props, State> {\n    private input: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {secret: '', qrCode: ''};\n\n        this.input = React.createRef();\n    }\n\n    public componentDidMount(): void {\n        const user = this.props.currentUser;\n        if (!user || user.mfa_active) {\n            this.props.history.push('/');\n            return;\n        }\n\n        this.props.actions.generateMfaSecret().then(({data, error}) => {\n            if (error) {\n                this.setState({\n                    serverError: error.message,\n                });\n                return;\n            }\n\n            this.setState({\n                secret: data.secret,\n                qrCode: data.qr_code,\n            });\n        });\n    }\n\n    submit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        const code = this.input?.current?.value.replace(/\\s/g, '');\n        if (!code || code.length === 0) {\n            this.setState({error: Utils.localizeMessage('mfa.setup.codeError', 'Please enter the code from Google Authenticator.')});\n            return;\n        }\n\n        this.setState({error: null});\n\n        this.props.actions.activateMfa(code).then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'ent.mfa.activate.authenticate.app_error') {\n                    this.setState({\n                        error: Utils.localizeMessage('mfa.setup.badCode', 'Invalid code. If this issue persists, contact your System Administrator.'),\n                    });\n                } else {\n                    this.setState({\n                        error: error.message,\n                    });\n                }\n\n                return;\n            }\n\n            this.props.history.push('/mfa/confirm');\n        });\n    }\n\n    public render(): JSX.Element {\n        let formClass = 'form-group';\n        let errorContent;\n        if (this.state.error) {\n            errorContent = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let mfaRequired;\n        if (this.props.enforceMultifactorAuthentication) {\n            mfaRequired = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='mfa.setup.required'\n                        defaultMessage='**Multi-factor authentication is required on {siteName}.**'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    className={formClass}\n                >\n                    {mfaRequired}\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step1'\n                            defaultMessage=\"**Step 1: **On your phone, download Google Authenticator from [iTunes](!https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8') or [Google Play](!https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en)\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step2'\n                            defaultMessage='**Step 2: **Use Google Authenticator to scan this QR code, or manually type in the secret key'\n                        />\n                    </p>\n                    <div className='form-group'>\n                        <div className='col-sm-12'>\n                            <img\n                                alt={'qr code image'}\n                                style={style.qrCode}\n                                src={'data:image/png;base64,' + this.state.qrCode}\n                            />\n                        </div>\n                    </div>\n                    <br/>\n                    <div className='form-group'>\n                        <p className='col-sm-12'>\n                            <FormattedMessage\n                                id='mfa.setup.secret'\n                                defaultMessage='Secret: {secret}'\n                                values={{\n                                    secret: this.state.secret,\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step3'\n                            defaultMessage='**Step 3: **Enter the code generated by Google Authenticator'\n                        />\n                    </p>\n                    <p>\n                        <LocalizedInput\n                            ref={this.input}\n                            className='form-control'\n                            placeholder={{id: t('mfa.setup.code'), defaultMessage: 'MFA Code'}}\n                            autoFocus={true}\n                        />\n                    </p>\n                    {errorContent}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.setup.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    qrCode: {maxHeight: 170},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {activateMfa, generateMfaSecret} from 'actions/views/mfa';\n\nimport Setup from './setup';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        siteName,\n        enforceMultifactorAuthentication,\n    };\n}\n\ntype Actions = {\n    activateMfa: (code: string) => Promise<{ error?: { server_error_id: string; message: string } }>;\n    generateMfaSecret: () => Promise<{data: { secret: string; qr_code: string }; error?: { message: string }}>;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            activateMfa,\n            generateMfaSecret,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/utils';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\ntype MFAControllerState = {\n    enforceMultifactorAuthentication: boolean;\n};\n\ntype Props = {\n\n    /*\n     * Object containing enforceMultifactorAuthentication\n     */\n    state: MFAControllerState;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: MFAControllerState) => void;\n}\n\nexport default class Confirm extends React.PureComponent<Props> {\n    public componentDidMount(): void {\n        document.body.addEventListener('keydown', this.onKeyPress);\n    }\n\n    public componentWillUnmount(): void {\n        document.body.removeEventListener('keydown', this.onKeyPress);\n    }\n\n    submit = (e: KeyboardEvent | React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        redirectUserToDefaultTeam();\n    }\n\n    onKeyPress = (e: KeyboardEvent | React.FormEvent<HTMLFormElement>): void => {\n        if (isKeyPressed(e as KeyboardEvent, KeyCodes.ENTER)) {\n            this.submit(e);\n        }\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    onKeyPress={this.onKeyPress}\n                    className='form-group'\n                >\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.confirm.complete'\n                            defaultMessage='**Set up complete!**'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='mfa.confirm.secure'\n                            defaultMessage='Your account is now secure. Next time you sign in, you will be asked to enter a code from the Google Authenticator app on your phone.'\n                        />\n                    </p>\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.confirm.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Route, Switch, RouteComponentProps} from 'react-router-dom';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport Setup from '../setup';\nimport Confirm from '../confirm';\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    children?: React.ReactNode;\n    mfa: boolean;\n    enableMultifactorAuthentication: boolean;\n    enforceMultifactorAuthentication: boolean;\n\n    /*\n     * Object from react-router\n     */\n    match: {\n        url: string;\n    };\n}\n\ntype State = {\n    enforceMultifactorAuthentication: boolean;\n}\n\nexport default class MFAController extends React.PureComponent<Props & RouteComponentProps, State> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {enforceMultifactorAuthentication: props.enableMultifactorAuthentication};\n    }\n\n    public componentDidMount(): void {\n        document.body.classList.add('sticky');\n        document.getElementById('root')!.classList.add('container-fluid');\n\n        if (!this.props.enableMultifactorAuthentication) {\n            this.props.history.push('/');\n        }\n    }\n\n    public componentWillUnmount(): void {\n        document.body.classList.remove('sticky');\n        document.getElementById('root')!.classList.remove('container-fluid');\n    }\n\n    public handleOnClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        emitUserLoggedOutEvent('/login');\n    }\n\n    public updateParent = (state: State): void => {\n        this.setState(state);\n    };\n\n    public render(): JSX.Element {\n        let backButton;\n        if (this.props.mfa && this.props.enforceMultifactorAuthentication) {\n            backButton = (\n                <div className='signup-header'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleOnClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            );\n        } else {\n            backButton = (<BackButton/>);\n        }\n\n        return (\n            <div className='inner-wrap'>\n                <div className='row content'>\n                    <div>\n                        {backButton}\n                        <div className='col-sm-12'>\n                            <div className='signup-team__container'>\n                                <h3>\n                                    <FormattedMessage\n                                        id='mfa.setupTitle'\n                                        defaultMessage='Multi-factor Authentication Setup'\n                                    />\n                                </h3>\n                                <img\n                                    alt={'signup team logo'}\n                                    className='signup-team-logo'\n                                    src={logoImage}\n                                />\n                                <div id='mfa'>\n                                    <Switch>\n                                        <Route\n                                            path={`${this.props.match.url}/setup`}\n                                            render={(props) => (\n                                                <Setup\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                            path={`${this.props.match.url}/confirm`}\n                                            render={(props) => (\n                                                <Confirm\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\n\nimport MFAController from './mfa_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfa = license.MFA === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        mfa,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n    };\n}\n\nexport default connect(mapStateToProps)(MFAController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n","export default __webpack_public_path__ + \"files/ab8aa80cba445eb0fb75e6611c292567.png\";"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","BackButton","url","className","onClick","formatMessage","useIntl","id","classNames","Link","to","title","defaultMessage","defaultProps","Setup","React","constructor","props","super","e","preventDefault","this","input","current","value","replace","length","setState","error","actions","then","server_error_id","Utils","message","history","push","state","secret","qrCode","componentDidMount","user","currentUser","mfa_active","data","serverError","qr_code","render","errorContent","mfaRequired","formClass","enforceMultifactorAuthentication","values","siteName","onSubmit","submit","alt","style","src","ref","placeholder","t","autoFocus","type","updateParent","maxHeight","connect","config","getConfig","SiteName","EnforceMultifactorAuthentication","getCurrentUser","bindActionCreators","KeyCodes","Constants","Confirm","redirectUserToDefaultTeam","isKeyPressed","ENTER","document","body","addEventListener","onKeyPress","componentWillUnmount","removeEventListener","MFAController","emitUserLoggedOutEvent","enableMultifactorAuthentication","classList","add","getElementById","remove","backButton","mfa","handleOnClick","logoImage","path","match","location","search","children","license","getLicense","MFA","EnableMultifactorAuthentication","LogoutIcon"],"sourceRoot":""}