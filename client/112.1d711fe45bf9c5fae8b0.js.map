{"version":3,"file":"112.1d711fe45bf9c5fae8b0.js","mappings":"6VAsBA,MAAMA,EAAoB,IAA0C,IAAzC,SAACC,EAAD,SAAWC,EAAX,QAAqBC,GAAoB,EAChE,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAA0B,MAE9CC,GAAgBC,EAAAA,EAAAA,QAAyB,MAiCzCC,EAAeL,EACjB,uBAAKM,UAAU,wBACX,yBAAOA,UAAU,iBACZN,IAGT,KAEJ,OACI,uBAAKM,UAAU,aACX,uBAAKA,UAAU,0BACX,gBAAC,IAAD,CACIC,GAAG,sBACHC,QAAQ,KACRC,eAAe,mBAEnB,wBAAMC,SA/CUC,MAAAA,IACxBC,EAAEC,iBAEF,MAAMC,EAAWX,EAAcY,QAASC,MACxC,IAAKF,GAAYA,EAASG,OAASC,EAAAA,GAAAA,oBAU/B,YATAjB,EACI,gBAAC,IAAD,CACIM,GAAG,sBACHE,eAAe,4CACfU,OAAQ,CACJC,MAAOF,EAAAA,GAAAA,wBAOvB,MAAMG,EAAS,IAAIC,gBAAgBzB,EAAS0B,QAASC,IAAI,SAEzD,GAAqB,iBAAVH,EACP,MAAM,IAAII,MAAM,0BAEpB,MAAM,KAACC,EAAD,MAAO1B,SAAeD,EAAQ4B,kBAAkBN,EAAOP,GACzDY,GACAE,EAAAA,EAAAA,KAAoB,gBAAkBV,EAAAA,GAAAA,iBACtCjB,EAAS,OACFD,GACPC,EAASD,EAAM6B,WAqBP,yBACI,gBAAC,IAAD,CACItB,GAAG,sBACHE,eAAe,oDACfU,OAAQ,CACJrB,SAAAA,MAIZ,uBAAKQ,UAAWwB,GAAAA,CAAW,aAAc,CAAC,YAAa9B,KACnD,gBAAC,IAAD,CACIO,GAAG,qBACHwB,KAAK,WACLzB,UAAU,eACV0B,KAAK,WACLC,IAAK9B,EACL+B,YAAa,CAAC3B,IAAI4B,EAAAA,EAAAA,GAAE,qBAAsB1B,eAAgB,YAC1D2B,WAAW,QACXC,WAAW,KAGlBhC,EACD,0BACIE,GAAG,sBACHwB,KAAK,SACLzB,UAAU,mBAEV,gBAAC,IAAD,CACIC,GAAG,uBACHE,eAAe,4B,aAzFvCZ,SAAU,IAAVA,MAAAA,CAAW0B,OAAAA,IAAAA,OAAAA,a,WACXxB,QAAS,IAATA,MAAAA,CACI4B,kBAAoB,IAApBA,KAAAA,a,WAEJ7B,SAAAA,IAAAA,QA8FJ,SAAewC,EAAAA,EAAAA,MAAK1C,GCpFpB,GAAe2C,EAAAA,EAAAA,UAVf,SAAyBC,GACrB,MAAO,CAAC1C,UAAU2C,EAAAA,EAAAA,IAAUD,GAAOE,aAGXC,IAAD,CACvB5C,SAAS6C,EAAAA,EAAAA,oBAAiE,CACtEjB,kBAAiBA,EAAAA,IAClBgB,MAGP,CAA4D/C","sources":["webpack://@mattermost/webapp/./components/password_reset_form/password_reset_form.tsx","webpack://@mattermost/webapp/./components/password_reset_form/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, useRef, memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport {ServerError} from 'mattermost-redux/types/errors';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\ninterface Props {\n    location: {search: string};\n    actions: {\n        resetUserPassword: (token: string, newPassword: string) => Promise<{data: any; error: ServerError}>;\n    };\n    siteName?: string;\n}\n\nconst PasswordResetForm = ({location, siteName, actions}: Props) => {\n    const [error, setError] = useState<React.ReactNode>(null);\n\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const handlePasswordReset = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = passwordInput.current!.value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            setError(\n                <FormattedMessage\n                    id='password_form.error'\n                    defaultMessage='Please enter at least {chars} characters.'\n                    values={{\n                        chars: Constants.MIN_PASSWORD_LENGTH,\n                    }}\n                />,\n            );\n            return;\n        }\n\n        const token = (new URLSearchParams(location.search)).get('token');\n\n        if (typeof token !== 'string') {\n            throw new Error('token must be a string');\n        }\n        const {data, error} = await actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            setError(null);\n        } else if (error) {\n            setError(error.message);\n        }\n    };\n\n    const errorElement = error ? (\n        <div className='form-group has-error'>\n            <label className='control-label'>\n                {error}\n            </label>\n        </div>\n    ) : null;\n\n    return (\n        <div className='col-sm-12'>\n            <div className='signup-team__container'>\n                <FormattedMessage\n                    id='password_form.title'\n                    tagName='h1'\n                    defaultMessage='Password Reset'\n                />\n                <form onSubmit={handlePasswordReset}>\n                    <p>\n                        <FormattedMessage\n                            id='password_form.enter'\n                            defaultMessage='Enter a new password for your {siteName} account.'\n                            values={{\n                                siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={classNames('form-group', {'has-error': error})}>\n                        <LocalizedInput\n                            id='resetPasswordInput'\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={passwordInput}\n                            placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                            autoFocus={true}\n                        />\n                    </div>\n                    {errorElement}\n                    <button\n                        id='resetPasswordButton'\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='password_form.change'\n                            defaultMessage='Change my password'\n                        />\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(PasswordResetForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport {GlobalState} from 'types/store';\nimport {ServerError} from 'mattermost-redux/types/errors';\nimport {GenericAction, ActionFunc} from 'mattermost-redux/types/actions';\n\nimport PasswordResetForm from './password_reset_form';\n\ntype Actions = {\n    resetUserPassword: (token: string, newPassword: string) => Promise<{data: any; error: ServerError}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {siteName: getConfig(state).SiteName};\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"names":["PasswordResetForm","location","siteName","actions","error","setError","useState","passwordInput","useRef","errorElement","className","id","tagName","defaultMessage","onSubmit","async","e","preventDefault","password","current","value","length","Constants","values","chars","token","URLSearchParams","search","get","Error","data","resetUserPassword","browserHistory","message","classNames","type","name","ref","placeholder","t","spellCheck","autoFocus","memo","connect","state","getConfig","SiteName","dispatch","bindActionCreators"],"sourceRoot":""}