{"version":3,"file":"152.bba237203213c491c411.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/dnd_custom_time_picker_modal/dnd_custom_time_picker_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\n\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {UserStatus} from 'mattermost-redux/types/users';\n\nimport GenericModal from 'components/generic_modal';\n\nimport {UserStatuses} from 'utils/constants';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport './dnd_custom_time_picker_modal.scss';\nimport {toUTCUnix} from 'utils/datetime';\nimport {localizeMessage} from 'utils/utils';\n\ntype Props = {\n    onExited: () => void;\n    userId: string;\n    currentDate: Date;\n    actions: {\n        setStatus: (status: UserStatus) => ActionFunc;\n    };\n};\n\ntype State = {\n    selectedDate: Date;\n    selectedTime: string;\n    timeMenuList: string[];\n    dayPickerStartDate: Date;\n}\n\nexport default class DndCustomTimePicker extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {currentDate} = this.props;\n        const selectedDate: Date = new Date(currentDate);\n\n        // if current time is > 23:20 then we will set date to tomorrow and show all times\n        if (currentDate.getHours() === 23 && currentDate.getMinutes() > 20) {\n            selectedDate.setDate(currentDate.getDate() + 1);\n        }\n\n        this.state = {\n            selectedDate,\n            dayPickerStartDate: selectedDate,\n            ...this.makeTimeMenuList(selectedDate),\n        };\n    }\n\n    formatDate = (date: Date): string => {\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        const year = date.getFullYear().toString();\n        return [year, month, day].join('-');\n    }\n\n    getText = () => {\n        const modalHeaderText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.defaultMsg'\n                defaultMessage='Disable notifications until'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.submitButton'\n                defaultMessage='Disable Notifications'\n            />\n        );\n\n        return {\n            modalHeaderText,\n            confirmButtonText,\n        };\n    }\n\n    handleConfirm = () => {\n        const hours = parseInt(this.state.selectedTime.split(':')[0], 10);\n        const minutes = parseInt(this.state.selectedTime.split(':')[1], 10);\n        const endTime = new Date(this.state.selectedDate);\n        endTime.setHours(hours, minutes);\n        if (endTime < new Date()) {\n            return;\n        }\n        this.props.actions.setStatus({\n            user_id: this.props.userId,\n            status: UserStatuses.DND,\n            dnd_end_time: toUTCUnix(endTime),\n            manual: true,\n            last_activity_at: toUTCUnix(this.props.currentDate),\n        });\n    }\n\n    handleDaySelection = (day: Date) => {\n        this.setState({\n            selectedDate: day,\n            ...this.makeTimeMenuList(day),\n        });\n    };\n\n    makeTimeMenuList = (date: Date): {timeMenuList: string[]; selectedTime: string} => {\n        const timeMenuItems = [];\n        let h = 0;\n        let m = 0;\n        const curr = this.props.currentDate;\n\n        if (this.formatDate(curr) === this.formatDate(date)) {\n            h = curr.getHours();\n            m = curr.getMinutes();\n            if (m > 20) {\n                h++;\n                m = 0;\n            } else {\n                m = 30;\n            }\n        }\n\n        for (let i = h; i < 24; i++) {\n            for (let j = m / 30; j < 2; j++) {\n                const t = i.toString().padStart(2, '0') + ':' + (j * 30).toString().padStart(2, '0');\n                timeMenuItems.push(\n                    t,\n                );\n            }\n        }\n\n        return {\n            timeMenuList: timeMenuItems,\n            selectedTime: timeMenuItems[0],\n        };\n    }\n\n    render() {\n        const {\n            modalHeaderText,\n            confirmButtonText,\n        } = this.getText();\n\n        const {timeMenuList, selectedTime, selectedDate, dayPickerStartDate} = this.state;\n        const timeMenuItems = timeMenuList.map((time) => {\n            return (\n                <Menu.ItemAction\n                    id={`dndTime_dropdown_${time}`}\n                    key={time}\n                    text={time}\n                    ariaLabel={`${time} hours`}\n                    onClick={() => {\n                        this.setState({\n                            selectedTime: time,\n                        });\n                    }}\n                >\n                    {time}\n                </Menu.ItemAction>\n            );\n        });\n\n        return (\n            <GenericModal\n                ariaLabel={localizeMessage('dnd_custom_time_picker_modal.defaultMsg', 'Disable notifications until')}\n                onExited={this.props.onExited}\n                modalHeaderText={modalHeaderText}\n                confirmButtonText={confirmButtonText}\n                handleConfirm={this.handleConfirm}\n                handleEnterKeyPress={this.handleConfirm}\n                id='dndCustomTimePickerModal'\n                className={'DndModal modal-overflow'}\n            >\n                <div className='DndModal__content'>\n                    <div>\n                        <div className='DndModal__input DndModal__input--no-border'>\n                            <div className='DndModal__input__label'>\n                                <FormattedMessage\n                                    id='dnd_custom_time_picker_modal.date'\n                                    defaultMessage='Date'\n                                />\n                            </div>\n                            <i className='icon icon--no-spacing icon-calendar-outline icon--xs icon-14'/>\n                            <DayPickerInput\n                                value={this.formatDate(selectedDate)}\n                                onDayChange={this.handleDaySelection}\n                                dayPickerProps={{\n                                    selectedDays: selectedDate,\n                                    disabledDays: {\n                                        before: dayPickerStartDate,\n                                    },\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <MenuWrapper\n                        id='dropdown-no-caret'\n                        stopPropagationOnToggle={true}\n                    >\n                        <button\n                            className='DndModal__input'\n                            type='button'\n                        >\n                            <div className='DndModal__input__label'>\n                                <FormattedMessage\n                                    id='dnd_custom_time_picker_modal.time'\n                                    defaultMessage='Time'\n                                />\n                            </div>\n                            <i className='icon icon--no-spacing icon-clock-outline icon--xs icon-14'/>\n                            <span>{selectedTime}</span>\n                        </button>\n                        <Menu\n                            openLeft={false}\n                            ariaLabel={'Clear custom status after'}\n                        >\n                            {timeMenuItems}\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </GenericModal>\n        );\n    }\n}\n"],"names":["DndCustomTimePicker","React","constructor","props","super","date","month","getMonth","toString","padStart","day","getDate","getFullYear","join","modalHeaderText","id","defaultMessage","confirmButtonText","hours","parseInt","this","state","selectedTime","split","minutes","endTime","Date","selectedDate","setHours","actions","setStatus","user_id","userId","status","UserStatuses","dnd_end_time","toUTCUnix","manual","last_activity_at","currentDate","setState","makeTimeMenuList","timeMenuItems","h","m","curr","formatDate","getHours","getMinutes","i","j","t","push","timeMenuList","setDate","dayPickerStartDate","render","getText","map","time","key","text","ariaLabel","onClick","localizeMessage","onExited","handleConfirm","handleEnterKeyPress","className","value","onDayChange","handleDaySelection","dayPickerProps","selectedDays","disabledDays","before","stopPropagationOnToggle","type","openLeft"],"sourceRoot":""}