{"version":3,"file":"404.de8d5daa7b43884a7a0c.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_item/marketplace_item.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_plugin/marketplace_item_plugin.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_plugin/index.ts","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_app/marketplace_item_app.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_item/marketplace_item_app/index.ts","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_list/navigation_row/navigation_button.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_list/navigation_row/navigation_row.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_list/navigation_row/index.ts","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_list/marketplace_list.tsx","webpack://@mattermost/webapp/./components/plugin_marketplace/marketplace_modal.tsx","webpack://@mattermost/webapp/./components/widgets/icons/back_icon.tsx","webpack://@mattermost/webapp/./components/widgets/modals/full_screen_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport type {MarketplaceLabel} from 'mattermost-redux/types/marketplace';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\nimport PluginIcon from 'components/widgets/icons/plugin_icon';\n\nimport {Constants} from 'utils/constants';\n\n// Label renders a tag showing a name and a description in a tooltip.\n// If a URL is provided, clicking on the tag will open the URL in a new tab.\nexport const Label = ({name, description, url, color}: MarketplaceLabel): JSX.Element => {\n    const tag = (\n        <span\n            className='tag'\n            style={{backgroundColor: color || ''}}\n        >\n            {name.toUpperCase()}\n        </span>\n    );\n\n    let label;\n    if (description) {\n        label = (\n            <OverlayTrigger\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                overlay={\n                    <Tooltip id={'plugin-marketplace_label_' + name.toLowerCase() + '-tooltip'}>\n                        {description}\n                    </Tooltip>\n                }\n            >\n                {tag}\n            </OverlayTrigger>\n        );\n    } else {\n        label = tag;\n    }\n\n    if (url) {\n        return (\n            <a\n                aria-label={name.toLowerCase()}\n                className='style--none more-modal__row--link'\n                target='_blank'\n                rel='noopener noreferrer'\n                href={url}\n            >\n                {label}\n            </a>\n        );\n    }\n\n    return label;\n};\n\nexport type MarketplaceItemProps = {\n    id: string;\n    name: string;\n    description?: string;\n    iconSource?: string;\n    labels?: MarketplaceLabel[];\n    homepageUrl?: string;\n\n    error?: string;\n\n    button: JSX.Element;\n    updateDetails: JSX.Element | null;\n    versionLabel: JSX.Element| null;\n};\n\nexport default class MarketplaceItem extends React.PureComponent <MarketplaceItemProps> {\n    render(): JSX.Element {\n        let icon;\n        if (this.props.iconSource) {\n            icon = (\n                <div className='icon__plugin icon__plugin--background'>\n                    <img src={this.props.iconSource}/>\n                </div>\n            );\n        } else {\n            icon = <PluginIcon className='icon__plugin icon__plugin--background'/>;\n        }\n\n        let labels;\n        if (this.props.labels && this.props.labels.length !== 0) {\n            labels = this.props.labels.map((label) => (\n                <Label\n                    key={label.name}\n                    name={label.name}\n                    description={label.description}\n                    url={label.url}\n                    color={label.color}\n                />\n            ),\n            );\n        }\n\n        const pluginDetailsInner = (\n            <>\n                {this.props.name}\n                {this.props.versionLabel}\n            </>\n        );\n\n        const description = (\n            <p className={classNames('more-modal__description', {error_text: this.props.error})}>\n                {this.props.error ? this.props.error : this.props.description}\n            </p>\n        );\n\n        let pluginDetails;\n        if (this.props.homepageUrl) {\n            pluginDetails = (\n                <>\n                    <a\n                        aria-label={this.props.name.toLowerCase()}\n                        className='style--none more-modal__row--link'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href={this.props.homepageUrl}\n                    >\n                        {pluginDetailsInner}\n                    </a>\n                    {labels}\n                    <a\n                        aria-label=\"Plugin's website\"\n                        className='style--none more-modal__row--link'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href={this.props.homepageUrl}\n                    >\n                        {description}\n                    </a>\n                </>\n            );\n        } else {\n            pluginDetails = (\n                <>\n                    <span\n                        aria-label={this.props.name.toLowerCase()}\n                        className='style--none'\n                    >\n                        {pluginDetailsInner}\n                    </span>\n                    {labels}\n                    <span\n                        aria-label=\"Plugin\\'s website\"\n                        className='style--none'\n                    >\n                        {description}\n                    </span>\n                </>\n            );\n        }\n\n        return (\n            <>\n                <div\n                    className={classNames('more-modal__row', 'more-modal__row--link', {item_error: this.props.error})}\n                    key={this.props.id}\n                    id={'marketplace-plugin-' + this.props.id}\n                >\n                    {icon}\n                    <div className='more-modal__details'>\n                        {pluginDetails}\n                        {this.props.updateDetails}\n\n                    </div>\n                    <div className='more-modal__actions'>\n                        {this.props.button}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport semver from 'semver';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Link} from 'react-router-dom';\n\nimport type {MarketplaceLabel} from 'mattermost-redux/types/marketplace';\n\nimport MarketplaceItem from '../marketplace_item';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport ConfirmModal from 'components/confirm_modal';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {localizeMessage} from 'utils/utils';\n\ntype UpdateVersionProps = {\n    version: string;\n    releaseNotesUrl?: string;\n};\n\n// UpdateVersion renders the version text in the update details, linking out to release notes if available.\nexport const UpdateVersion = ({version, releaseNotesUrl}: UpdateVersionProps): JSX.Element => {\n    if (!releaseNotesUrl) {\n        return (\n            <span>\n                {version}\n            </span>\n        );\n    }\n\n    return (\n        <a\n            target='_blank'\n            rel='noopener noreferrer'\n            href={releaseNotesUrl}\n        >\n            {version}\n        </a>\n    );\n};\n\nexport type UpdateDetailsProps = {\n    version: string;\n    releaseNotesUrl?: string;\n    installedVersion?: string;\n    isInstalling: boolean;\n    onUpdate: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n};\n\n// UpdateDetails renders an inline update prompt for plugins, when available.\nexport const UpdateDetails = ({version, releaseNotesUrl, installedVersion, isInstalling, onUpdate}: UpdateDetailsProps): JSX.Element | null => {\n    if (!installedVersion || isInstalling) {\n        return null;\n    }\n\n    let isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    return (\n        <div className={classNames('update')}>\n            <FormattedMessage\n                id='marketplace_modal.list.update_available'\n                defaultMessage='Update available:'\n            />\n            {' '}\n            <UpdateVersion\n                version={version}\n                releaseNotesUrl={releaseNotesUrl}\n            />\n            {' - '}\n            <b>\n                <a onClick={onUpdate}>\n                    <FormattedMessage\n                        id='marketplace_modal.list.update'\n                        defaultMessage='Update'\n                    />\n                </a>\n            </b>\n        </div>\n    );\n};\n\nexport type UpdateConfirmationModalProps = {\n    show: boolean;\n    name: string;\n    version: string;\n    releaseNotesUrl?: string;\n    installedVersion?: string;\n    onUpdate: (checked: boolean) => void;\n    onCancel: (checked: boolean) => void;\n};\n\n// UpdateConfirmationModal prompts before allowing upgrade, specially handling major version changes.\nexport const UpdateConfirmationModal = ({show, name, version, installedVersion, releaseNotesUrl, onUpdate, onCancel}: UpdateConfirmationModalProps): JSX.Element | null => {\n    if (!installedVersion) {\n        return null;\n    }\n\n    let isUpdate = false;\n    try {\n        isUpdate = semver.gt(version, installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume not an update;\n    }\n\n    if (!isUpdate) {\n        return null;\n    }\n\n    const messages = [(\n        <p key='intro'>\n            <FormattedMessage\n                id='marketplace_modal.list.update_confirmation.message.intro'\n                defaultMessage={`Are you sure you want to update the ${name} plugin to ${version}?`}\n                values={{name, version}}\n            />\n        </p>\n    )];\n\n    if (releaseNotesUrl) {\n        messages.push(\n            <p key='current'>\n                <FormattedMarkdownMessage\n                    id='marketplace_modal.list.update_confirmation.message.current_with_release_notes'\n                    defaultMessage='You currently have {installedVersion} installed. View the [release notes](!{releaseNotesUrl}) to learn about the changes included in this update.'\n                    values={{installedVersion, releaseNotesUrl}}\n                />\n            </p>,\n        );\n    } else {\n        messages.push(\n            <p key='current'>\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.message.current'\n                    defaultMessage={`You currently have ${installedVersion} installed.`}\n                    values={{installedVersion}}\n                />\n            </p>,\n        );\n    }\n\n    let sameMajorVersion = false;\n    try {\n        sameMajorVersion = semver.major(version) === semver.major(installedVersion);\n    } catch (e) {\n        // If we fail to parse the version, assume a potentially breaking change.\n        // In practice, this won't happen since we already tried to parse the version above.\n    }\n\n    if (!sameMajorVersion) {\n        if (releaseNotesUrl) {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedMarkdownMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version_with_release_notes'\n                        defaultMessage='This update may contain breaking changes. Consult the [release notes](!{releaseNotesUrl}) before upgrading.'\n                        values={{releaseNotesUrl}}\n                    />\n                </p>,\n            );\n        } else {\n            messages.push(\n                <p\n                    className='alert alert-warning'\n                    key='warning'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.list.update_confirmation.message.warning_major_version'\n                        defaultMessage={'This update may contain breaking changes.'}\n                    />\n                </p>,\n            );\n        }\n    }\n\n    return (\n        <ConfirmModal\n            show={show}\n            title={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.title'\n                    defaultMessage={'Confirm Plugin Update'}\n                />\n            }\n            message={messages}\n            confirmButtonText={\n                <FormattedMessage\n                    id='marketplace_modal.list.update_confirmation.confirm_button'\n                    defaultMessage='Update'\n                />\n            }\n            onConfirm={onUpdate}\n            onCancel={onCancel}\n        />\n    );\n};\n\nexport type MarketplaceItemPluginProps = {\n    id: string;\n    name: string;\n    description?: string;\n    version: string;\n    homepageUrl?: string;\n    releaseNotesUrl?: string;\n    labels?: MarketplaceLabel[];\n    iconData?: string;\n    installedVersion?: string;\n    installing: boolean;\n    error?: string;\n    isDefaultMarketplace: boolean;\n    trackEvent: (category: string, event: string, props?: unknown) => void;\n\n    actions: {\n        installPlugin: (category: string, event: string) => void;\n        closeMarketplaceModal: () => void;\n    };\n};\n\ntype MarketplaceItemState = {\n    showUpdateConfirmationModal: boolean;\n};\n\nexport default class MarketplaceItemPlugin extends React.PureComponent <MarketplaceItemPluginProps, MarketplaceItemState> {\n    constructor(props: MarketplaceItemPluginProps) {\n        super(props);\n\n        this.state = {\n            showUpdateConfirmationModal: false,\n        };\n    }\n\n    trackEvent = (eventName: string, allowDetail = true): void => {\n        if (this.props.isDefaultMarketplace && allowDetail) {\n            this.props.trackEvent('plugins', eventName, {\n                plugin_id: this.props.id,\n                version: this.props.version,\n                installed_version: this.props.installedVersion,\n            });\n        } else {\n            this.props.trackEvent('plugins', eventName);\n        }\n    }\n\n    showUpdateConfirmationModal = (): void => {\n        this.setState({showUpdateConfirmationModal: true});\n    }\n\n    hideUpdateConfirmationModal = (): void => {\n        this.setState({showUpdateConfirmationModal: false});\n    }\n\n    onInstall = (): void => {\n        this.trackEvent('ui_marketplace_download');\n        this.props.actions.installPlugin(this.props.id, this.props.version);\n    }\n\n    onConfigure = (): void => {\n        this.trackEvent('ui_marketplace_configure', false);\n\n        this.props.actions.closeMarketplaceModal();\n    }\n\n    onUpdate = (): void => {\n        this.trackEvent('ui_marketplace_download_update');\n\n        this.hideUpdateConfirmationModal();\n        this.props.actions.installPlugin(this.props.id, this.props.version);\n    }\n\n    getItemButton(): JSX.Element {\n        if (this.props.installedVersion !== '' && !this.props.installing && !this.props.error) {\n            return (\n                <Link\n                    to={'/admin_console/plugins/plugin_' + this.props.id}\n                >\n                    <button\n                        onClick={this.onConfigure}\n                        className='btn btn-outline'\n                    >\n                        <FormattedMessage\n                            id='marketplace_modal.list.configure'\n                            defaultMessage='Configure'\n                        />\n                    </button>\n                </Link>\n            );\n        }\n\n        let actionButton: JSX.Element;\n        if (this.props.error) {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.try_again'\n                    defaultMessage='Try Again'\n                />\n            );\n        } else {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.install'\n                    defaultMessage='Install'\n                />\n            );\n        }\n\n        return (\n            <button\n                onClick={this.onInstall}\n                className='btn btn-primary'\n                disabled={this.props.installing}\n            >\n                <LoadingWrapper\n                    loading={this.props.installing}\n                    text={localizeMessage('marketplace_modal.installing', 'Installing...')}\n                >\n                    {actionButton}\n                </LoadingWrapper>\n\n            </button>\n        );\n    }\n\n    render(): JSX.Element {\n        let version = `(${this.props.version})`;\n        if (this.props.installedVersion !== '') {\n            version = `(${this.props.installedVersion})`;\n        }\n\n        const versionLabel = <span className='light subtitle'>{version}</span>;\n\n        const updateDetails = (\n            <UpdateDetails\n                version={this.props.version}\n                installedVersion={this.props.installedVersion}\n                releaseNotesUrl={this.props.releaseNotesUrl}\n                isInstalling={this.props.installing}\n                onUpdate={this.showUpdateConfirmationModal}\n            />\n        );\n\n        return (\n            <>\n                <MarketplaceItem\n                    button={this.getItemButton()}\n                    versionLabel={versionLabel}\n                    updateDetails={updateDetails}\n                    iconSource={this.props.iconData}\n                    {...this.props}\n                />\n                <UpdateConfirmationModal\n                    show={this.state.showUpdateConfirmationModal}\n                    name={this.props.name}\n                    version={this.props.version}\n                    installedVersion={this.props.installedVersion}\n                    releaseNotesUrl={this.props.releaseNotesUrl}\n                    onUpdate={this.onUpdate}\n                    onCancel={this.hideUpdateConfirmationModal}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {installPlugin} from 'actions/marketplace';\nimport {closeModal} from 'actions/views/modals';\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getInstalling, getError} from 'selectors/views/marketplace';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport MarketplaceItemPlugin, {MarketplaceItemPluginProps} from './marketplace_item_plugin';\n\ntype Props = {\n    id: string;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const installing = getInstalling(state, props.id);\n    const error = getError(state, props.id);\n    const isDefaultMarketplace = getConfig(state).IsDefaultMarketplace === 'true';\n\n    return {\n        installing,\n        error,\n        isDefaultMarketplace,\n        trackEvent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject, MarketplaceItemPluginProps['actions']>({\n            installPlugin,\n            closeMarketplaceModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceItemPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport type {MarketplaceLabel} from 'mattermost-redux/types/marketplace';\n\nimport MarketplaceItem from '../marketplace_item';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {localizeMessage} from 'utils/utils';\n\nexport type MarketplaceItemAppProps = {\n    id: string;\n    name: string;\n    description?: string;\n    homepageUrl?: string;\n    iconURL?: string;\n\n    installed: boolean;\n    labels?: MarketplaceLabel[];\n\n    installing: boolean;\n    error?: string;\n\n    trackEvent: (category: string, event: string, props?: unknown) => void;\n\n    actions: {\n        installApp: (id: string) => Promise<boolean>;\n        closeMarketplaceModal: () => void;\n    };\n};\n\nexport default class MarketplaceItemApp extends React.PureComponent <MarketplaceItemAppProps> {\n    onInstall = (): void => {\n        this.props.trackEvent('plugins', 'ui_marketplace_install_app', {\n            app_id: this.props.id,\n        });\n\n        this.props.actions.installApp(this.props.id).then((res) => {\n            if (res) {\n                this.props.actions.closeMarketplaceModal();\n            }\n        });\n    }\n\n    getItemButton(): JSX.Element {\n        if (this.props.installed && !this.props.installing && !this.props.error) {\n            return (\n                <button\n                    className='btn btn-outline'\n                    disabled={true}\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.list.installed'\n                        defaultMessage='Installed'\n                    />\n                </button>\n            );\n        }\n\n        let actionButton: JSX.Element;\n        if (this.props.error) {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.try_again'\n                    defaultMessage='Try Again'\n                />\n            );\n        } else {\n            actionButton = (\n                <FormattedMessage\n                    id='marketplace_modal.list.install'\n                    defaultMessage='Install'\n                />\n            );\n        }\n\n        return (\n            <button\n                onClick={this.onInstall}\n                className='btn btn-primary'\n                disabled={this.props.installing}\n            >\n                <LoadingWrapper\n                    loading={this.props.installing}\n                    text={localizeMessage('marketplace_modal.installing', 'Installing...')}\n                >\n                    {actionButton}\n                </LoadingWrapper>\n\n            </button>\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <>\n                <MarketplaceItem\n                    button={this.getItemButton()}\n                    updateDetails={null}\n                    versionLabel={null}\n                    iconSource={this.props.iconURL}\n                    {...this.props}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {installApp} from 'actions/marketplace';\nimport {closeModal} from 'actions/views/modals';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {getInstalling, getError} from 'selectors/views/marketplace';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport MarketplaceItemApp, {MarketplaceItemAppProps} from './marketplace_item_app';\n\ntype Props = {\n    id: string;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const installing = getInstalling(state, props.id);\n    const error = getError(state, props.id);\n\n    return {\n        installing,\n        error,\n        trackEvent,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject, MarketplaceItemAppProps['actions']>({\n            installApp,\n            closeMarketplaceModal: () => closeModal(ModalIdentifiers.PLUGIN_MARKETPLACE),\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MarketplaceItemApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype NavigationButtonProps = {\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    messageId: string;\n    defaultMessage: string;\n};\n\nexport default class NavigationButton extends React.PureComponent <NavigationButtonProps> {\n    onClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        event.preventDefault();\n        this.props.onClick(event);\n    };\n\n    render(): JSX.Element {\n        const {onClick, messageId, defaultMessage} = this.props;\n        return (\n            <button\n                className='btn btn-link'\n                onClick={onClick}\n            >\n                <FormattedMessage\n                    id={messageId}\n                    defaultMessage={defaultMessage}\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {changeOpacity, makeStyleFromTheme} from 'mattermost-redux/utils/theme_utils';\nimport {Theme} from 'mattermost-redux/types/themes';\n\nimport NavigationButton from './navigation_button';\n\nexport type NavigationRowProps = {\n    page: number;\n    total: number;\n    maximumPerPage: number;\n    onNextPageButtonClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onPreviousPageButtonClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    theme: Theme;\n};\n\nexport default class NavigationRow extends React.PureComponent <NavigationRowProps> {\n    canShowNextButton = (): boolean => {\n        const {page, maximumPerPage, total} = this.props;\n        const totalPages = Math.trunc((total - 1) / maximumPerPage);\n\n        return totalPages > page;\n    };\n\n    renderCount = (): JSX.Element => {\n        const {page, total, maximumPerPage} = this.props;\n        const startCount = page * maximumPerPage;\n        const endCount = Math.min(startCount + maximumPerPage, total);\n\n        return (\n            <FormattedMessage\n                id='marketplace_list.count_total_page'\n                defaultMessage='{startCount, number} - {endCount, number} {total, plural, one {plugin} other {plugins}} of {total, number} total'\n                values={{\n                    startCount: startCount + 1,\n                    endCount,\n                    total,\n                }}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        const style = getStyle(this.props.theme);\n\n        return (\n            <div className='navigation-row'>\n                <div className='col-xs-2'>\n                    {(this.props.page > 0) && (\n                        <NavigationButton\n                            onClick={this.props.onPreviousPageButtonClick}\n                            messageId={'more_channels.prev'}\n                            defaultMessage={'Previous'}\n                        />\n                    )}\n                </div>\n                <div\n                    className='col-xs-8 count'\n                    style={style.count}\n                >\n                    {this.renderCount()}\n                </div>\n                <div className='col-xs-2'>\n                    {this.canShowNextButton() && (\n                        <NavigationButton\n                            onClick={this.props.onNextPageButtonClick}\n                            messageId={'more_channels.next'}\n                            defaultMessage={'Next'}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst getStyle = makeStyleFromTheme((theme) => {\n    return {\n        count: {\n            color: changeOpacity(theme.centerChannelColor, 0.6),\n        },\n    };\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport NavigationRow from './navigation_row';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        theme: getTheme(state),\n    };\n}\n\nexport default connect(mapStateToProps)(NavigationRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {MarketplaceApp, MarketplacePlugin} from 'mattermost-redux/types/marketplace';\nimport {isPlugin, getName} from 'mattermost-redux/utils/marketplace';\n\nimport MarketplaceItemPlugin from '../marketplace_item/marketplace_item_plugin';\nimport MarketplaceItemApp from '../marketplace_item/marketplace_item_app';\n\nimport NavigationRow from './navigation_row';\n\nconst ITEMS_PER_PAGE = 15;\n\ntype MarketplaceListProps = {\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n};\n\ntype MarketplaceListState = {\n    page: number;\n};\n\nexport default class MarketplaceList extends React.PureComponent <MarketplaceListProps, MarketplaceListState> {\n    static getDerivedStateFromProps(props: MarketplaceListProps, state: MarketplaceListState): MarketplaceListState | null {\n        if (state.page > 0 && props.listing.length < ITEMS_PER_PAGE) {\n            return {page: 0};\n        }\n\n        return null;\n    }\n\n    constructor(props: MarketplaceListProps) {\n        super(props);\n\n        this.state = {\n            page: 0,\n        };\n    }\n\n    nextPage = (): void => {\n        this.setState((state) => ({\n            page: state.page + 1,\n        }));\n    };\n\n    previousPage = (): void => {\n        this.setState((state) => ({\n            page: state.page - 1,\n        }));\n    };\n\n    render(): JSX.Element {\n        const pageStart = this.state.page * ITEMS_PER_PAGE;\n        const pageEnd = pageStart + ITEMS_PER_PAGE;\n\n        this.props.listing.sort((a, b) => {\n            return getName(a).localeCompare(getName(b));\n        });\n\n        const itemsToDisplay = this.props.listing.slice(pageStart, pageEnd);\n\n        return (\n            <div className='more-modal__list'>\n                {itemsToDisplay.map((i) => {\n                    if (isPlugin(i)) {\n                        return (\n                            <MarketplaceItemPlugin\n                                key={i.manifest.id}\n                                id={i.manifest.id}\n                                name={i.manifest.name}\n                                description={i.manifest.description}\n                                version={i.manifest.version}\n                                homepageUrl={i.homepage_url}\n                                releaseNotesUrl={i.release_notes_url}\n                                labels={i.labels}\n                                iconData={i.icon_data}\n                                installedVersion={i.installed_version}\n                            />\n                        );\n                    }\n\n                    return (\n                        <MarketplaceItemApp\n                            key={i.manifest.app_id}\n                            id={i.manifest.app_id}\n                            name={i.manifest.display_name}\n                            description={i.manifest.description}\n                            homepageUrl={i.manifest.homepage_url}\n                            iconURL={i.icon_url}\n                            installed={i.installed}\n                            labels={i.labels}\n                        />\n                    );\n                })\n                }\n                <NavigationRow\n                    page={this.state.page}\n                    total={this.props.listing.length}\n                    maximumPerPage={ITEMS_PER_PAGE}\n                    onNextPageButtonClick={this.nextPage}\n                    onPreviousPageButtonClick={this.previousPage}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport {Tabs, Tab, SelectCallback} from 'react-bootstrap';\n\nimport {PluginStatusRedux} from 'mattermost-redux/types/plugins';\nimport type {MarketplaceApp, MarketplacePlugin} from 'mattermost-redux/types/marketplace';\n\nimport FullScreenModal from 'components/widgets/modals/full_screen_modal';\nimport RootPortal from 'components/root_portal';\nimport QuickInput from 'components/quick_input';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport PluginIcon from 'components/widgets/icons/plugin_icon';\nimport LoadingScreen from 'components/loading_screen';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {t} from 'utils/i18n';\nimport {localizeMessage} from 'utils/utils';\n\nimport './marketplace_modal.scss';\nimport MarketplaceList from './marketplace_list/marketplace_list';\n\nconst MarketplaceTabs = {\n    ALL_LISTING: 'allListing',\n    INSTALLED_LISTING: 'installed',\n};\n\nconst SEARCH_TIMEOUT_MILLISECONDS = 200;\n\ntype AllListingProps = {\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n};\n\n// AllListing renders the contents of the all listing tab.\nexport const AllListing = ({listing}: AllListingProps): JSX.Element => {\n    if (listing.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='mt-3 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins'\n                        defaultMessage='There are no plugins available at this time.'\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return <MarketplaceList listing={listing}/>;\n};\n\ntype InstalledListingProps = {\n    installedItems: Array<MarketplacePlugin | MarketplaceApp>;\n    changeTab: SelectCallback;\n};\n\n// InstalledListing renders the contents of the installed listing tab.\nexport const InstalledListing = ({installedItems, changeTab}: InstalledListingProps): JSX.Element => {\n    if (installedItems.length === 0) {\n        return (\n            <div className='no_plugins_div'>\n                <br/>\n                <PluginIcon className='icon__plugin'/>\n                <div className='mt-3 light'>\n                    <FormattedMessage\n                        id='marketplace_modal.no_plugins_installed'\n                        defaultMessage='You do not have any plugins installed.'\n                    />\n                </div>\n                <button\n                    className='mt-5 style--none color--link'\n                    onClick={() => changeTab(MarketplaceTabs.ALL_LISTING)}\n                    data-testid='Install-Plugins-button'\n                >\n                    <FormattedMessage\n                        id='marketplace_modal.install_plugins'\n                        defaultMessage='Install Plugins'\n                    />\n                </button>\n            </div>\n        );\n    }\n\n    return <MarketplaceList listing={installedItems}/>;\n};\n\nexport type MarketplaceModalProps = {\n    show: boolean;\n    listing: Array<MarketplacePlugin | MarketplaceApp>;\n    installedListing: Array<MarketplacePlugin | MarketplaceApp>;\n    siteURL: string;\n    pluginStatuses?: Record<string, PluginStatusRedux>;\n    firstAdminVisitMarketplaceStatus: boolean;\n    actions: {\n        closeModal: () => void;\n        fetchListing(localOnly?: boolean): Promise<{error?: Error}>;\n        filterListing(filter: string): Promise<{error?: Error}>;\n        setFirstAdminVisitMarketplaceStatus: () => void;\n    };\n};\n\ntype MarketplaceModalState = {\n    tabKey: unknown;\n    loading: boolean;\n    serverError?: Error;\n    filter: string;\n};\n\n// MarketplaceModal is the marketplace modal.\nexport default class MarketplaceModal extends React.PureComponent<MarketplaceModalProps, MarketplaceModalState> {\n    private filterRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: MarketplaceModalProps) {\n        super(props);\n\n        this.state = {\n            tabKey: MarketplaceTabs.ALL_LISTING,\n            loading: true,\n            serverError: undefined,\n            filter: '',\n        };\n\n        this.filterRef = React.createRef();\n    }\n\n    componentDidMount(): void {\n        trackEvent('plugins', 'ui_marketplace_opened');\n\n        this.fetchListing();\n        if (!this.props.firstAdminVisitMarketplaceStatus) {\n            trackEvent('plugins', 'ui_first_admin_visit_marketplace_status');\n\n            this.props.actions.setFirstAdminVisitMarketplaceStatus();\n        }\n\n        this.filterRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: MarketplaceModalProps): void {\n        // Automatically refresh the component when a plugin is installed or uninstalled.\n        if (this.props.pluginStatuses !== prevProps.pluginStatuses) {\n            this.fetchListing();\n        }\n    }\n\n    fetchListing = async (): Promise<void> => {\n        const {error} = await this.props.actions.fetchListing();\n        this.setState({loading: false, serverError: error});\n    }\n\n    close = (): void => {\n        trackEvent('plugins', 'ui_marketplace_closed');\n        this.props.actions.closeModal();\n    }\n\n    changeTab: SelectCallback = (tabKey: any): void => {\n        this.setState({tabKey});\n    }\n\n    onInput = (): void => {\n        if (this.filterRef.current) {\n            this.setState({filter: this.filterRef.current.value});\n\n            this.debouncedSearch();\n        }\n    }\n\n    handleClearSearch = (): void => {\n        if (this.filterRef.current) {\n            this.filterRef.current.value = '';\n            this.setState({filter: this.filterRef.current.value}, this.doSearch);\n        }\n    }\n\n    doSearch = async (): Promise<void> => {\n        trackEvent('plugins', 'ui_marketplace_search', {filter: this.state.filter});\n\n        const {error} = await this.props.actions.filterListing(this.state.filter);\n\n        this.setState({serverError: error});\n    }\n\n    debouncedSearch = debounce(this.doSearch, SEARCH_TIMEOUT_MILLISECONDS);\n\n    render(): JSX.Element {\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <div className='col-sm-12'>\n                    <QuickInput\n                        id='searchMarketplaceTextbox'\n                        ref={this.filterRef}\n                        className='form-control filter-textbox search_input'\n                        placeholder={{id: t('marketplace_modal.search'), defaultMessage: 'Search Marketplace'}}\n                        inputComponent={LocalizedInput}\n                        onInput={this.onInput}\n                        value={this.state.filter}\n                        clearable={true}\n                        onClear={this.handleClearSearch}\n                    />\n                </div>\n            </div>\n        );\n\n        let errorBanner = null;\n        if (this.state.serverError) {\n            errorBanner = (\n                <div\n                    className='error-bar'\n                    id='error_bar'\n                >\n                    <div className='error-bar__content'>\n                        <FormattedMarkdownMessage\n                            id='app.plugin.marketplace_plugins.app_error'\n                            defaultMessage='Error connecting to the marketplace server. Please check your settings in the [System Console]({siteURL}/admin_console/plugins/plugin_management).'\n                            values={{siteURL: this.props.siteURL}}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <RootPortal>\n                <FullScreenModal\n                    show={this.props.show}\n                    onClose={this.close}\n                    ariaLabel={localizeMessage('marketplace_modal.title', 'Marketplace')}\n                >\n                    {errorBanner}\n                    <div\n                        className='modal-marketplace'\n                        id='modal_marketplace'\n                    >\n                        <h1>\n                            <strong>\n                                <FormattedMessage\n                                    id='marketplace_modal.title'\n                                    defaultMessage='Marketplace'\n                                />\n                            </strong>\n                        </h1>\n                        {input}\n                        <Tabs\n                            id='marketplaceTabs'\n                            className='tabs'\n                            defaultActiveKey={MarketplaceTabs.ALL_LISTING}\n                            activeKey={this.state.tabKey}\n                            onSelect={this.changeTab}\n                            unmountOnExit={true}\n                        >\n                            <Tab\n                                eventKey={MarketplaceTabs.ALL_LISTING}\n                                title={localizeMessage('marketplace_modal.tabs.all_listing', 'All')}\n                            >\n                                {this.state.loading ? <LoadingScreen/> : <AllListing listing={this.props.listing}/>}\n                            </Tab>\n                            <Tab\n                                eventKey={MarketplaceTabs.INSTALLED_LISTING}\n                                title={localizeMessage('marketplace_modal.tabs.installed_listing', 'Installed') + ` (${this.props.installedListing.length})`}\n                            >\n                                <InstalledListing\n                                    installedItems={this.props.installedListing}\n                                    changeTab={this.changeTab}\n                                />\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </FullScreenModal>\n            </RootPortal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function BackIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='24px'\n                height='24px'\n                viewBox='0 0 24 24'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n            >\n                <path d='M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z'/>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport {injectIntl} from 'react-intl';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\nimport BackIcon from 'components/widgets/icons/back_icon';\n\nimport './full_screen_modal.scss';\n\n// This must be on sync with the animation time in ./full_screen_modal.scss\nconst ANIMATION_DURATION = 100;\n\ntype Props = {\n    show: boolean;\n    onClose: () => void;\n    onGoBack?: () => void;\n    children: React.ReactNode;\n    ariaLabel?: string;\n    ariaLabelledBy?: string;\n    intl: any; // TODO This needs to be replaced with IntlShape once react-intl is upgraded\n};\n\nclass FullScreenModal extends React.PureComponent<Props> {\n    private modal = React.createRef<HTMLDivElement>();\n\n    public componentDidMount() {\n        document.addEventListener('keydown', this.handleKeypress);\n        document.addEventListener('focus', this.enforceFocus, true);\n        this.enforceFocus();\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeypress);\n        document.removeEventListener('focus', this.enforceFocus, true);\n    }\n\n    public enforceFocus = () => {\n        setTimeout(() => {\n            const currentActiveElement = document.activeElement;\n            if (this.modal && this.modal.current && !this.modal.current.contains(currentActiveElement)) {\n                this.modal.current.focus();\n            }\n        });\n    }\n\n    private handleKeypress = (e: KeyboardEvent) => {\n        if (e.key === 'Escape' && this.props.show) {\n            this.close();\n        }\n    }\n\n    private close = () => {\n        this.props.onClose();\n    }\n\n    public render() {\n        return (\n            <CSSTransition\n                in={this.props.show}\n                classNames='FullScreenModal'\n                mountOnEnter={true}\n                unmountOnExit={true}\n                timeout={ANIMATION_DURATION}\n                appear={true}\n            >\n                <>\n                    <div\n                        className='FullScreenModal'\n                        ref={this.modal}\n                        tabIndex={-1}\n                        aria-modal={true}\n                        aria-label={this.props.ariaLabel}\n                        aria-labelledby={this.props.ariaLabelledBy}\n                        role='dialog'\n                    >\n                        {this.props.onGoBack &&\n                            <button\n                                onClick={this.props.onGoBack}\n                                className='back'\n                                aria-label={this.props.intl.formatMessage({id: 'full_screen_modal.back', defaultMessage: 'Back'})}\n                            >\n                                <BackIcon id='backIcon'/>\n                            </button>}\n                        <button\n                            onClick={this.close}\n                            className='close-x'\n                            aria-label={this.props.intl.formatMessage({id: 'full_screen_modal.close', defaultMessage: 'Close'})}\n                        >\n                            <CloseIcon id='closeIcon'/>\n                        </button>\n                        {this.props.children}\n                    </div>\n                    <div\n                        tabIndex={0}\n                        style={{display: 'none'}}\n                    />\n                </>\n            </CSSTransition>\n        );\n    }\n}\n\nconst wrappedComponent = injectIntl(FullScreenModal, {forwardRef: true});\nwrappedComponent.displayName = 'injectIntl(FullScreenModal)';\nexport default wrappedComponent;\n"],"names":["Label","name","description","url","color","tag","className","style","backgroundColor","toUpperCase","label","delayShow","Constants","placement","overlay","id","toLowerCase","aria-label","target","rel","href","MarketplaceItem","React","render","icon","labels","this","props","iconSource","src","length","map","key","pluginDetailsInner","versionLabel","classNames","error_text","error","pluginDetails","homepageUrl","item_error","updateDetails","button","UpdateVersion","version","releaseNotesUrl","UpdateDetails","installedVersion","isInstalling","onUpdate","isUpdate","semver","e","defaultMessage","onClick","UpdateConfirmationModal","show","onCancel","messages","values","push","sameMajorVersion","title","message","confirmButtonText","onConfirm","MarketplaceItemPlugin","constructor","super","eventName","allowDetail","isDefaultMarketplace","trackEvent","plugin_id","installed_version","setState","showUpdateConfirmationModal","actions","installPlugin","closeMarketplaceModal","hideUpdateConfirmationModal","state","getItemButton","installing","Link","to","onConfigure","actionButton","onInstall","disabled","loading","text","localizeMessage","iconData","connect","getInstalling","getError","getConfig","IsDefaultMarketplace","dispatch","bindActionCreators","closeModal","ModalIdentifiers","MarketplaceItemApp","app_id","installApp","then","res","installed","iconURL","NavigationButton","event","preventDefault","messageId","NavigationRow","page","maximumPerPage","total","Math","trunc","startCount","endCount","min","getStyle","theme","onPreviousPageButtonClick","count","renderCount","canShowNextButton","onNextPageButtonClick","makeStyleFromTheme","changeOpacity","centerChannelColor","getTheme","MarketplaceList","listing","pageStart","pageEnd","sort","a","b","getName","localeCompare","itemsToDisplay","slice","i","isPlugin","manifest","homepage_url","release_notes_url","icon_data","display_name","icon_url","nextPage","previousPage","MarketplaceTabs","AllListing","InstalledListing","installedItems","changeTab","data-testid","MarketplaceModal","async","fetchListing","serverError","tabKey","filterRef","current","filter","value","debouncedSearch","doSearch","filterListing","debounce","undefined","componentDidMount","firstAdminVisitMarketplaceStatus","setFirstAdminVisitMarketplaceStatus","focus","componentDidUpdate","prevProps","pluginStatuses","input","ref","placeholder","t","inputComponent","LocalizedInput","onInput","clearable","onClear","handleClearSearch","errorBanner","siteURL","onClose","close","ariaLabel","Tabs","defaultActiveKey","activeKey","onSelect","unmountOnExit","Tab","eventKey","installedListing","BackIcon","formatMessage","useIntl","width","height","viewBox","role","d","FullScreenModal","setTimeout","currentActiveElement","document","activeElement","modal","contains","addEventListener","handleKeypress","enforceFocus","componentWillUnmount","removeEventListener","CSSTransition","in","mountOnEnter","timeout","appear","tabIndex","aria-modal","aria-labelledby","ariaLabelledBy","onGoBack","intl","children","display","wrappedComponent","injectIntl","forwardRef","displayName"],"sourceRoot":""}