{"version":3,"file":"433.18d653d13019e3d2e7ea.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/audit_table/audit_table.tsx","webpack://@mattermost/webapp/./components/audit_table/index.ts","webpack://@mattermost/webapp/./components/color_input.tsx","webpack://@mattermost/webapp/./components/widgets/icons/fa_warning_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, IntlShape} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\nimport {Audit} from 'mattermost-redux/types/audits';\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport {t} from 'utils/i18n';\nimport {toTitleCase} from 'utils/utils';\nimport {isSystemAdmin} from 'mattermost-redux/utils/user_utils';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\ntype Props = {\n    intl: IntlShape;\n    audits: Audit[];\n    showUserId?: boolean;\n    showIp?: boolean;\n    showSession?: boolean;\n    currentUser: UserProfile;\n    getUser: (userId: string) => UserProfile;\n    getByName: (channelURL: string) => Channel | null | undefined;\n    actions: {\n        getMissingProfilesByIds: (userIds: string[]) => ActionFunc;\n    };\n    getDirectTeammate: (channelId: string) => any;\n};\n\ntype AuditInfo = {\n    userId: string;\n    desc: string;\n    ip: string;\n    sessionId: string;\n    timestamp: JSX.Element;\n};\n\nexport class AuditTable extends React.PureComponent<Props> {\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const {audits, showUserId, showIp, showSession} = this.props;\n        const accessList = [];\n\n        for (const [i, audit] of audits.entries()) {\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody data-testid='auditTableBody'>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit: Audit): AuditInfo {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                if (channelObj) {\n                    auditDesc = formatMessage(holders.establishedDM, {username: this.props.getDirectTeammate(channelObj.id).username});\n                }\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        const profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(holders.oauthTokenFailed, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        const userId = auditProfile ? auditProfile.email : audit.user_id;\n        const desc = auditDesc;\n        const ip = audit.ip_address;\n        const sessionId = audit.session_id;\n\n        return {\n            timestamp,\n            userId,\n            desc,\n            ip,\n            sessionId,\n        };\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName, getDirectTeammate} from 'mattermost-redux/selectors/entities/channels';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AuditTable from './audit_table';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId: string) => getUser(state, userId),\n        getByName: (channelName: string) => getChannelByName(state, channelName),\n        getDirectTeammate: (channelId: string) => getDirectTeammate(state, channelId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class WarningIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-warning' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.warning'), defaultMessage: 'Warning Icon'}}\n            />\n        );\n    }\n}\n"],"names":["holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","React","componentDidMount","ids","this","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","render","showUserId","showIp","showSession","accessList","i","entries","auditInfo","formatAuditInfo","uContent","iContent","sContent","className","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","ipContent","sessionContent","data-testid","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","FormattedDate","value","day","month","year","FormattedTime","hour","minute","auditProfile","ip_address","session_id","injectIntl","connect","state","getCurrentUser","getChannelByName","channelId","dispatch","bindActionCreators","ColorInput","constructor","super","e","colorPicker","current","contains","target","setState","isOpened","colorInput","focus","newColorData","onChange","hex","event","color","tinycolor","normalizedColor","toHex","isValid","focused","setSelectionRange","length","togglePicker","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","ref","type","onBlur","onFocus","onKeyDown","maxLength","disabled","isDisabled","onClick","style","backgroundColor","handleColorChange","disableAlpha","WarningIcon","additionalClassName","title"],"sourceRoot":""}