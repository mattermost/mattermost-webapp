{"version":3,"file":"195.48adf4f9a5e71c3cfd9b.js","mappings":"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","sources":["webpack://@mattermost/webapp/./actions/views/mfa.js","webpack://@mattermost/webapp/./components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://@mattermost/webapp/./components/user_settings/advanced/join_leave_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://@mattermost/webapp/./components/user_settings/advanced/performance_debugging_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/advanced/user_settings_advanced.jsx","webpack://@mattermost/webapp/./components/user_settings/advanced/index.js","webpack://@mattermost/webapp/./components/user_settings/import_theme_modal.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/color_chooser.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_theme/index.js","webpack://@mattermost/webapp/./components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://@mattermost/webapp/./components/user_settings/display/manage_timezones/index.ts","webpack://@mattermost/webapp/./components/user_settings/display/manage_languages/manage_languages.tsx","webpack://@mattermost/webapp/./components/user_settings/display/manage_languages/index.ts","webpack://@mattermost/webapp/./components/user_settings/display/user_settings_display.tsx","webpack://@mattermost/webapp/./components/user_settings/display/index.ts","webpack://@mattermost/webapp/./components/user_settings/general/user_settings_general.tsx","webpack://@mattermost/webapp/./components/user_settings/general/index.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/desktop_notification_settings.jsx","webpack://@mattermost/webapp/./packages/mattermost-redux/src/utils/notify_props.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://@mattermost/webapp/./components/user_settings/notifications/email_notification_setting/index.ts","webpack://@mattermost/webapp/./components/user_settings/notifications/manage_auto_responder.jsx","webpack://@mattermost/webapp/./components/user_settings/notifications/user_settings_notifications.jsx","webpack://@mattermost/webapp/./components/user_settings/notifications/index.js","webpack://@mattermost/webapp/./components/access_history_modal/access_history_modal.tsx","webpack://@mattermost/webapp/./components/access_history_modal/index.ts","webpack://@mattermost/webapp/./components/activity_log_modal/components/more_info.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/components/activity_log.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/activity_log_modal.tsx","webpack://@mattermost/webapp/./components/activity_log_modal/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/mfa_section/mfa_section.tsx","webpack://@mattermost/webapp/./components/user_settings/security/mfa_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://@mattermost/webapp/./components/user_settings/security/user_access_token_section/index.ts","webpack://@mattermost/webapp/./components/user_settings/security/user_settings_security.tsx","webpack://@mattermost/webapp/./components/user_settings/security/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/show_unreads_category/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://@mattermost/webapp/./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://@mattermost/webapp/./components/user_settings/sidebar/index.ts","webpack://@mattermost/webapp/./components/user_settings/user_settings.tsx","webpack://@mattermost/webapp/./components/user_settings/index.ts","webpack://@mattermost/webapp/./packages/mattermost-redux/src/actions/timezone.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\ntype Props = {\n    activeSection?: string;\n    currentUserId: string;\n    joinLeave?: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState?: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    public handleSubmit = (): void => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {GlobalState} from 'types/store/index.js';\n\nimport {GenericAction} from 'mattermost-redux/types/actions.js';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\ntype Props = PropsFromRedux & {\n    activeSection?: string;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = <PerformanceDebuggingSectionCollapsed {...props}/>;\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nfunction PerformanceDebuggingSectionCollapsed(props: Props) {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.currentUserId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0) {\n            props.savePreferences(props.currentUserId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.currentUserId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        isAdvancedTextEditorEnabled: PropTypes.bool,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const PreReleaseFeaturesLocal = JSON.parse(JSON.stringify(PreReleaseFeatures));\n        if (this.props.isAdvancedTextEditorEnabled) {\n            delete PreReleaseFeaturesLocal.MARKDOWN_PREVIEW;\n        }\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeaturesLocal);\n\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeaturesLocal[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeaturesLocal,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.props.isAdvancedTextEditorEnabled ? null : this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>,\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>,\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {feature} other {features}} enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    <PerformanceDebuggingSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                    />\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, getIsAdvancedTextEditorEnabled, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            isAdvancedTextEditorEnabled: getIsAdvancedTextEditorEnabled(state),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, WrappedComponentProps, injectIntl} from 'react-intl';\n\nimport {Theme} from 'mattermost-redux/types/themes';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\ninterface Props extends WrappedComponentProps {\n    callback: ((args: Theme) => void) | null;\n    onExited: () => void;\n}\n\ntype State = {\n    value: string;\n    inputError: React.ReactNode | null;\n    show: boolean;\n}\n\nclass ImportThemeModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: null,\n            show: true,\n        };\n    }\n\n    private handleOnHide = () => {\n        this.setState({show: false});\n    }\n\n    private handleSubmit = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!ImportThemeModal.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        /*\n         * index mapping of slack theme format (index => slack-property name)\n         *\n         * |-------|-------------------------|-------------------------|\n         * | index | Slack theme-property    | MM theme-property       |\n         * |-------|-------------------------|-------------------------|\n         * |   0   | Column BG               | sidebarBg               |\n         * |   1   | ???                     | sidebarHeaderBg         |\n         * |   2   | Active Item BG          | sidebarTextActiveBorder |\n         * |   3   | Active Item Text        | sidebarTextActiveColor  |\n         * |   4   | Hover Item BG           | sidebarTextHoverBg      |\n         * |   5   | Text Color              | sidebarText             |\n         * |   6   | Active Presence         | onlineIndicator         |\n         * |   7   | Mention Badge           | mentionBg               |\n         * |   8   | TOP-NAV BG              | --- (desktop only)      |\n         * |   9   | TOP-NAV Text            | --- (desktop only)      |\n         * |-------|-------------------------|-------------------------|\n         *\n         * values at index 8 + 9 are only for the desktop app\n         */\n\n        const [\n            sidebarBg, // 0\n            sidebarHeaderBg, // 1\n            sidebarTextActiveBorder, // 2\n            sidebarTextActiveColor, // 3\n            sidebarTextHoverBg, // 4\n            sidebarText, // 5\n            onlineIndicator, // 6\n            mentionBg, // 7\n        ] = text.split(',');\n\n        const theme = setThemeDefaults({\n            type: 'custom',\n            sidebarBg,\n            sidebarText,\n            sidebarUnreadText: sidebarText,\n            sidebarTextHoverBg,\n            sidebarTextActiveBorder,\n            sidebarTextActiveColor,\n            sidebarHeaderBg,\n            sidebarHeaderTextColor: sidebarText,\n            onlineIndicator,\n            mentionBg,\n        });\n\n        this.props.callback?.(theme as Theme);\n\n        this.handleOnHide();\n    }\n\n    private static isInputValid(text: string) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 10) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (ImportThemeModal.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    }\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    onExited={this.props.onExited}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Themes\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-link'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n\nexport default injectIntl(ImportThemeModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\n\nimport Constants from 'utils/constants';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: t('user.settings.custom_theme.sidebarTeamBarBg'),\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.PureComponent {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.sidebarStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.centerChannelStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        this.refs.linkAndButtonStylesHeader.classList.toggle('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = document.querySelector('.copy-theme-success');\n        copySuccess.style.display = 'inline-block';\n\n        setTimeout(() => {\n            copySuccess.style.display = 'none';\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport * as Utils from 'utils/utils';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\nexport default class PremadeThemeChooser extends React.PureComponent {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Preferences.THEMES) {\n            if (Preferences.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = Object.assign({}, Preferences.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <ThemeThumbnail\n                                    themeKey={k}\n                                    themeName={premadeTheme.type}\n                                    sidebarBg={premadeTheme.sidebarBg}\n                                    sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                    sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                    onlineIndicator={premadeTheme.onlineIndicator}\n                                    awayIndicator={premadeTheme.awayIndicator}\n                                    dndIndicator={premadeTheme.dndIndicator}\n                                    centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                    centerChannelBg={premadeTheme.centerChannelBg}\n                                    newMessageSeparator={premadeTheme.newMessageSeparator}\n                                    buttonBg={premadeTheme.buttonBg}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ImportThemeModal from 'components/user_settings/import_theme_modal.tsx';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\nexport default class ThemeSetting extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n            openModal: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.IMPORT_THEME_MODAL,\n            dialogType: ImportThemeModal,\n            dialogProps: {\n                callback: this.updateTheme,\n            },\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {openModal} from 'actions/views/modals';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {Timezone} from 'timezones.json';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    }\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            return {\n                value: timeObject.utc[0],\n                label: timeObject.text,\n            };\n        });\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n        const reactStyles = {\n\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        };\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    clearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {getTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport ManageTimezones from './manage_timezones';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\nfunction mapStateToProps(state: GlobalState) {\n    const currentUserId = getCurrentUserId(state);\n    const timezoneLabel = getTimezoneLabel(state, currentUserId);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect, {ValueType} from 'react-select';\n\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils';\nimport Constants from 'utils/constants';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    locale: string;\n    updateSection: (section: string) => void;\n    actions: Actions;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport default class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const locales: any = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: locales[userLocale].value,\n            label: locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).then((res) => {\n            if ('data' in res) {\n                // Do nothing since changing the locale essentially refreshes the page\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n        const locales: any = I18n.getLanguages();\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport ManageLanguages from './manage_languages';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateMe,\n        }, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Timezone} from 'timezones.json';\n\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\nimport {UserProfile, UserTimezone} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        id: string;\n        message: string;\n        moreId?: string;\n        moreMessage?: string;\n    };\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: {\n        id: string;\n        message: string;\n    };\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: {\n        id: string;\n        message: string;\n    };\n    disabled?: boolean;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal?: () => void;\n    collapseModal?: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    defaultClientLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    currentUserTimezone: string;\n    enableTimezone: boolean;\n    shouldAutoUpdateTimezone: boolean;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    }\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    }\n\n    handleOnChange(display: {[key: string]: any}) {\n        this.setState({...display});\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | null = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMarkdownMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.availabilityStatusOnPostsTitle'),\n                message: 'Show user availability on posts',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.availabilityStatusOnPostsDescription'),\n                message: 'When enabled, online availability is displayed on profile images in the message list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            describe={this.props.timezoneLabel}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: {\n                    id: t('user.settings.display.collapsedReplyThreadsTitle'),\n                    message: 'Collapsed Reply Threads',\n                },\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        id: t('user.settings.display.collapsedReplyThreadsOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.collapsedReplyThreadsDescription'),\n                    message: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                },\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: {\n                id: t('user.settings.display.clickToReply'),\n                message: 'Click to open threads',\n            },\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.on'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.sidebar.off'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.clickToReplyDescription'),\n                message: 'When enabled, click anywhere on a message to open the reply thread.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsTitle'),\n                    message: 'Quick reactions on messages',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.on'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.sidebar.off'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.oneClickReactionsOnPostsDescription'),\n                    message: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                },\n            });\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport timezones from 'timezones.json';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get, isCollapsedThreadsAllowed, getCollapsedThreadsPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTimezoneLabel, getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {GlobalState} from 'types/store';\nimport {Preferences} from 'utils/constants';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\n\nimport UserSettingsDisplay from './user_settings_display';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n    const timezoneLabel = getTimezoneLabel(state, currentUserId);\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale as string;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n    const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        timezoneLabel,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone) as string,\n        availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n        collapsedReplyThreads: getCollapsedThreadsPreference(state),\n        clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n        oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT),\n        emojiPickerEnabled,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: t('user.settings.general.usernameGroupNameUniqueness'),\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<{\n            data: boolean;\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<{\n            data: boolean;\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends React.Component<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe: JSX.Element|string = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e: MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        } else {\n            let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserSettingsGeneralTab, {Props} from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {isDesktopApp} from 'utils/user_agent';\n\nexport default class DesktopNotificationSettings extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        const selectedOption = {value: props.selectedSound, label: props.selectedSound};\n        this.state = {\n            selectedOption,\n            blurDropdown: false,\n        };\n        this.dropdownSoundRef = React.createRef();\n    }\n\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    handleThreadsOnChange = (e) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('desktopThreads', value);\n    }\n\n    setDesktopNotificationSound = (selectedOption) => {\n        this.props.setParentState('desktopNotificationSound', selectedOption.value);\n        this.setState({selectedOption});\n        Utils.tryNotificationSound(selectedOption.value);\n    }\n\n    blurDropdown() {\n        if (!this.state.blurDropdown) {\n            this.setState({blurDropdown: true});\n            if (this.dropdownSoundRef.current) {\n                this.dropdownSoundRef.current.blur();\n            }\n        }\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        let notificationSelection;\n        let threadsNotificationSelection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (this.props.sound === 'true') {\n                const sounds = Array.from(Utils.notificationSounds.keys());\n                const options = sounds.map((sound) => {\n                    return {value: sound, label: sound};\n                });\n\n                if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n                    notificationSelection = (<div className='pt-2'>\n                        <ReactSelect\n                            className='react-select notification-sound-dropdown'\n                            classNamePrefix='react-select'\n                            id='displaySoundNotification'\n                            options={options}\n                            clearable={false}\n                            onChange={this.setDesktopNotificationSound}\n                            value={this.state.selectedOption}\n                            isSearchable={false}\n                            ref={this.dropdownSoundRef}\n                        /></div>);\n                }\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        {notificationSelection}\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        if (this.props.isCollapsedThreadsEnabled && NotificationLevels.MENTION === this.props.activity) {\n            threadsNotificationSelection = (\n                <>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send a desktop notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                    <hr/>\n                </>\n            );\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {threadsNotificationSelection}\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    componentDidUpdate() {\n        this.blurDropdown();\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    threads: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n    selectedSound: PropTypes.string,\n    isCollapsedThreadsEnabled: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    currentUserId: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    enableEmail: boolean;\n    emailInterval: number;\n    onSubmit: () => void;\n    onCancel: () => void;\n    onChange: (enableEmail: string) => void;\n    serverError?: string;\n    saving?: boolean;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n        Promise<{data: boolean}>;\n    };\n    isCollapsedThreadsEnabled: boolean;\n    threads: string;\n    setParentState: (key: string, value: any) => void;\n};\n\ntype State = {\n    activeSection: string;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    }\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.threads.desktop'\n                                defaultMessage='Thread reply notifications'\n                            />\n                        </legend>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.threads.allActivity'\n                                    defaultMessage={'Notify me about threads I\\'m following'}\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email_threads'\n                                defaultMessage={'When enabled, any reply to a thread you\\'re following will send an email notification.'}\n                            />\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\ntype Actions = {\n    savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) =>\n    Promise<{data: boolean}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <textarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable max-lines */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport semver from 'semver';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {isDesktopApp} from 'utils/user_agent';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let desktopThreads = NotificationLevels.ALL;\n    let pushThreads = NotificationLevels.ALL;\n    let emailThreads = NotificationLevels.ALL;\n    let sound = 'true';\n    let desktopNotificationSound = 'Bing';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_threads) {\n            desktopThreads = user.notify_props.desktop_threads;\n        }\n        if (user.notify_props.push_threads) {\n            pushThreads = user.notify_props.push_threads;\n        }\n        if (user.notify_props.email_threads) {\n            emailThreads = user.notify_props.email_threads;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = user.notify_props.desktop_notification_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        desktopNotificationSound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n        isCollapsedThreadsEnabled: PropTypes.bool.isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n        this.customCheckRef = React.createRef();\n        this.customMentionsRef = React.createRef();\n        this.drawerRef = React.createRef();\n        this.wrapperRef = React.createRef();\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        if (!isDesktopApp() || (window.desktop && semver.gte(window.desktop.version, '4.6.0'))) {\n            data.desktop_notification_sound = this.state.desktopNotificationSound;\n        }\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_threads = this.state.pushThreads;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyPushThread = (e) => {\n        const pushThreads = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.setState({pushThreads});\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.customCheckRef.current.checked;\n\n        if (checked) {\n            const text = this.customMentionsRef.current.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.customCheckRef.current.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushThreadsNotificationSelection = null;\n                if (this.props.isCollapsedThreadsEnabled && this.state.pushActivity === NotificationLevels.MENTION) {\n                    pushThreadsNotificationSelection = (\n                        <React.Fragment key='userNotificationPushThreadsOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.threads.push'\n                                        defaultMessage='Thread reply notifications'\n                                    />\n                                </legend>\n                                <div className='checkbox'>\n                                    <label>\n                                        <input\n                                            id='pushThreadsNotificationAllActivity'\n                                            type='checkbox'\n                                            name='pushThreadsNotificationLevel'\n                                            checked={this.state.pushThreads === NotificationLevels.ALL}\n                                            onChange={this.handleNotifyPushThread}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.notifications.push_threads.allActivity'\n                                            defaultMessage={'Notify me about threads I\\'m following'}\n                                        />\n                                    </label>\n                                    <br/>\n                                </div>\n                                <div className='mt-5'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_threads'\n                                        defaultMessage={'When enabled, any reply to a thread you\\'re following will send a mobile push notification.'}\n                                    />\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <React.Fragment key='userNotificationPushStatusOptions'>\n                            <hr/>\n                            <fieldset>\n                                <legend className='form-legend'>\n                                    <FormattedMessage\n                                        id='user.settings.notifications.push_notification.status'\n                                        defaultMessage='Trigger push notifications when'\n                                    />\n                                </legend>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOnline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[0]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.online'\n                                            defaultMessage='Online, away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationAway'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[1]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.away'\n                                            defaultMessage='Away or offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='radio'>\n                                    <label>\n                                        <input\n                                            id='pushNotificationOffline'\n                                            type='radio'\n                                            name='pushNotificationStatus'\n                                            checked={pushStatusRadio[2]}\n                                            onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                        />\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.offline'\n                                            defaultMessage='Offline'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='mt-5'>\n                                    <span>\n                                        <FormattedMessage\n                                            id='user.settings.push_notification.status_info'\n                                            defaultMessage='Notification alerts are only pushed to your mobile device when your availability matches the selection above.'\n                                        />\n                                    </span>\n                                </div>\n                            </fieldset>\n                        </React.Fragment>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                    </div>,\n                    pushStatusSettings,\n                    pushThreadsNotificationSelection,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref={this.customCheckRef}\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref={this.customMentionsRef}\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref={this.drawerRef}\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref={this.wrapperRef}\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        threads={this.state.desktopThreads}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                        selectedSound={this.state.desktopNotificationSound}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        setParentState={this.setStateValue}\n                        threads={this.state.emailThreads}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            {commentsSection}\n                            <div className='divider-light'/>\n                        </>\n                    )}\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {Session} from 'mattermost-redux/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {General} from 'mattermost-redux/constants';\nimport {Session} from 'mattermost-redux/types/sessions';\n\nimport {localizeMessage} from 'utils/utils';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: string;\n    devicePlatform: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Session} from 'mattermost-redux/types/sessions';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => ActionFunc;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<{ data: boolean }>;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ActivityLogModal extends React.PureComponent<Props, State> {\n    static propTypes = {\n\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        const activityList = this.props.sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={this.props.locale}\n                    currentSession={currentSession}\n                    submitRevoke={this.submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n\n        const content = <form role='form'>{activityList}</form>;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\nimport {ActionFunc, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {GlobalState} from 'types/store';\n\nimport ActivityLogModal, {Props} from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc| GenericAction>, Props['actions']>({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<{\n            data: {token: string; description: string; id: string; is_active: boolean} | null;\n            error?: {\n                message: string;\n            };\n        }>;\n        revokeUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        enableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        disableUserAccessToken: (tokenId: string) => Promise<{\n            data: string;\n            error?: {\n                message: string;\n            };\n        }>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: {token: string; description: string; id: string; is_active: boolean} | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linktokens>Personal access tokens</linktokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linktokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://developers.mattermost.com/integrate/admin-guide/admin-personal-access-token/'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                            linkApi: (msg: React.ReactNode) => (\n                                <a\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    {msg}\n                                </a>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\ntype Actions = {\n    getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n    createUserAccessToken: (userId: string, description: string) => Promise<{\n        data: {token: string; description: string; id: string; is_active: boolean} | null;\n        error?: {\n            message: string;\n        };\n    }>;\n    revokeUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    enableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    disableUserAccessToken: (tokenId: string) => Promise<{\n        data: string;\n        error?: {\n            message: string;\n        };\n    }>;\n    clearUserAccessTokens: () => void;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\nimport {OAuthApp} from 'mattermost-redux/types/integrations';\n\nimport Constants from 'utils/constants';\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport LocalizedIcon from 'components/localized_icon';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableSignUpWithEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: ReturnType<typeof Utils.getPasswordConfig>;\n    militaryTime: boolean;\n    actions: Actions;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport default class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.currentPasswordError',\n                    'Please enter your current password.',\n                ),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: Utils.localizeMessage(\n                    'user.settings.security.passwordMatchError',\n                    'The new passwords you entered do not match.',\n                ),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.currentPassword',\n                                    'Current Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.newPassword',\n                                    'New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage(\n                                    'user.settings.security.retypePassword',\n                                    'Retype New Password',\n                                )}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage(\n                        'user.settings.security.method',\n                        'Sign-in Method',\n                    )}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.method',\n                    'Sign-in Method',\n                )}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage(\n                    'user.settings.security.oauthApps',\n                    'OAuth 2.0 Applications',\n                )}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={Utils.localizeMessage('user.settings.security.close', 'Close')}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                    >\n                        <div className='modal-back'>\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.viewHistory.icon'), defaultMessage: 'Access History Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <LocalizedIcon\n                            className='fa fa-clock-o'\n                            title={{id: t('user.settings.security.logoutActiveSessions.icon'), defaultMessage: 'Active Sessions Icon'}}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (userId: string, currentPassword: string, newPassword: string) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\ntype Props = {\n    active: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactSelect, {ValueType} from 'react-select';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {localizeMessage} from 'utils/utils';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\ntype Props = {\n    active: boolean;\n    currentUserId: string;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<{data: boolean}>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10000, label: localizeMessage('user.settings.sidebar.limitVisibleGMsDMs.allDirectMessages', 'All Direct Messages')},\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (selected: ValueType<Limit>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    }\n\n    handleSubmit = async () => {\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.currentUserId, [{\n            user_id: this.props.currentUserId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    }\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            clearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided: React.CSSProperties) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        dmGmLimit: getInt(state, Preferences.CATEGORY_SIDEBAR_SETTINGS, Preferences.LIMIT_VISIBLE_DMS_GMS, 20),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\nimport ShowUnreadsCategory from './show_unreads_category';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div>\n            <div className='modal-header'>\n                <button\n                    id='closeButton'\n                    type='button'\n                    className='close'\n                    data-dismiss='modal'\n                    aria-label='Close'\n                    onClick={props.closeModal}\n                >\n                    <span aria-hidden='true'>{'×'}</span>\n                </button>\n                <h4 className='modal-title'>\n                    <div\n                        className='modal-back'\n                        onClick={props.collapseModal}\n                    >\n                        <LocalizedIcon\n                            className='fa fa-angle-left'\n                            title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                        />\n                    </div>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h4>\n            </div>\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <h3 className='tab-header'>\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                </h3>\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n};\n\nexport default class UserSettings extends React.PureComponent<Props> {\n    render() {\n        if (this.props.activeTab === 'profile') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUer = getCurrentUser(getState());\n        const currentTimezone = getUserTimezone(getState(), currentUer.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUer,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n    };\n}\n"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","JoinLeaveSection","React","constructor","props","super","e","value","currentTarget","this","setState","joinLeaveState","section","joinLeave","onUpdateSection","actions","joinLeavePreference","category","Preferences","user_id","name","state","savePreferences","render","activeSection","AdvancedSections","title","id","defaultMessage","inputs","key","className","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","describe","renderOnOffLabel","connect","getPreference","bindActionCreators","PerformanceDebuggingSection","performanceDebuggingEnabled","settings","PerformanceDebuggingSectionExpanded","PerformanceDebuggingSectionCollapsed","description","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","values","count","setDisableClientPlugins","useState","setDisableTelemetry","setDisableTypingMessages","useCallback","preferences","push","toString","length","target","mapDispatchToProps","getBool","isPerformanceDebuggingEnabled","PreReleaseFeatures","Constants","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","PreReleaseFeaturesLocal","JSON","parse","stringify","isAdvancedTextEditorEnabled","MARKDOWN_PREVIEW","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","label","preReleaseFeatures","previewFeaturesEnabled","enablePreviewFeatures","showDeactivateAccountModal","String","forEach","lastIndexOf","features","async","currentUser","userId","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","default","t","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","saveEnabledFeatures","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","PropTypes","isRequired","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","getIsAdvancedTextEditorEnabled","get","getCurrentUser","ImportThemeModal","preventDefault","text","isInputValid","inputError","sidebarBg","sidebarHeaderBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarTextHoverBg","sidebarText","onlineIndicator","mentionBg","split","theme","setThemeDefaults","sidebarUnreadText","sidebarHeaderTextColor","callback","handleOnHide","indexOf","colors","i","charAt","Modal","dialogClassName","onHide","onExited","role","aria-labelledby","closeButton","componentClass","handleChange","injectIntl","ColorChooser","newColor","messages","defineMessages","sidebarTeamBarBg","awayIndicator","dndIndicator","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","color","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","err","stopPropagation","textarea","refs","focus","setSelectionRange","sidebarStylesHeader","classList","toggle","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","document","execCommand","showCopySuccess","copySuccess","querySelector","style","display","setTimeout","assign","image","node","ontransitionend","contains","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","onCodeThemeChange","placement","overlay","group","handleColorChange","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","ThemeThumbnail","themeName","themeKey","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","trim","k","premadeTheme","activeClass","replace","changeOpacity","propTypes","defaultProps","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","themeChanged","field","hasOwnProperty","openModal","modalId","ModalIdentifiers","dialogType","dialogProps","setEnforceFocus","componentDidUpdate","prevProps","selected","resetFields","componentWillUnmount","showAllTeamsCheckbox","updateType","displayCustom","custom","premade","themeUI","allowCustomThemes","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","getThemeCategory","getCurrentTeamId","getTheme","getMyTeamsCount","UserSettingsTheme","ManageTimezones","selectedOption","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","user","timezone","updatedUser","updateMe","res","Error","timezoneLabel","selectedOptionValue","getBrowserTimezone","getTimezoneLabel","timezones","openMenu","timeOptions","map","timeObject","utc","reactStyles","menuPortal","provided","zIndex","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","manualTimezoneInput","classNamePrefix","menuPortalTarget","body","styles","options","clearable","isDisabled","containerStyle","changeTimezone","ManageLanguage","modalBody","isKeyPressed","remove","add","locale","locales","I18n","userLocale","reactSelectContainer","componentDidMount","current","addEventListener","handleContainerKeyDown","removeEventListener","l","order","sort","a","b","lang","input","menuIsOpen","setLanguage","onKeyDown","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","deepEqual","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","trackEvent","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdSection","thirdDisplay","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","oneClickReactionsOnPostsSection","defaultClientLocale","enableThemeSelection","emojiPickerEnabled","currentUserTimezone","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","getUserCurrentTimezone","isCollapsedThreadsAllowed","CollapsedThreads","getCollapsedThreadsPreference","holders","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","UserSettingsGeneralTab","email","resendStatus","showSpinner","sendVerificationEmail","loading","handleEmailResend","toLowerCase","formatMessage","intl","usernameError","errObj","ValidationErrors","clientError","min","max","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","AnnouncementBarTypes","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","maxLength","updateConfirmEmail","updateCurrentPassword","submitEmail","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","onFocus","updateLastName","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","submitPosition","pictureSection","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","onSubmit","onSetDefault","defaultImageSrc","onFileChange","updatePicture","minMessage","date","FormattedDate","Date","day","month","year","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","NotificationLevels","activityRadio","soundSection","notificationSelection","threadsNotificationSelection","activity","soundRadio","sound","from","isDesktopApp","desktop","semver","version","setDesktopNotificationSound","isSearchable","dropdownSoundRef","data-key","data-value","isCollapsedThreadsEnabled","threads","handleThreadsOnChange","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","focused","handleMinUpdateSection","selectedSound","blurDropdown","blur","active","buildMaximizedSetting","buildMinimizedSetting","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","EmailNotificationSetting","enableEmail","newInterval","emailInterval","sendEmailNotifications","localizeMessage","batchingOptions","batchingInfo","data-enable-email","data-email-interval","nextProps","prevState","renderMinSettingView","renderMaxSettingView","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktopThreads","pushThreads","emailThreads","desktopNotificationSound","comments","pushActivity","pushStatus","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","desktop_notification_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customCheckRef","customMentionsRef","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","pushThreadsNotificationSelection","handleNotifyPushThread","handlePushStatusRadio","handlePushRadio","drawerRef","wrapperRef","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","substring","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","getUserAudits","onShow","content","userAudits","audits","showIp","showSession","bsSize","getCurrentUserAudits","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","create_at","getMonthLong","time","FormattedTime","hour","minute","os","browser","ActivityLog","submitRevoke","session","device_id","includes","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","activityList","sessions","reduce","array","getUserSessions","getCurrentLocale","MfaSection","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","linktokens","msg","linkAPI","linkTokens","linkApi","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","getMe","appId","deauthorizeOAuthApp","filter","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","ShowUnreadsCategory","showUnreadsCategory","data-testid","shouldShowUnreadsCategory","limits","LimitVisibleGMsDMs","limit","find","dmGmLimit","getInt","UserSettingsSidebar","UserSettings","deviceTimezone","currentUer","currentTimezone","newTimezoneExists"],"sourceRoot":""}