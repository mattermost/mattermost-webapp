{"version":3,"file":"422.e59f2e9d84ba91cfe2d8.js","mappings":"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","sources":["webpack://@mattermost/webapp/./images/deep-linking/deeplinking-desktop-img.png","webpack://@mattermost/webapp/./images/deep-linking/deeplinking-mobile-img.png","webpack://@mattermost/webapp/./images/logo.svg","webpack://@mattermost/webapp/./components/linking_landing_page/linking_landing_page.tsx","webpack://@mattermost/webapp/./components/linking_landing_page/index.tsx","webpack://@mattermost/webapp/./components/widgets/icons/checkbox_checked_icon.tsx"],"sourcesContent":["export default __webpack_public_path__ + \"files/34c82b247a366d047105491d979556bf.png\";","export default __webpack_public_path__ + \"files/9b0519e1f5fbf82b0548515994fd49d4.png\";","export default __webpack_public_path__ + \"files/17a50e2f200ecc8c4a58557603654d89.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport desktopImg from 'images/deep-linking/deeplinking-desktop-img.png';\nimport mobileImg from 'images/deep-linking/deeplinking-mobile-img.png';\nimport MattermostLogoSvg from 'images/logo.svg';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport BrowserStore from 'stores/browser_store';\nimport {LandingPreferenceTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport * as UserAgent from 'utils/user_agent';\n\ntype Props = {\n    defaultTheme: any;\n    desktopAppLink?: string;\n    iosAppLink?: string;\n    androidAppLink?: string;\n    siteUrl?: string;\n    siteName?: string;\n    brandImageUrl?: string;\n    enableCustomBrand: boolean;\n}\n\ntype State = {\n    rememberChecked: boolean;\n    redirectPage: boolean;\n    location: string;\n    nativeLocation: string;\n    brandImageError: boolean;\n    navigating: boolean;\n}\n\nexport default class LinkingLandingPage extends PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const location = window.location.href.replace('/landing#', '');\n\n        this.state = {\n            rememberChecked: false,\n            redirectPage: false,\n            location,\n            nativeLocation: location.replace(/^(https|http)/, 'mattermost'),\n            brandImageError: false,\n            navigating: false,\n        };\n\n        if (Utils.isMobile() && !BrowserStore.hasSeenLandingPage()) {\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    componentDidMount() {\n        Utils.applyTheme(this.props.defaultTheme);\n        if (this.checkLandingPreferenceApp()) {\n            this.openMattermostApp();\n        }\n\n        window.addEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    clearLandingPreferenceIfNotChecked = () => {\n        if (!this.state.navigating && !this.state.rememberChecked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n    }\n\n    checkLandingPreferenceBrowser = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.BROWSER;\n    }\n\n    checkLandingPreferenceApp = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.MATTERMOSTAPP;\n    }\n\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.state.rememberChecked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n        this.setState({rememberChecked: !this.state.rememberChecked});\n    }\n\n    setPreference = (pref: string, clearIfNotChecked?: boolean) => {\n        if (!this.state.rememberChecked) {\n            if (clearIfNotChecked) {\n                BrowserStore.clearLandingPreference(this.props.siteUrl);\n            }\n            return;\n        }\n\n        switch (pref) {\n        case LandingPreferenceTypes.MATTERMOSTAPP:\n            BrowserStore.setLandingPreferenceToMattermostApp(this.props.siteUrl);\n            break;\n        case LandingPreferenceTypes.BROWSER:\n            BrowserStore.setLandingPreferenceToBrowser(this.props.siteUrl);\n            break;\n        default:\n            break;\n        }\n    }\n\n    openMattermostApp = () => {\n        this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP);\n        this.setState({redirectPage: true});\n        window.location.href = this.state.nativeLocation;\n    }\n\n    openInBrowser = () => {\n        this.setPreference(LandingPreferenceTypes.BROWSER);\n        window.location.href = this.state.location;\n    }\n\n    renderSystemDialogMessage = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.systemDialogMessageMobile'\n                    defaultMessage='View in App'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.systemDialogMessage'\n                defaultMessage='View in Desktop App'\n            />\n        );\n    }\n\n    renderGoNativeAppMessage = () => {\n        return (\n            <a\n                href={Utils.isMobile() ? '#' : this.state.nativeLocation}\n                onMouseDown={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                }}\n                onClick={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                    this.setState({redirectPage: true, navigating: true});\n                    if (Utils.isMobile()) {\n                        if (UserAgent.isAndroidWeb()) {\n                            const timeout = setTimeout(() => {\n                                window.location.replace(this.getDownloadLink()!);\n                            }, 2000);\n                            window.addEventListener('blur', () => {\n                                clearTimeout(timeout);\n                            });\n                        }\n                        window.location.replace(this.state.nativeLocation);\n                    }\n                }}\n                className='btn btn-primary btn-lg get-app__download'\n            >\n                {this.renderSystemDialogMessage()}\n            </a>\n        );\n    }\n\n    getDownloadLink = () => {\n        if (UserAgent.isIosWeb()) {\n            return this.props.iosAppLink;\n        } else if (UserAgent.isAndroidWeb()) {\n            return this.props.androidAppLink;\n        }\n\n        return this.props.desktopAppLink;\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    renderCheckboxIcon = () => {\n        if (this.state.rememberChecked) {\n            return (\n                <CheckboxCheckedIcon/>\n            );\n        }\n\n        return null;\n    }\n\n    renderGraphic = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <img src={mobileImg}/>\n            );\n        }\n\n        return (\n            <img src={desktopImg}/>\n        );\n    }\n\n    renderDownloadLinkText = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.dontHaveTheMobileApp'\n                    defaultMessage={'Don\\'t have the Mobile App?'}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.dontHaveTheDesktopApp'\n                defaultMessage={'Don\\'t have the Desktop App?'}\n            />\n        );\n    }\n\n    renderDownloadLinkSection = () => {\n        const downloadLink = this.getDownloadLink();\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__download-link'>\n                    <FormattedMarkdownMessage\n                        id='get_app.openLinkInBrowser'\n                        defaultMessage='Or, [open this link in your browser.](!{link})'\n                        values={{\n                            link: this.state.location,\n                        }}\n                    />\n                </div>\n            );\n        } else if (downloadLink) {\n            return (\n                <div className='get-app__download-link'>\n                    {this.renderDownloadLinkText()}\n                    {'\\u00A0'}\n                    <br/>\n                    <a href={downloadLink}>\n                        <FormattedMessage\n                            id='get_app.downloadTheAppNow'\n                            defaultMessage='Download the app now.'\n                        />\n                    </a>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    renderDialogHeader = () => {\n        const downloadLink = this.getDownloadLink();\n        const isMobile = UserAgent.isMobile();\n\n        let openingLink = (\n            <FormattedMessage\n                id='get_app.openingLink'\n                defaultMessage='Opening link in Mattermost...'\n            />\n        );\n        if (this.props.enableCustomBrand) {\n            openingLink = (\n                <FormattedMessage\n                    id='get_app.openingLinkWhiteLabel'\n                    defaultMessage='Opening link in {appName}...'\n                    values={{\n                        appName: this.props.siteName || 'Mattermost',\n                    }}\n                />\n            );\n        }\n\n        if (this.state.redirectPage) {\n            return (\n                <h1 className='get-app__launching'>\n                    {openingLink}\n                    <div className={`get-app__alternative${this.state.redirectPage ? ' redirect-page' : ''}`}>\n                        <FormattedMessage\n                            id='get_app.redirectedInMoments'\n                            defaultMessage='You will be redirected in a few moments.'\n                        />\n                        <br/>\n                        {this.renderDownloadLinkText()}\n                        {'\\u00A0'}\n                        <br className='mobile-only'/>\n                        <a href={downloadLink}>\n                            <FormattedMessage\n                                id='get_app.downloadTheAppNow'\n                                defaultMessage='Download the app now.'\n                            />\n                        </a>\n                    </div>\n                </h1>\n            );\n        }\n\n        let viewApp = (\n            <FormattedMessage\n                id='get_app.ifNothingPrompts'\n                defaultMessage='You can view {siteName} in the desktop app or continue in your web browser.'\n                values={{\n                    siteName: this.props.enableCustomBrand ? '' : ' Mattermost',\n                }}\n            />\n        );\n        if (isMobile) {\n            viewApp = (\n                <FormattedMessage\n                    id='get_app.ifNothingPromptsMobile'\n                    defaultMessage='You can view {siteName} in the mobile app or continue in your web browser.'\n                    values={{\n                        siteName: this.props.enableCustomBrand ? '' : ' Mattermost',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='get-app__launching'>\n                <FormattedMessage\n                    id='get_app.launching'\n                    tagName='h1'\n                    defaultMessage='Where would you like to view this?'\n                />\n                <div className='get-app__alternative'>\n                    {viewApp}\n                </div>\n            </div>\n        );\n    }\n\n    renderDialogBody = () => {\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__dialog-body'>\n                    {this.renderDialogHeader()}\n                    {this.renderDownloadLinkSection()}\n                </div>\n            );\n        }\n\n        return (\n            <div className='get-app__dialog-body'>\n                {this.renderDialogHeader()}\n                <div className='get-app__buttons'>\n                    <div className='get-app__status'>\n                        {this.renderGoNativeAppMessage()}\n                    </div>\n                    <div className='get-app__status'>\n                        <a\n                            href={this.state.location}\n                            onMouseDown={() => {\n                                this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                            }}\n                            onClick={() => {\n                                this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                                this.setState({navigating: true});\n                            }}\n                            className='btn btn-default btn-lg get-app__continue'\n                        >\n                            <FormattedMessage\n                                id='get_app.continueToBrowser'\n                                defaultMessage='View in Browser'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='get-app__preference'>\n                    <button\n                        className={`get-app__checkbox ${this.state.rememberChecked ? 'checked' : ''}`}\n                        onClick={this.handleChecked}\n                    >\n                        {this.renderCheckboxIcon()}\n                    </button>\n                    <FormattedMessage\n                        id='get_app.rememberMyPreference'\n                        defaultMessage='Remember my preference'\n                    />\n                </div>\n                {this.renderDownloadLinkSection()}\n            </div>\n        );\n    }\n\n    renderHeader = () => {\n        let header = (\n            <div className='get-app__header'>\n                <img\n                    src={MattermostLogoSvg}\n                    className='get-app__logo'\n                />\n            </div>\n        );\n        if (this.props.enableCustomBrand && this.props.brandImageUrl) {\n            let customLogo;\n            if (this.props.brandImageUrl && !this.state.brandImageError) {\n                customLogo = (\n                    <img\n                        src={this.props.brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        className='get-app__custom-logo'\n                    />\n                );\n            }\n\n            header = (\n                <div className='get-app__header'>\n                    {customLogo}\n                    <div className='get-app__custom-site-name'>\n                        <span>{this.props.siteName}</span>\n                    </div>\n                </div>\n            );\n        }\n\n        return header;\n    }\n\n    render() {\n        const isMobile = UserAgent.isMobile();\n\n        if (this.checkLandingPreferenceBrowser()) {\n            this.openInBrowser();\n            return null;\n        }\n\n        return (\n            <div className='get-app'>\n                {this.renderHeader()}\n                <div className='get-app__dialog'>\n                    <div\n                        className={`get-app__graphic ${isMobile ? 'mobile' : ''}`}\n                    >\n                        {this.renderGraphic()}\n                    </div>\n                    {this.renderDialogBody()}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {GlobalState} from 'types/store';\n\nimport LinkingLandingPage from './linking_landing_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        desktopAppLink: config.AppDownloadLink,\n        iosAppLink: config.IosAppDownloadLink,\n        androidAppLink: config.AndroidAppDownloadLink,\n        defaultTheme: getTheme(state),\n        siteUrl: config.SiteURL,\n        siteName: config.SiteName,\n        brandImageUrl: Client4.getBrandImageUrl('0'),\n        enableCustomBrand: config.EnableCustomBrand === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(LinkingLandingPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n"],"names":["LinkingLandingPage","PureComponent","constructor","props","super","this","state","navigating","rememberChecked","BrowserStore","siteUrl","landingPreference","LandingPreferenceTypes","setState","pref","clearIfNotChecked","setPreference","redirectPage","window","location","href","nativeLocation","UserAgent","id","defaultMessage","Utils","onMouseDown","onClick","timeout","setTimeout","replace","getDownloadLink","addEventListener","clearTimeout","className","renderSystemDialogMessage","iosAppLink","androidAppLink","desktopAppLink","brandImageError","src","mobileImg","desktopImg","downloadLink","values","link","renderDownloadLinkText","isMobile","openingLink","enableCustomBrand","appName","siteName","viewApp","tagName","renderDialogHeader","renderDownloadLinkSection","renderGoNativeAppMessage","handleChecked","renderCheckboxIcon","header","MattermostLogoSvg","brandImageUrl","customLogo","onError","handleBrandImageError","componentDidMount","defaultTheme","checkLandingPreferenceApp","openMattermostApp","clearLandingPreferenceIfNotChecked","componentWillUnmount","removeEventListener","render","checkLandingPreferenceBrowser","openInBrowser","renderHeader","renderGraphic","renderDialogBody","connect","config","getConfig","AppDownloadLink","IosAppDownloadLink","AndroidAppDownloadLink","getTheme","SiteURL","SiteName","Client4","EnableCustomBrand","CheckboxCheckedIcon","React","width","height","viewBox","stroke","strokeWidth","fillRule","transform","d"],"sourceRoot":""}