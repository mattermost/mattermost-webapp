{"version":3,"file":"716.67db23df5d0e7d616bbd.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/file_info_preview/file_info_preview.tsx","webpack://@mattermost/webapp/./components/file_info_preview/index.ts","webpack://@mattermost/webapp/./components/audio_video_preview/audio_video_preview.tsx","webpack://@mattermost/webapp/./components/audio_video_preview/index.ts","webpack://@mattermost/webapp/./components/code_preview.jsx","webpack://@mattermost/webapp/./components/file_preview_modal/image_preview.jsx","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal_info/file_preview_modal_info.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/types.ts","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal_main_actions/file_preview_modal_main_actions.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal_footer/file_preview_modal_footer.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal_main_nav/file_preview_modal_main_nav.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal_header/file_preview_modal_header.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/popover_bar/popover_bar.tsx","webpack://@mattermost/webapp/./components/file_preview_modal/popover_bar/index.ts","webpack://@mattermost/webapp/./components/file_preview_modal/file_preview_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\nimport {FileInfo} from '@mattermost/types/files';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    canDownloadFiles: boolean;\n};\n\nexport default class FileInfoPreview extends React.PureComponent<Props> {\n    render() {\n        const fileInfo = this.props.fileInfo;\n        const fileUrl = this.props.fileUrl;\n\n        // non-image files include a section providing details about the file\n        const infoParts = [];\n\n        if (fileInfo.extension !== '') {\n            infoParts.push(Utils.localizeMessage('file_info_preview.type', 'File type ') + fileInfo.extension.toUpperCase());\n        }\n\n        if (fileInfo.size) {\n            infoParts.push(Utils.localizeMessage('file_info_preview.size', 'Size ') + Utils.fileSizeToString(fileInfo.size));\n        }\n\n        const infoString = infoParts.join(', ');\n\n        let preview = null;\n        if (this.props.canDownloadFiles) {\n            preview = (\n                <a\n                    className='file-details__preview'\n                    href={fileUrl}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </a>\n            );\n        } else {\n            preview = (\n                <span className='file-details__preview'>\n                    <span className='file-details__preview-helper'/>\n                    <img\n                        alt={'file preview'}\n                        src={Utils.getFileIconPath(fileInfo)}\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <div className='file-details__container'>\n                {preview}\n                <div className='file-details'>\n                    <div className='file-details__name'>{fileInfo.name}</div>\n                    <div className='file-details__info'>{infoString}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\n\nimport {canDownloadFiles} from 'utils/file_utils';\n\nimport FileInfoPreview from './file_info_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n    };\n}\n\nexport default connect(mapStateToProps)(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FileInfo} from 'mattermost-redux/types/files';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    isMobileView: boolean;\n}\n\ntype State = {\n    canPlay: boolean;\n}\n\nexport default class AudioVideoPreview extends React.PureComponent<Props, State> {\n    sourceRef = React.createRef<HTMLSourceElement>();\n    videoRef = React.createRef<HTMLVideoElement>();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            canPlay: true,\n        };\n    }\n\n    componentDidMount() {\n        this.handleFileInfoChanged(this.props.fileInfo);\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.handleFileInfoChanged(this.props.fileInfo);\n        }\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    handleFileInfoChanged = (fileInfo: FileInfo) => {\n        let video = this.videoRef.current;\n        if (!video) {\n            video = document.createElement('video');\n        }\n\n        const canPlayType = video.canPlayType(fileInfo.mime_type);\n\n        this.setState({\n            canPlay: canPlayType === 'probably' || canPlayType === 'maybe',\n        });\n    }\n\n    handleLoadError = () => {\n        this.setState({\n            canPlay: false,\n        });\n    }\n\n    stop = () => {\n        if (this.videoRef.current) {\n            const video = this.videoRef.current;\n            video.pause();\n            video.currentTime = 0;\n        }\n    }\n\n    render() {\n        if (!this.state.canPlay) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        let width = Constants.WEB_VIDEO_WIDTH;\n        let height = Constants.WEB_VIDEO_HEIGHT;\n        if (this.props.isMobileView) {\n            width = Constants.MOBILE_VIDEO_WIDTH;\n            height = Constants.MOBILE_VIDEO_HEIGHT;\n        }\n\n        // add a key to the video to prevent React from using an old video source while a new one is loading\n        return (\n            <video\n                key={this.props.fileInfo.id}\n                ref={this.videoRef}\n                data-setup='{}'\n                controls={true}\n                width={width}\n                height={height}\n            >\n                <source\n                    ref={this.sourceRef}\n                    src={this.props.fileUrl}\n                />\n            </video>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {GlobalState} from 'types/store';\n\nimport AudioVideoPreview from './audio_video_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AudioVideoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as SyntaxHighlighting from 'utils/syntax_highlighting';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nexport default class CodePreview extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            code: '',\n            lang: '',\n            loading: true,\n            success: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getCode();\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.fileUrl !== state.prevFileUrl) {\n            const usedLanguage = SyntaxHighlighting.getLanguageFromFileExtension(props.fileInfo.extension);\n\n            if (!usedLanguage || props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n                return {\n                    code: '',\n                    lang: '',\n                    loading: false,\n                    success: false,\n                    prevFileUrl: props.fileUrl,\n                };\n            }\n\n            return {\n                code: '',\n                lang: usedLanguage,\n                loading: true,\n                prevFileUrl: props.fileUrl,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.getCode();\n        }\n    }\n\n    getCode = async () => {\n        if (!this.state.lang || this.props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n            return;\n        }\n        try {\n            const data = await fetch(this.props.fileUrl);\n            const text = await data.text();\n            this.handleReceivedCode(text);\n        } catch (e) {\n            this.handleReceivedError();\n        }\n    }\n\n    handleReceivedCode = (data) => {\n        let code = data;\n        if (data.nodeName === '#document') {\n            code = new XMLSerializer().serializeToString(data);\n        }\n        this.setState({\n            code,\n            loading: false,\n            success: true,\n        });\n    }\n\n    handleReceivedError = () => {\n        this.setState({loading: false, success: false});\n    }\n\n    static supports(fileInfo) {\n        return Boolean(SyntaxHighlighting.getLanguageFromFileExtension(fileInfo.extension));\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const language = SyntaxHighlighting.getLanguageName(this.state.lang);\n\n        const highlighted = SyntaxHighlighting.highlight(this.state.lang, this.state.code);\n\n        return (\n            <div className='post-code code-preview'>\n                <span className='post-code__language'>\n                    {`${this.props.fileInfo.name} - ${language}`}\n                </span>\n                <div className='hljs'>\n                    <div className='post-code__line-numbers'>\n                        {SyntaxHighlighting.renderLineNumbers(this.state.code)}\n                    </div>\n                    <code dangerouslySetInnerHTML={{__html: highlighted}}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nCodePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    fileUrl: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {getFilePreviewUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport './image_preview.scss';\n\nexport default function ImagePreview({fileInfo, canDownloadFiles}) {\n    const isExternalFile = !fileInfo.id;\n\n    let fileUrl;\n    let previewUrl;\n    if (isExternalFile) {\n        fileUrl = fileInfo.link;\n        previewUrl = fileInfo.link;\n    } else {\n        fileUrl = getFileDownloadUrl(fileInfo.id);\n        previewUrl = fileInfo.has_preview_image ? getFilePreviewUrl(fileInfo.id) : fileUrl;\n    }\n\n    if (!canDownloadFiles) {\n        return <img src={previewUrl}/>;\n    }\n\n    return (\n        <a\n            className='image_preview'\n            href='#'\n        >\n            <img\n                className='image_preview__image'\n                data-testid='imagePreview'\n                alt={'preview url image'}\n                src={previewUrl}\n            />\n        </a>\n    );\n}\n\nImagePreview.propTypes = {\n    fileInfo: PropTypes.object.isRequired,\n    canDownloadFiles: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {\n    getUser as selectUser,\n    makeGetDisplayName,\n} from 'mattermost-redux/selectors/entities/users';\nimport {Post} from 'mattermost-redux/types/posts';\nimport {UserProfile} from 'mattermost-redux/types/users';\n\nimport Avatar from 'components/widgets/users/avatar/avatar';\n\nimport {GlobalState} from 'types/store';\n\nimport {imageURLForUser} from 'utils/utils';\n\nimport './file_preview_modal_info.scss';\n\ninterface Props {\n    showFileName: boolean;\n    filename: string;\n    post?: Post;\n}\n\nconst displayNameGetter = makeGetDisplayName();\n\nconst FilePreviewModalInfo: React.FC<Props> = (props: Props) => {\n    const user = useSelector((state: GlobalState) => selectUser(state, props.post?.user_id ?? '')) as UserProfile | undefined;\n    const channel = useSelector((state: GlobalState) => {\n        const getChannel = makeGetChannel();\n        return getChannel(state, {id: props.post?.channel_id ?? ''});\n    });\n    const name = useSelector((state: GlobalState) => displayNameGetter(state, props.post?.user_id ?? '', true));\n\n    let info;\n    const channelName = channel ? (\n        <FormattedMessage\n            id='file_preview_modal_info.shared_in'\n            defaultMessage='Shared in ~{name}'\n            values={{\n                name: channel.display_name || channel.name,\n            }}\n        />\n    ) : null;\n    if (props.showFileName) {\n        info = (\n            <>\n                <h5 className='file-preview-modal__file-name'>{props.filename}\n                </h5>\n                <span className='file-preview-modal__file-details'>\n                    <span className='file-preview-modal__file-details-user-name'>{name}</span>\n                    <span className='file-preview-modal__channel'>{channelName}</span>\n                </span>\n            </>\n        );\n    } else {\n        info = (\n            <>\n                <h5 className='file-preview-modal__user-name'>{name}\n                </h5>\n                <span className='file-preview-modal__channel'>{channelName}\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <div className='file-preview-modal__info'>\n            {\n                (props.post && Object.keys(props.post).length > 0) &&\n                <Avatar\n                    size='lg'\n                    url={imageURLForUser(props.post.user_id, user?.last_picture_update)}\n                    className='file-preview-modal__avatar'\n                />\n            }\n\n            <div className='file-preview-modal__info-details'>\n                {info}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {FileInfo} from 'mattermost-redux/types/files';\n\nexport type LinkInfo = {\n    has_preview_image: boolean;\n    link: string;\n    extension: string;\n    name: string;\n}\n\nexport function isFileInfo(info: FileInfo | LinkInfo): info is FileInfo {\n    return Boolean((info as FileInfo).id);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getFilePublicLink} from 'mattermost-redux/actions/files';\nimport {getFilePublicLink as selectFilePublicLink} from 'mattermost-redux/selectors/entities/files';\nimport {FileInfo} from 'mattermost-redux/types/files';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\n\nimport {GlobalState} from 'types/store';\n\nimport Constants from 'utils/constants';\nimport {copyToClipboard} from 'utils/utils';\n\nimport {isFileInfo, LinkInfo} from '../types';\n\nimport './file_preview_modal_main_actions.scss';\n\ninterface DownloadLinkProps {\n    download?: string;\n}\n\ninterface Props {\n    usedInside?: 'Header' | 'Footer';\n    showOnlyClose?: boolean;\n    showClose?: boolean;\n    showPublicLink?: boolean;\n    filename: string;\n    fileURL: string;\n    fileInfo: FileInfo | LinkInfo;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    handleModalClose: () => void;\n}\n\nconst FilePreviewModalMainActions: React.FC<Props> = (props: Props) => {\n    const tooltipPlacement = props.usedInside === 'Header' ? 'bottom' : 'top';\n    const selectedFilePublicLink = useSelector((state: GlobalState) => selectFilePublicLink(state)?.link);\n    const dispatch = useDispatch();\n    const [publicLinkCopied, setPublicLinkCopied] = useState(false);\n\n    useEffect(() => {\n        if (isFileInfo(props.fileInfo) && props.enablePublicLink) {\n            dispatch(getFilePublicLink(props.fileInfo.id));\n        }\n    }, [props.fileInfo, props.enablePublicLink]);\n    const copyPublicLink = () => {\n        copyToClipboard(selectedFilePublicLink ?? '');\n        setPublicLinkCopied(true);\n    };\n\n    const closeButton = (\n        <OverlayTrigger\n            delayShow={Constants.OVERLAY_TIME_DELAY}\n            key='publicLink'\n            placement={tooltipPlacement}\n            overlay={\n                <Tooltip id='close-icon-tooltip'>\n                    <FormattedMessage\n                        id='full_screen_modal.close'\n                        defaultMessage='Close'\n                    />\n                </Tooltip>\n            }\n        >\n            <button\n                className='file-preview-modal-main-actions__action-item'\n                onClick={props.handleModalClose}\n            >\n                <i className='icon icon-close'/>\n            </button>\n        </OverlayTrigger>\n    );\n    let publicTooltipMessage = (\n        <FormattedMessage\n            id='view_image_popover.publicLink'\n            defaultMessage='Get a public link'\n        />\n    );\n    if (publicLinkCopied) {\n        publicTooltipMessage = (\n            <FormattedMessage\n                id='file_preview_modal_main_actions.public_link-copied'\n                defaultMessage='Public link copied'\n            />\n        );\n    }\n    const publicLink = (\n        <OverlayTrigger\n            delayShow={Constants.OVERLAY_TIME_DELAY}\n            key='filePreviewPublicLink'\n            placement={tooltipPlacement}\n            shouldUpdatePosition={true}\n            onExit={() => setPublicLinkCopied(false)}\n            overlay={\n                <Tooltip id='link-variant-icon-tooltip'>\n                    {publicTooltipMessage}\n                </Tooltip>\n            }\n        >\n            <a\n                href='#'\n                className='file-preview-modal-main-actions__action-item'\n                onClick={copyPublicLink}\n            >\n                <i className='icon icon-link-variant'/>\n            </a>\n        </OverlayTrigger>\n    );\n    const downloadLinkProps: DownloadLinkProps = {};\n    downloadLinkProps.download = props.filename;\n    const download = (\n        <OverlayTrigger\n            delayShow={Constants.OVERLAY_TIME_DELAY}\n            key='download'\n            placement={tooltipPlacement}\n            overlay={\n                <Tooltip id='download-icon-tooltip'>\n                    <FormattedMessage\n                        id='view_image_popover.download'\n                        defaultMessage='Download'\n                    />\n                </Tooltip>\n            }\n        >\n            <a\n                href={props.fileURL}\n                className='file-preview-modal-main-actions__action-item'\n                target='_blank'\n                rel='noopener noreferrer'\n                download={props.filename}\n            >\n                <i className='icon icon-download-outline'/>\n            </a>\n        </OverlayTrigger>\n    );\n    return (\n        <div className='file-preview-modal-main-actions__actions'>\n            {!props.showOnlyClose && props.enablePublicLink && props.showPublicLink && publicLink}\n            {!props.showOnlyClose && props.canDownloadFiles && download}\n            {props.showClose && closeButton}\n        </div>\n    );\n};\n\nFilePreviewModalMainActions.defaultProps = {\n    showOnlyClose: false,\n    usedInside: 'Header',\n    showClose: true,\n    showPublicLink: true,\n};\n\nexport default memo(FilePreviewModalMainActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport {FileInfo} from 'mattermost-redux/types/files';\nimport {Post} from 'mattermost-redux/types/posts';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport {LinkInfo} from '../types';\n\nimport './file_preview_modal_footer.scss';\n\ninterface Props {\n    fileInfo: FileInfo | LinkInfo;\n    filename: string;\n    post?: Post;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    isExternalFile: boolean;\n    handleModalClose: () => void;\n}\n\nconst FilePreviewModalFooter: React.FC<Props> = ({post, ...actionProps}: Props) => {\n    return (\n        <div className='file-preview-modal-footer'>\n            <FilePreviewModalInfo\n                showFileName={false}\n                post={post}\n                filename={actionProps.filename}\n            />\n            <FilePreviewModalMainActions\n                {...actionProps}\n                showClose={false}\n                usedInside='Footer'\n                showOnlyClose={false}\n            />\n        </div>\n    );\n};\nexport default memo(FilePreviewModalFooter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport './file_preview_modal_main_nav.scss';\n\nimport OverlayTrigger from '../../overlay_trigger';\nimport Tooltip from '../../tooltip';\nimport Constants from '../../../utils/constants';\n\ninterface Props {\n    fileIndex: number;\n    totalFiles: number;\n    handlePrev: () => void;\n    handleNext: () => void;\n}\n\nconst FilePreviewModalMainNav: React.FC<Props> = (props: Props) => {\n    const leftArrow = (\n        <OverlayTrigger\n            delayShow={Constants.OVERLAY_TIME_DELAY}\n            key='previewArrowLeft'\n            placement='bottom'\n            overlay={\n                <Tooltip id='close-icon-tooltip'>\n                    <FormattedMessage\n                        id='generic.previous'\n                        defaultMessage='Close'\n                    />\n                </Tooltip>\n            }\n        >\n            <button\n                id='previewArrowLeft'\n                className='file_preview_modal_main_nav__prev'\n                onClick={props.handlePrev}\n            >\n                <i className='icon icon-chevron-left'/>\n            </button>\n        </OverlayTrigger>\n    );\n\n    const rightArrow = (\n        <OverlayTrigger\n            delayShow={Constants.OVERLAY_TIME_DELAY}\n            key='publicLink'\n            placement='bottom'\n            overlay={\n                <Tooltip id='close-icon-tooltip'>\n                    <FormattedMessage\n                        id='generic.next'\n                        defaultMessage='Next'\n                    />\n                </Tooltip>\n            }\n        >\n            <button\n                id='previewArrowRight'\n                className='file_preview_modal_main_nav__next'\n                onClick={props.handleNext}\n            >\n                <i className='icon icon-chevron-right'/>\n            </button>\n        </OverlayTrigger>\n    );\n    return (\n        <div className='file_preview_modal_main_nav'>\n            {leftArrow}\n            <span className='modal-bar-file-count'>\n                <FormattedMessage\n                    id='file_preview_modal_main_nav.file'\n                    defaultMessage='{count, number} of {total, number}'\n                    values={{\n                        count: (props.fileIndex + 1),\n                        total: props.totalFiles,\n                    }}\n                />\n            </span>\n            {rightArrow}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalMainNav);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport {FileInfo} from 'mattermost-redux/types/files';\n\nimport Post from 'components/post_view/post/post';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainNav from '../file_preview_modal_main_nav/file_preview_modal_main_nav';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport {LinkInfo} from '../types';\n\nimport './file_preview_modal_header.scss';\n\ninterface Props {\n    isMobileView: boolean;\n    fileIndex: number;\n    fileInfo: FileInfo | LinkInfo;\n    totalFiles: number;\n    filename: string;\n    post: React.ComponentProps<typeof Post>;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    isExternalFile: boolean;\n    handlePrev: () => void;\n    handleNext: () => void;\n    handleModalClose: () => void;\n}\n\nconst FilePreviewModalHeader: React.FC<Props> = ({post, totalFiles, fileIndex, ...actionProps}: Props) => {\n    let mainActions = (<div/>);\n    if (totalFiles > 1) {\n        mainActions = (\n            <FilePreviewModalMainNav\n                totalFiles={totalFiles}\n                fileIndex={fileIndex}\n                handlePrev={actionProps.handlePrev}\n                handleNext={actionProps.handleNext}\n            />\n        );\n    }\n    const actions = (\n        <FilePreviewModalMainActions\n            {...actionProps}\n            showOnlyClose={actionProps.isMobileView}\n            usedInside='Header'\n        />);\n    return (\n        <div className='file-preview-modal-header'>\n            {actionProps.isMobileView && actions}\n            {!actionProps.isMobileView &&\n            <FilePreviewModalInfo\n                showFileName={true}\n                post={post}\n                filename={actionProps.filename}\n            />\n            }\n            {mainActions}\n            {!actionProps.isMobileView && actions}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalHeader);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Tooltip from 'components/tooltip';\nimport {Constants, ZoomSettings} from 'utils/constants';\n\nexport interface Props {\n    scale?: number;\n    showZoomControls?: boolean;\n    handleZoomIn?: () => void;\n    handleZoomOut?: () => void;\n    handleZoomReset?: () => void;\n}\n\nexport default class PopoverBar extends React.PureComponent<Props> {\n    render() {\n        const zoomControls: React.ReactNode[] = [];\n        let wrappedZoomControls: React.ReactNode = null;\n        if (this.props.showZoomControls) {\n            let zoomResetButton;\n            let zoomOutButton;\n            let zoomInButton;\n\n            if (this.props.scale && this.props.scale > ZoomSettings.MIN_SCALE) {\n                zoomOutButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomOut && debounce(this.props.handleZoomOut, 300, {maxWait: 300})}>\n                            <i className='icon icon-minus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomOutButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    key='zoomOut'\n                    placement='top'\n                    overlay={\n                        <Tooltip id='zoom-out-icon-tooltip'>\n                            <FormattedMessage\n                                id='view_image.zoom_out'\n                                defaultMessage='Zoom Out'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    {zoomOutButton}\n                </OverlayTrigger>,\n            );\n\n            if (this.props.scale && this.props.scale > ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-minus'/>\n                        </a>\n                    </span>\n                );\n            } else if (this.props.scale && this.props.scale < ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-plus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomResetButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-magnify-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    key='zoomReset'\n                    placement='top'\n                    overlay={\n                        <Tooltip id='zoom-reset-icon-tooltip'>\n                            <FormattedMessage\n                                id='view_image.zoom_reset'\n                                defaultMessage='Reset Zoom'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    {zoomResetButton}\n                </OverlayTrigger>,\n            );\n\n            if (this.props.scale && this.props.scale < ZoomSettings.MAX_SCALE) {\n                zoomInButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomIn && debounce(this.props.handleZoomIn, 300, {maxWait: 300})}>\n                            <i className='icon icon-plus'/>\n                        </a>\n                    </span>\n\n                );\n            } else {\n                zoomInButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-plus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    key='zoomIn'\n                    placement='top'\n                    overlay={\n                        <Tooltip id='zoom-in-icon-tooltip'>\n                            <FormattedMessage\n                                id='view_image.zoom_in'\n                                defaultMessage='Zoom In'\n                            />\n                        </Tooltip>\n                    }\n                >\n                    {zoomInButton}\n                </OverlayTrigger>,\n            );\n\n            wrappedZoomControls = (\n                <div className='modal-column'>\n                    {zoomControls}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='fileCountFooter'\n                ref='imageFooter'\n                className='modal-button-bar file-preview-modal__zoom-bar'\n            >\n                {wrappedZoomControls}\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PopoverBar from './popover_bar';\n\nexport default PopoverBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\n\nimport {FileInfo} from 'mattermost-redux/types/files';\nimport {Post} from 'mattermost-redux/types/posts';\n\nimport {getFileDownloadUrl, getFilePreviewUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\nimport LoadingImagePreview from 'components/loading_image_preview';\nimport Constants, {FileTypes, ZoomSettings} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport AudioVideoPreview from 'components/audio_video_preview';\nimport CodePreview from 'components/code_preview';\nimport FileInfoPreview from 'components/file_info_preview';\n\nimport {FilePreviewComponent} from 'types/store/plugins';\n\nimport ImagePreview from './image_preview';\nimport './file_preview_modal.scss';\nimport FilePreviewModalFooter from './file_preview_modal_footer/file_preview_modal_footer';\nimport FilePreviewModalHeader from './file_preview_modal_header/file_preview_modal_header';\nimport PopoverBar from './popover_bar';\nimport {LinkInfo, isFileInfo} from './types';\n\nconst PDFPreview = React.lazy(() => import('components/pdf_preview'));\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport type Props = {\n    canDownloadFiles: boolean;\n    enablePublicLink: boolean;\n\n    /**\n     * List of FileInfo to view\n     **/\n    fileInfos: Array<FileInfo | LinkInfo>;\n\n    isMobileView: boolean;\n    pluginFilePreviewComponents: FilePreviewComponent[];\n    onExited: () => void;\n\n    /**\n     * The id of the post the files are attached to\n     */\n    postId?: string;\n\n    /**\n     * The post the files are attached to\n     * Either postId or post can be passed to FilePreviewModal\n     */\n    post?: Post;\n\n    /**\n     * The index number of starting image\n     **/\n    startIndex: number;\n}\n\ntype State = {\n    show: boolean;\n    imageIndex: number;\n    imageHeight: number | string;\n    loaded: boolean[];\n    prevFileInfosCount: number;\n    progress: number[];\n    showCloseBtn: boolean;\n    showZoomControls: boolean;\n    scale: number[];\n}\n\nexport default class FilePreviewModal extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        fileInfos: [],\n        startIndex: 0,\n        pluginFilePreviewComponents: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            imageIndex: this.props.startIndex,\n            imageHeight: '100%',\n            loaded: Utils.fillArray(false, this.props.fileInfos.length),\n            prevFileInfosCount: 0,\n            progress: Utils.fillArray(0, this.props.fileInfos.length),\n            showCloseBtn: false,\n            showZoomControls: false,\n            scale: Utils.fillArray(ZoomSettings.DEFAULT_SCALE, this.props.fileInfos.length),\n        };\n    }\n\n    handleNext = () => {\n        let id = this.state.imageIndex + 1;\n        if (id > this.props.fileInfos.length - 1) {\n            id = 0;\n        }\n        this.showImage(id);\n    }\n\n    handlePrev = () => {\n        let id = this.state.imageIndex - 1;\n        if (id < 0) {\n            id = this.props.fileInfos.length - 1;\n        }\n        this.showImage(id);\n    }\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        if (Utils.isKeyPressed(e, KeyCodes.RIGHT)) {\n            this.handleNext();\n        } else if (Utils.isKeyPressed(e, KeyCodes.LEFT)) {\n            this.handlePrev();\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        this.showImage(this.props.startIndex);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.handleKeyPress);\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const updatedState: Partial<State> = {};\n        if (props.fileInfos[state.imageIndex] && props.fileInfos[state.imageIndex].extension === FileTypes.PDF) {\n            updatedState.showZoomControls = true;\n        } else {\n            updatedState.showZoomControls = false;\n        }\n        if (props.fileInfos.length !== state.prevFileInfosCount) {\n            updatedState.loaded = Utils.fillArray(false, props.fileInfos.length);\n            updatedState.progress = Utils.fillArray(0, props.fileInfos.length);\n            updatedState.prevFileInfosCount = props.fileInfos.length;\n        }\n        return Object.keys(updatedState).length ? updatedState : null;\n    }\n\n    showImage = (id: number) => {\n        this.setState({imageIndex: id});\n\n        const imageHeight = window.innerHeight - 100;\n        this.setState({imageHeight});\n\n        if (!this.state.loaded[id]) {\n            this.loadImage(id);\n        }\n    }\n\n    loadImage = (index: number) => {\n        const fileInfo = this.props.fileInfos[index];\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE && isFileInfo(fileInfo)) {\n            let previewUrl;\n            if (fileInfo.has_preview_image) {\n                previewUrl = getFilePreviewUrl(fileInfo.id);\n            } else {\n                // some images (eg animated gifs) just show the file itself and not a preview\n                previewUrl = getFileUrl(fileInfo.id);\n            }\n\n            Utils.loadImage(\n                previewUrl,\n                () => this.handleImageLoaded(index),\n                (completedPercentage) => this.handleImageProgress(index, completedPercentage),\n            );\n        } else {\n            // there's nothing to load for non-image files\n            this.handleImageLoaded(index);\n        }\n    }\n\n    handleImageLoaded = (index: number) => {\n        this.setState((prevState) => {\n            return {\n                loaded: {\n                    ...prevState.loaded,\n                    [index]: true,\n                },\n            };\n        });\n    }\n\n    handleImageProgress = (index: number, completedPercentage: number) => {\n        this.setState((prevState) => {\n            return {\n                progress: {\n                    ...prevState.progress,\n                    [index]: completedPercentage,\n                },\n            };\n        });\n    }\n\n    onMouseEnterImage = () => {\n        this.setState({showCloseBtn: true});\n    }\n\n    onMouseLeaveImage = () => {\n        this.setState({showCloseBtn: false});\n    }\n\n    setScale = (index: number, scale: number) => {\n        this.setState((prevState) => {\n            return {\n                scale: {\n                    ...prevState.scale,\n                    [index]: scale,\n                },\n            };\n        });\n    }\n\n    handleZoomIn = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.min(newScale + ZoomSettings.SCALE_DELTA, ZoomSettings.MAX_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomOut = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.max(newScale - ZoomSettings.SCALE_DELTA, ZoomSettings.MIN_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomReset = () => {\n        this.setScale(this.state.imageIndex, ZoomSettings.DEFAULT_SCALE);\n    }\n\n    handleModalClose = () => {\n        this.setState({show: false});\n    }\n\n    handleBgClose = (e: React.MouseEvent) => {\n        if (e.currentTarget === e.target) {\n            this.handleModalClose();\n        }\n    }\n\n    render() {\n        if (this.props.fileInfos.length < 1 || this.props.fileInfos.length - 1 < this.state.imageIndex) {\n            return null;\n        }\n\n        const fileInfo = this.props.fileInfos[this.state.imageIndex];\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        let showPublicLink;\n        let fileName;\n        let fileUrl;\n        let fileDownloadUrl;\n        let isExternalFile;\n        if (isFileInfo(fileInfo)) {\n            showPublicLink = true;\n            fileName = fileInfo.name;\n            fileUrl = getFileUrl(fileInfo.id);\n            fileDownloadUrl = getFileDownloadUrl(fileInfo.id);\n            isExternalFile = false;\n        } else {\n            showPublicLink = false;\n            fileName = fileInfo.name || fileInfo.link;\n            fileUrl = fileInfo.link;\n            fileDownloadUrl = fileInfo.link;\n            isExternalFile = true;\n        }\n\n        let dialogClassName = 'a11y__modal modal-image file-preview-modal';\n\n        let content;\n        let modalImageClass = '';\n        let zoomBar;\n\n        if (this.state.loaded[this.state.imageIndex]) {\n            if (fileType === FileTypes.IMAGE || fileType === FileTypes.SVG) {\n                content = (\n                    <ImagePreview\n                        fileInfo={fileInfo}\n                        canDownloadFiles={this.props.canDownloadFiles}\n                    />\n                );\n            } else if (fileType === FileTypes.VIDEO || fileType === FileTypes.AUDIO) {\n                content = (\n                    <AudioVideoPreview\n                        fileInfo={fileInfo as FileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            } else if (fileType === FileTypes.PDF) {\n                modalImageClass = ' file-preview-modal__content-scrollable';\n                content = (\n                    <div\n                        className='file-preview-modal__scrollable'\n                        onClick={this.handleBgClose}\n                    >\n                        <React.Suspense fallback={null}>\n                            <PDFPreview\n                                fileInfo={fileInfo}\n                                fileUrl={fileUrl}\n                                scale={this.state.scale[this.state.imageIndex]}\n                                handleBgClose={this.handleBgClose}\n                            />\n                        </React.Suspense>\n                    </div>\n                );\n                zoomBar = (\n                    <PopoverBar\n                        scale={this.state.scale[this.state.imageIndex]}\n                        showZoomControls={this.state.showZoomControls}\n                        handleZoomIn={this.handleZoomIn}\n                        handleZoomOut={this.handleZoomOut}\n                        handleZoomReset={this.handleZoomReset}\n                    />\n                );\n            } else if (CodePreview.supports(fileInfo)) {\n                dialogClassName += ' modal-code';\n                content = (\n                    <CodePreview\n                        fileInfo={fileInfo}\n                        fileUrl={fileUrl}\n                        className='file-preview-modal__code-preview'\n                    />\n                );\n            } else {\n                content = (\n                    <FileInfoPreview\n                        fileInfo={fileInfo as FileInfo}\n                        fileUrl={fileUrl}\n                    />\n                );\n            }\n        } else {\n            // display a progress indicator when the preview for an image is still loading\n            const loading = Utils.localizeMessage('view_image.loading', 'Loading');\n            const progress = Math.floor(this.state.progress[this.state.imageIndex]);\n\n            content = (\n                <LoadingImagePreview\n                    loading={loading}\n                    progress={progress}\n                />\n            );\n        }\n\n        if (isFileInfo(fileInfo)) {\n            for (const preview of this.props.pluginFilePreviewComponents) {\n                if (preview.override(fileInfo, this.props.post)) {\n                    content = (\n                        <preview.component\n                            fileInfo={fileInfo}\n                            post={this.props.post}\n                        />\n                    );\n                    break;\n                }\n            }\n        }\n\n        return (\n            <Modal\n                show={this.state.show}\n                onHide={this.handleModalClose}\n                onExited={this.props.onExited}\n                className='modal-image file-preview-modal'\n                dialogClassName={dialogClassName}\n                animation={true}\n                backdrop={false}\n                role='dialog'\n                style={{paddingLeft: 0}}\n                aria-labelledby='viewImageModalLabel'\n            >\n                <Modal.Body className='file-preview-modal__body'>\n                    <div\n                        className={'modal-image__wrapper'}\n                        onClick={this.handleModalClose}\n                    >\n                        <div\n                            className='file-preview-modal__main-ctr'\n                            onMouseEnter={this.onMouseEnterImage}\n                            onMouseLeave={this.onMouseLeaveImage}\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <Modal.Title\n                                componentClass='div'\n                                id='viewImageModalLabel'\n                                className='file-preview-modal__title'\n                            >\n                                <FilePreviewModalHeader\n                                    isMobileView={this.props.isMobileView}\n                                    post={this.props.post}\n                                    showPublicLink={showPublicLink}\n                                    fileIndex={this.state.imageIndex}\n                                    totalFiles={this.props.fileInfos?.length}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    isExternalFile={isExternalFile}\n                                    handlePrev={this.handlePrev}\n                                    handleNext={this.handleNext}\n                                    handleModalClose={this.handleModalClose}\n                                />\n                                {zoomBar}\n                            </Modal.Title>\n                            <div\n                                className={'file-preview-modal__content' + modalImageClass}\n                                onClick={this.handleBgClose}\n                            >\n                                {content}\n                            </div>\n                            { this.props.isMobileView &&\n                                <FilePreviewModalFooter\n                                    post={this.props.post}\n                                    showPublicLink={showPublicLink}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    isExternalFile={isExternalFile}\n                                    handleModalClose={this.handleModalClose}\n                                />\n                            }\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n"],"names":["FileInfoPreview","React","render","fileInfo","this","props","fileUrl","infoParts","extension","push","Utils","toUpperCase","size","infoString","join","preview","canDownloadFiles","className","href","target","rel","alt","src","name","connect","state","config","getConfig","AudioVideoPreview","constructor","super","video","videoRef","current","document","createElement","canPlayType","mime_type","setState","canPlay","pause","currentTime","componentDidMount","handleFileInfoChanged","sourceRef","addEventListener","handleLoadError","once","componentDidUpdate","prevProps","width","Constants","height","isMobileView","key","id","ref","data-setup","controls","getIsMobileView","CodePreview","async","lang","data","fetch","text","handleReceivedCode","e","handleReceivedError","code","nodeName","XMLSerializer","serializeToString","loading","success","getCode","prevFileUrl","usedLanguage","SyntaxHighlighting","Boolean","language","highlighted","dangerouslySetInnerHTML","__html","ImagePreview","previewUrl","getFileDownloadUrl","has_preview_image","getFilePreviewUrl","link","data-testid","propTypes","PropTypes","displayNameGetter","makeGetDisplayName","FilePreviewModalInfo","user","useSelector","selectUser","post","user_id","channel","makeGetChannel","getChannel","channel_id","info","channelName","defaultMessage","values","display_name","showFileName","filename","Object","keys","length","url","imageURLForUser","last_picture_update","memo","isFileInfo","FilePreviewModalMainActions","tooltipPlacement","usedInside","selectedFilePublicLink","selectFilePublicLink","dispatch","useDispatch","publicLinkCopied","setPublicLinkCopied","useState","useEffect","enablePublicLink","getFilePublicLink","closeButton","delayShow","placement","overlay","onClick","handleModalClose","publicTooltipMessage","publicLink","shouldUpdatePosition","onExit","copyToClipboard","download","fileURL","showOnlyClose","showPublicLink","showClose","defaultProps","FilePreviewModalFooter","actionProps","isExternalFile","FilePreviewModalMainNav","leftArrow","handlePrev","rightArrow","handleNext","count","fileIndex","total","totalFiles","FilePreviewModalHeader","mainActions","actions","PopoverBar","zoomControls","wrappedZoomControls","showZoomControls","zoomResetButton","zoomOutButton","zoomInButton","scale","ZoomSettings","handleZoomOut","debounce","maxWait","handleZoomReset","handleZoomIn","PDFPreview","KeyCodes","FilePreviewModal","imageIndex","fileInfos","showImage","RIGHT","LEFT","imageHeight","window","innerHeight","loaded","loadImage","index","FileTypes","getFileUrl","handleImageLoaded","completedPercentage","handleImageProgress","prevState","progress","showCloseBtn","newScale","Math","min","setScale","max","show","currentTarget","startIndex","prevFileInfosCount","handleKeyPress","componentWillUnmount","removeEventListener","updatedState","fileType","fileName","fileDownloadUrl","content","zoomBar","dialogClassName","modalImageClass","handleBgClose","fallback","supports","floor","pluginFilePreviewComponents","override","component","Modal","onHide","onExited","animation","backdrop","role","style","paddingLeft","aria-labelledby","onMouseEnter","onMouseEnterImage","onMouseLeave","onMouseLeaveImage","stopPropagation","componentClass","postId"],"sourceRoot":""}