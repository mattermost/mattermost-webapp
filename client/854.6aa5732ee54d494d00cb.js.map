{"version":3,"file":"854.6aa5732ee54d494d00cb.js","mappings":"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","sources":["webpack://@mattermost/webapp/./components/logged_in/logged_in.tsx","webpack://@mattermost/webapp/./components/logged_in/index.ts","webpack://@mattermost/webapp/./packages/mattermost-redux/src/actions/timezone.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Redirect} from 'react-router';\n\nimport semver from 'semver';\n\nimport {viewChannel} from 'mattermost-redux/actions/channels';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport * as WebSocketActions from 'actions/websocket_actions.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport LoadingScreen from 'components/loading_screen';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\nimport store from 'stores/redux_store.jsx';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\nimport BrowserStore from 'stores/browser_store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {Channel} from 'mattermost-redux/types/channels';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nconst BACKSPACE_CHAR = 8;\n\ndeclare global {\n    interface Window {\n        desktop: {\n            version?: string | null;\n        };\n    }\n}\n\nexport type Props = {\n    currentUser?: UserProfile;\n    currentChannelId?: string;\n    children?: React.ReactNode;\n    mfaRequired: boolean;\n    enableTimezone: boolean;\n    actions: {\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        getChannelURLAction: (channel: Channel, teamId: string, url: string) => void;\n    };\n    showTermsOfService: boolean;\n    location: {\n        pathname: string;\n    };\n}\n\ntype DesktopMessage = {\n    origin: string;\n    data: {\n        type: string;\n        message: {\n            version: string;\n            userIsActive: boolean;\n            manual: boolean;\n            channel: Channel;\n            teamId: string;\n            url: string;\n        };\n    };\n}\n\nexport default class LoggedIn extends React.PureComponent<Props> {\n    constructor(props: Props) {\n        super(props);\n\n        const root = document.getElementById('root');\n        if (root) {\n            root.className += ' channel-view';\n        }\n    }\n\n    private isValidState(): boolean {\n        return this.props.currentUser != null;\n    }\n\n    public componentDidMount(): void {\n        // Initialize websocket\n        WebSocketActions.initialize();\n\n        if (this.props.enableTimezone) {\n            this.props.actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n\n        // Make sure the websockets close and reset version\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n\n        // Listen for focused tab/window state\n        window.addEventListener('focus', this.onFocusListener);\n        window.addEventListener('blur', this.onBlurListener);\n        if (!document.hasFocus()) {\n            GlobalActions.emitBrowserFocus(false);\n        }\n\n        // Listen for messages from the desktop app\n        window.addEventListener('message', this.onDesktopMessageListener);\n\n        // Tell the desktop app the webapp is ready\n        window.postMessage(\n            {\n                type: 'webapp-ready',\n            },\n            window.location.origin,\n        );\n\n        // Device tracking setup\n        if (UserAgent.isIos()) {\n            document.body.classList.add('ios');\n        } else if (UserAgent.isAndroid()) {\n            document.body.classList.add('android');\n        }\n\n        if (!this.props.currentUser) {\n            const rootEl = document.getElementById('root');\n            if (rootEl) {\n                rootEl.setAttribute('class', '');\n            }\n            GlobalActions.emitUserLoggedOutEvent('/login?redirect_to=' + encodeURIComponent(this.props.location.pathname), true, false);\n        }\n\n        // Prevent backspace from navigating back a page\n        window.addEventListener('keydown', this.handleBackSpace);\n\n        if (this.isValidState()) {\n            BrowserStore.signalLogin();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        WebSocketActions.close();\n\n        window.removeEventListener('keydown', this.handleBackSpace);\n\n        window.removeEventListener('focus', this.onFocusListener);\n        window.removeEventListener('blur', this.onBlurListener);\n        window.removeEventListener('message', this.onDesktopMessageListener);\n    }\n\n    public render(): React.ReactNode {\n        if (!this.isValidState()) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.props.mfaRequired) {\n            if (this.props.location.pathname !== '/mfa/setup') {\n                return <Redirect to={'/mfa/setup'}/>;\n            }\n        } else if (this.props.location.pathname === '/mfa/confirm') {\n            // Nothing to do. Wait for MFA flow to complete before prompting TOS.\n        } else if (this.props.showTermsOfService) {\n            if (this.props.location.pathname !== '/terms_of_service') {\n                return <Redirect to={'/terms_of_service?redirect_to=' + encodeURIComponent(this.props.location.pathname)}/>;\n            }\n        }\n\n        return this.props.children;\n    }\n\n    private onFocusListener(): void {\n        GlobalActions.emitBrowserFocus(true);\n    }\n\n    private onBlurListener(): void {\n        GlobalActions.emitBrowserFocus(false);\n    }\n\n    // listen for messages from the desktop app\n    private onDesktopMessageListener = (desktopMessage: DesktopMessage) => {\n        if (!this.props.currentUser) {\n            return;\n        }\n        if (desktopMessage.origin !== window.location.origin) {\n            return;\n        }\n\n        switch (desktopMessage.data.type) {\n        case 'register-desktop': {\n            const {version} = desktopMessage.data.message;\n            if (!window.desktop) {\n                window.desktop = {};\n            }\n            window.desktop.version = semver.valid(semver.coerce(version));\n            break;\n        }\n        case 'user-activity-update': {\n            const {userIsActive, manual} = desktopMessage.data.message;\n\n            // update the server with the users current away status\n            if (userIsActive === true || userIsActive === false) {\n                WebSocketClient.userUpdateActiveStatus(userIsActive, manual);\n            }\n            break;\n        }\n        case 'notification-clicked': {\n            const {channel, teamId, url} = desktopMessage.data.message;\n            window.focus();\n\n            // navigate to the appropriate channel\n            this.props.actions.getChannelURLAction(channel, teamId, url);\n            break;\n        }\n        }\n    }\n\n    private handleBackSpace = (e: KeyboardEvent): void => {\n        const excludedElements = ['input', 'textarea'];\n\n        if (e.which === BACKSPACE_CHAR && !(excludedElements.includes((e.target as HTMLElement).tagName.toLowerCase()))) {\n            e.preventDefault();\n        }\n    }\n\n    private handleBeforeUnload = (): void => {\n        // remove the event listener to prevent getting stuck in a loop\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        if (document.cookie.indexOf('MMUSERID=') > -1) {\n            viewChannel('', this.props.currentChannelId || '')(dispatch, getState);\n        }\n        WebSocketActions.close();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {GlobalState} from 'types/store';\n\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport {DispatchFunc, GenericAction} from 'mattermost-redux/types/actions';\n\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser, shouldShowTermsOfService} from 'mattermost-redux/selectors/entities/users';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {checkIfMFARequired} from 'utils/route';\nimport {getChannelURL} from 'utils/utils';\nimport {isPermalinkURL} from 'utils/url';\n\nimport LoggedIn from './logged_in';\n\ntype Props = {\n    match: {\n        url: string;\n    };\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const showTermsOfService = shouldShowTermsOfService(state);\n\n    return {\n        currentUser: getCurrentUser(state),\n        currentChannelId: getCurrentChannelId(state),\n        mfaRequired: checkIfMFARequired(getCurrentUser(state), license, config, ownProps.match.url),\n        enableTimezone: config.ExperimentalTimezone === 'true',\n        showTermsOfService,\n    };\n}\n\n// NOTE: suggestions where to keep this welcomed\nconst getChannelURLAction = (channel: Channel, teamId: string, url: string) => (dispatch: DispatchFunc, getState: () => GlobalState) => {\n    const state = getState();\n\n    if (url && isPermalinkURL(url)) {\n        return browserHistory.push(url);\n    }\n\n    return browserHistory.push(getChannelURL(state, channel, teamId));\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            getChannelURLAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoggedIn);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUer = getCurrentUser(getState());\n        const currentTimezone = getUserTimezone(getState(), currentUer.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUer,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n    };\n}\n"],"names":["dispatch","store","getState","LoggedIn","React","constructor","props","super","desktopMessage","this","currentUser","origin","window","location","data","type","version","message","desktop","semver","userIsActive","manual","WebSocketClient","channel","teamId","url","focus","actions","getChannelURLAction","e","which","includes","target","tagName","toLowerCase","preventDefault","removeEventListener","handleBeforeUnload","document","cookie","indexOf","viewChannel","currentChannelId","WebSocketActions","root","getElementById","className","isValidState","componentDidMount","enableTimezone","autoUpdateTimezone","getBrowserTimezone","addEventListener","onFocusListener","onBlurListener","hasFocus","GlobalActions","onDesktopMessageListener","postMessage","UserAgent","body","classList","add","rootEl","setAttribute","encodeURIComponent","pathname","handleBackSpace","BrowserStore","componentWillUnmount","render","mfaRequired","to","showTermsOfService","children","state","isPermalinkURL","browserHistory","getChannelURL","connect","ownProps","license","getLicense","config","getConfig","shouldShowTermsOfService","getCurrentUser","getCurrentChannelId","checkIfMFARequired","match","ExperimentalTimezone","bindActionCreators","deviceTimezone","async","currentUer","currentTimezone","getUserTimezone","id","newTimezoneExists","automaticTimezone","useAutomaticTimezone","timezone","manualTimezone","updatedUser","updateMe"],"sourceRoot":""}