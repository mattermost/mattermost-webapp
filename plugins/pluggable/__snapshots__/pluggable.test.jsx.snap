// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugins/Pluggable should match snapshot with extended component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={
      Object {
        "PopoverSection1": Array [
          Object {
            "component": [Function],
          },
        ],
      }
    }
    pluggableName="PopoverSection1"
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <ProfilePopoverPlugin
      key="PopoverSection1undefined"
      theme={
        Object {
          "id": "theme_id",
        }
      }
    >
      <span
        id="pluginId"
      >
        ProfilePopoverPlugin
      </span>
    </ProfilePopoverPlugin>
  </Pluggable>
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with extended component with pluggableName 1`] = `
<Pluggable
  components={
    Object {
      "PopoverSection1": Array [
        Object {
          "component": [Function],
        },
      ],
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  pluggableName="PopoverSection1"
  theme={
    Object {
      "id": "theme_id",
    }
  }
>
  <ProfilePopoverPlugin
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": "Etc/UTC",
      }
    }
    key="PopoverSection1undefined"
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <span
      id="pluginId"
    >
      ProfilePopoverPlugin
    </span>
  </ProfilePopoverPlugin>
</Pluggable>
`;

exports[`plugins/Pluggable should match snapshot with no extended component 1`] = `
<Provider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={Object {}}
    theme={Object {}}
  />
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with no overridden component 1`] = `
<Provider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={Object {}}
    theme={Object {}}
  >
    <Connect(ProfilePopover)
      src="src"
      theme={Object {}}
      user={
        Object {
          "id": "someUserId",
          "name": "some_user_name",
        }
      }
    >
      <ProfilePopover
        actions={
          Object {
            "getMembershipForCurrentEntities": [Function],
            "openDirectChannelToUserId": [Function],
            "openModal": [Function],
          }
        }
        currentTeamId="someTeamId"
        currentUserId="someUserId"
        enableTimezone={false}
        hasMention={false}
        isChannelAdmin={false}
        isRHS={false}
        isTeamAdmin={false}
        src="src"
        teamUrl="/someTeamName"
        theme={Object {}}
        user={
          Object {
            "id": "someUserId",
            "name": "some_user_name",
          }
        }
      >
        <Popover
          bsClass="popover"
          id="user-profile-popover"
          placement="right"
          theme={Object {}}
          title={
            <span>
              <span
                className="user-popover__username"
              >
                @undefined
              </span>
               
            </span>
          }
        >
          <div
            className="popover right"
            id="user-profile-popover"
            role="tooltip"
            style={
              Object {
                "display": "block",
                "left": undefined,
                "top": undefined,
              }
            }
            theme={Object {}}
          >
            <div
              className="arrow"
              style={
                Object {
                  "left": undefined,
                  "top": undefined,
                }
              }
            />
            <h3
              className="popover-title"
            >
              <span>
                <span
                  className="user-popover__username"
                >
                  @undefined
                </span>
                 
              </span>
            </h3>
            <div
              className="popover-content"
            >
              <img
                alt="user profile image"
                className="user-popover__image"
                height="128"
                key="user-popover-image"
                src="src"
                width="128"
              />
              <Connect(Pluggable)
                key="profilePopoverPluggable2"
                pluggableName="PopoverUserAttributes"
                user={
                  Object {
                    "id": "someUserId",
                    "name": "some_user_name",
                  }
                }
              >
                <Pluggable
                  components={Object {}}
                  dispatch={[Function]}
                  pluggableName="PopoverUserAttributes"
                  theme={
                    Object {
                      "awayIndicator": "#ffbc42",
                      "buttonBg": "#166de0",
                      "buttonColor": "#ffffff",
                      "centerChannelBg": "#ffffff",
                      "centerChannelColor": "#3d3c40",
                      "codeTheme": "github",
                      "dndIndicator": "#f74343",
                      "errorTextColor": "#fd5960",
                      "linkColor": "#2389d7",
                      "mentionBg": "#ffffff",
                      "mentionBj": "#ffffff",
                      "mentionColor": "#145dbf",
                      "mentionHighlightBg": "#ffe577",
                      "mentionHighlightLink": "#166de0",
                      "newMessageSeparator": "#ff8800",
                      "onlineIndicator": "#06d6a0",
                      "sidebarBg": "#145dbf",
                      "sidebarHeaderBg": "#1153ab",
                      "sidebarHeaderTextColor": "#ffffff",
                      "sidebarText": "#ffffff",
                      "sidebarTextActiveBorder": "#579eff",
                      "sidebarTextActiveColor": "#ffffff",
                      "sidebarTextHoverBg": "#4578bf",
                      "sidebarUnreadText": "#ffffff",
                      "type": "Mattermost",
                    }
                  }
                  user={
                    Object {
                      "id": "someUserId",
                      "name": "some_user_name",
                    }
                  }
                />
              </Connect(Pluggable)>
              <div
                className="popover__row first"
                data-toggle="tooltip"
                key="user-popover-settings"
              >
                <a
                  href="#"
                  onClick={[Function]}
                >
                  <i
                    className="fa fa-pencil-square-o"
                    title="Edit Icon"
                  />
                  <FormattedMessage
                    defaultMessage="Edit Account Settings"
                    id="user_profile.account.editSettings"
                    values={Object {}}
                  >
                    <span>
                      Edit Account Settings
                    </span>
                  </FormattedMessage>
                </a>
              </div>
              <Connect(Pluggable)
                key="profilePopoverPluggable3"
                pluggableName="PopoverUserActions"
                user={
                  Object {
                    "id": "someUserId",
                    "name": "some_user_name",
                  }
                }
              >
                <Pluggable
                  components={Object {}}
                  dispatch={[Function]}
                  pluggableName="PopoverUserActions"
                  theme={
                    Object {
                      "awayIndicator": "#ffbc42",
                      "buttonBg": "#166de0",
                      "buttonColor": "#ffffff",
                      "centerChannelBg": "#ffffff",
                      "centerChannelColor": "#3d3c40",
                      "codeTheme": "github",
                      "dndIndicator": "#f74343",
                      "errorTextColor": "#fd5960",
                      "linkColor": "#2389d7",
                      "mentionBg": "#ffffff",
                      "mentionBj": "#ffffff",
                      "mentionColor": "#145dbf",
                      "mentionHighlightBg": "#ffe577",
                      "mentionHighlightLink": "#166de0",
                      "newMessageSeparator": "#ff8800",
                      "onlineIndicator": "#06d6a0",
                      "sidebarBg": "#145dbf",
                      "sidebarHeaderBg": "#1153ab",
                      "sidebarHeaderTextColor": "#ffffff",
                      "sidebarText": "#ffffff",
                      "sidebarTextActiveBorder": "#579eff",
                      "sidebarTextActiveColor": "#ffffff",
                      "sidebarTextHoverBg": "#4578bf",
                      "sidebarUnreadText": "#ffffff",
                      "type": "Mattermost",
                    }
                  }
                  user={
                    Object {
                      "id": "someUserId",
                      "name": "some_user_name",
                    }
                  }
                />
              </Connect(Pluggable)>
            </div>
          </div>
        </Popover>
      </ProfilePopover>
    </Connect(ProfilePopover)>
  </Pluggable>
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with overridden component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={
      Object {
        "ProfilePopover": Array [
          Object {
            "component": [Function],
          },
        ],
      }
    }
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <ProfilePopoverPlugin
      key="ProfilePopoverundefined"
      src="src"
      theme={
        Object {
          "id": "theme_id",
        }
      }
      user={
        Object {
          "id": "someUserId",
          "name": "some_user_name",
        }
      }
    >
      <span
        id="pluginId"
      >
        ProfilePopoverPlugin
      </span>
    </ProfilePopoverPlugin>
  </Pluggable>
</Provider>
`;
