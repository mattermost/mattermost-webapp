// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugins/Pluggable should match snapshot with extended component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={
      Object {
        "PopoverSection1": Array [
          Object {
            "component": [Function],
          },
        ],
      }
    }
    pluggableName="PopoverSection1"
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <ProfilePopoverPlugin
      key="PopoverSection1undefined"
      theme={
        Object {
          "id": "theme_id",
        }
      }
    >
      <span
        id="pluginId"
      >
        ProfilePopoverPlugin
      </span>
    </ProfilePopoverPlugin>
  </Pluggable>
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with extended component with pluggableName 1`] = `
<Pluggable
  components={
    Object {
      "PopoverSection1": Array [
        Object {
          "component": [Function],
        },
      ],
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  pluggableName="PopoverSection1"
  theme={
    Object {
      "id": "theme_id",
    }
  }
>
  <ProfilePopoverPlugin
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": "span",
        "timeZone": "Etc/UTC",
      }
    }
    key="PopoverSection1undefined"
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <span
      id="pluginId"
    >
      ProfilePopoverPlugin
    </span>
  </ProfilePopoverPlugin>
</Pluggable>
`;

exports[`plugins/Pluggable should match snapshot with no extended component 1`] = `
<Provider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={Object {}}
    theme={Object {}}
  />
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with no overridden component 1`] = `
<Provider
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": "Etc/UTC",
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={Object {}}
    theme={Object {}}
  >
    <Connect(InjectIntl(ProfilePopover))
      src="src"
      theme={Object {}}
      user={
        Object {
          "id": "someUserId",
          "name": "some_user_name",
        }
      }
      userId="someUserId"
    >
      <InjectIntl(ProfilePopover)
        actions={
          Object {
            "getMembershipForCurrentEntities": [Function],
            "openDirectChannelToUserId": [Function],
            "openModal": [Function],
          }
        }
        currentTeamId="someTeamId"
        currentUserId="someUserId"
        enableTimezone={false}
        isChannelAdmin={false}
        isTeamAdmin={false}
        src="src"
        status="online"
        teamUrl="/someTeamName"
        theme={Object {}}
        userId="someUserId"
      >
        <ProfilePopover
          actions={
            Object {
              "getMembershipForCurrentEntities": [Function],
              "openDirectChannelToUserId": [Function],
              "openModal": [Function],
            }
          }
          currentTeamId="someTeamId"
          currentUserId="someUserId"
          enableTimezone={false}
          hasMention={false}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "now": [Function],
              "onError": [Function],
              "textComponent": "span",
              "timeZone": "Etc/UTC",
            }
          }
          isChannelAdmin={false}
          isRHS={false}
          isTeamAdmin={false}
          src="src"
          status="online"
          teamUrl="/someTeamName"
          theme={Object {}}
          userId="someUserId"
        />
      </InjectIntl(ProfilePopover)>
    </Connect(InjectIntl(ProfilePopover))>
  </Pluggable>
</Provider>
`;

exports[`plugins/Pluggable should match snapshot with overridden component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Pluggable
    components={
      Object {
        "ProfilePopover": Array [
          Object {
            "component": [Function],
          },
        ],
      }
    }
    theme={
      Object {
        "id": "theme_id",
      }
    }
  >
    <ProfilePopoverPlugin
      key="ProfilePopoverundefined"
      src="src"
      theme={
        Object {
          "id": "theme_id",
        }
      }
      user={
        Object {
          "id": "someUserId",
          "name": "some_user_name",
        }
      }
      userId="someUserId"
    >
      <span
        id="pluginId"
      >
        ProfilePopoverPlugin
      </span>
    </ProfilePopoverPlugin>
  </Pluggable>
</Provider>
`;
