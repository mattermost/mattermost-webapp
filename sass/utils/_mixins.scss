@charset 'UTF-8';

@mixin file-icon($path) {
    background-image: url($path);
    background-position: center;
    background-repeat: no-repeat;
    background-size: 32px 40px;
}

@mixin alpha-property($property, $color, $opacity) {
    #{$property}: rgba($color, $opacity);
}

@mixin font-smoothing($value: antialiased) {
    @if $value == antialiased {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

@mixin cursor($value) {
    cursor: -webkit-$value;
    cursor: zoom-$value;
}

// From https://gist.github.com/kaelig/7528069
@mixin text-clamp($lines: 2, $line-height: false) {
    display: -webkit-box;
    overflow: hidden;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines * 1px;
    }
}

@mixin button-style--none {
    padding: 0;
    border: none;
    background: transparent;

    &:focus {
        outline: 0;
        text-decoration: none;
    }

    &.btn {
        padding: 6px 12px;
    }

    &.btn--block {
        width: 100%;
        text-align: left;
    }

    &:hover,
    &:active {
        text-decoration: none;
    }
}

@mixin fit-content {
    width: fit-content;
    width: -moz-fit-content;
}

@mixin clearfix {
    overflow: hidden;
    *zoom: 1;
}

@mixin pie-clearfix {
    &::after {
        display: table;
        clear: both;
        content: "";
    }

    *zoom: 1;
}

@mixin tertiary-button {
    display: inline-flex;
    height: 40px;
    align-items: center;
    padding: 0 20px;
    border: 0;
    background: rgba(var(--button-bg-rgb), 0.08);
    border-radius: 4px;
    color: var(--button-bg);
    font-size: 14px;
    font-weight: 600;
    transition: all 0.15s ease-out;

    &:disabled {
        background: rgba(var(--center-channel-color-rgb), 0.08);
        color: rgba(var(--center-channel-color-rgb), 0.32);
    }

    &:hover:enabled {
        background: rgba(var(--button-bg-rgb), 0.12);
    }

    &:active:enabled {
        background: rgba(var(--button-bg-rgb), 0.16);
    }

    i {
        display: flex;
        font-size: 18px;

        &::before {
            margin: 0 7px 0 0;
        }
    }
}

@mixin primary-button {
    position: relative;
    display: inline-flex;
    height: 40px;
    align-items: center;
    padding: 0 20px;
    border: 0;
    background: var(--button-bg);
    border-radius: 4px;
    color: $white;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.15s ease-out;

    &:hover {
        background: $primary-color--hover;
    }

    &:disabled {
        background: rgba(var(--button-bg-rgb), 0.18);
    }

    i {
        display: flex;
        font-size: 18px;
    }
}

@mixin simple-in-and-out-after($classPrefix, $transition_time: 300ms) {
    .#{$classPrefix}--enter-from-after {
        &-enter {
            transform: translateY(-100vh);
        }

        &-enter-active {
            transform: translateY(0);
            transition: transform $transition_time ease-in-out;
        }

        &-enter-done {
            transform: translateY(0);
        }
    }

    .#{$classPrefix}--exit-to-after {
        &-exit {
            transform: translateY(0);
        }

        &-exit-active {
            transform: translateY(-100vh);
            transition: transform $transition_time ease-in-out;
        }

        &-exit-done {
            transform: translateY(-100vh);
        }
    }
}

@mixin simple-in-and-out-before($classPrefix, $transition_time: 300ms) {
    .#{$classPrefix}--enter-from-before {
        &-enter {
            transform: translateY(100vh);
        }

        &-enter-active {
            transform: translateY(0);
            transition: transform $transition_time ease-in-out;
        }

        &-enter-done {
            transform: translateY(0);
        }
    }

    .#{$classPrefix}--exit-to-before {
        &-exit {
            transform: translateY(0);
        }

        &-exit-active {
            transform: translateY(100vh);
            transition: transform $transition_time ease-in-out;
        }

        &-exit-done {
            transform: translateY(100vh);
        }
    }
}

@mixin simple-in-and-out($classPrefix, $transition_time: 300ms) {
    @include simple-in-and-out-before($classPrefix, $transition_time);
    @include simple-in-and-out-after($classPrefix, $transition_time);
}
