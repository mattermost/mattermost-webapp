#!/usr/bin/env ruby

require 'emoji'
require 'fileutils'
require 'json'
require 'open-uri'
require 'sprite_factory'
require 'emoji/extractor'
require_relative './apple_emoji_extractor.rb'
require_relative './unicode_emoji_helper.rb'

project_root = "#{File.dirname(__FILE__)}/../../"

emoji_path = File.join(project_root, 'images', 'emoji')
if File.directory? emoji_path
    FileUtils.remove_dir emoji_path
end
Dir.mkdir emoji_path

Emoji.create('mattermost')
FileUtils.cp(File.join(project_root, 'images', 'icon64x64.png'), File.join(emoji_path, 'mattermost.png'))

custom_aliases = {
    "ca" => "canada",
    "pk" => "pakistan",
    "za" => "south_africa"
}
custom_aliases.each do |custom, original|
    emoji = Emoji.find_by_alias original

    Emoji.edit_emoji(emoji) do |char|
      char.add_alias custom
    end
end

### Extract and create all of the emoji skin tones ###
unicode_emoji_helper = Mattermost::UnicodeEmojiHelper.new
apple_extractor = Mattermost::AppleEmojiExtractor.new(64)
emoji_added = []

Emoji.all.clone.each do |emoji|
  next unless emoji.raw

  sequences = unicode_emoji_helper.emoji_modifier_sequences(emoji.raw.split(''))
  next unless sequences
  sequences.each do |sequence|
    pngbytes = apple_extractor.png(sequence)
    print 'x' if pngbytes.nil?
    next unless pngbytes

    modifier = sequence.split('')[1]
    short_name = Mattermost::UnicodeEmojiHelper::SKIN_TONE_MAP[modifier]
    new_name = "#{emoji.name}_#{short_name.gsub(/[\s-]/, '_')}"
    new_emoji = Emoji.create(new_name) do |char|
      char.category = 'skintone'
      char.add_unicode_alias sequence
    end
    new_emoji.image_filename = "#{new_emoji.hex_inspect}.png"

    fullpath = "#{emoji_path}/#{new_emoji.image_filename}"
    unless File.file?(fullpath)
      File.open(fullpath, 'wb') { |f| f.write pngbytes }
    end

    print '.'
    emoji_added << sequence
  end
end

puts "\nThe following #{emoji_added.length} emoji were added:"
print emoji_added

blacklist = ['basecamp', 'basecampy']

categories = []

emojis = []
emoji_indices_by_alias = []
emoji_indices_by_unicode = []
emoji_indices_by_category = []
current_category = ''
count = 0
batch = 1
i = 0

Emoji.all.each do |emoji|
    if blacklist.include? emoji.name
        next
    end
    count += 1
    i += 1
    emoji.aliases.each do |emoji_alias|
        emoji_indices_by_alias << [emoji_alias, emojis.length]
    end
    emoji.unicode_aliases.each do |unicode_alias|
        emoji_indices_by_unicode << [emoji.class.hex_inspect(unicode_alias), emojis.length]
    end
    category = emoji.category ? emoji.category.downcase : 'custom'
    if current_category != '' && current_category != category
        batch = 1
        count = 1
    end
    if !categories.include? category
        categories << category
        emoji_indices_by_category << [category, []]
    end
    emoji_indices_by_category[categories.index(category)][1] << emojis.length
    filename = emoji.custom? ? emoji.name : emoji.hex_inspect
    emojis << {
        'aliases' => emoji.aliases,
        'filename' => filename,
        'category' => category,
        'batch' => batch.to_s,
    }
    emoji.image_filename = filename + '.png'
    if count == 45
        batch += 1
        count = 0
    end
    current_category = category
end

File.open(File.join(project_root, 'utils', 'emoji.json'), 'w') do |f|
    f.write(JSON.generate(emojis))

    puts "\nwrote #{emojis.length} emojis to utils/emoji.json"
end

File.open(File.join(project_root, 'utils', 'emoji.jsx'), 'w') do |f|
    f.write("// This file is automatically generated via `make emojis`. Do not modify it manually.\n\n")
    f.write("/* eslint-disable */\n\n")
    f.write("import emojis from './emoji.json';\n\n")
    f.write("export const Emojis = emojis;\n\n")
    f.write("export const EmojiIndicesByAlias = new Map(#{JSON.generate emoji_indices_by_alias});\n\n")
    f.write("export const EmojiIndicesByUnicode = new Map(#{JSON.generate emoji_indices_by_unicode});\n\n")
    f.write("export const CategoryNames = #{JSON.generate categories};\n\n")
    f.write("export const EmojiIndicesByCategory = new Map(#{JSON.generate emoji_indices_by_category});\n\n")
    f.write("/* eslint-enable */")

    puts "\nwrote #{emojis.length} emojis to utils/emoji.jsx"
end

File.open(File.join(project_root, 'emoji_data.go'), 'w') do |f|
    f.write <<-eos
// Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

// This file is automatically generated via `make emojis`. Do not modify it manually.

package model

eos

    emoji_dict = {}
    emojis.each do |emoji|
      emoji['aliases'].each do |emoji_alias|
        # There are duplicity in some emojis, for example blonde_woman_light_skin_tone,
        # so we get the last one of them because we only check for the alias/name
        # in the server-side part
        emoji_dict[emoji_alias] = %{"#{emoji_alias}": "#{emoji['filename']}"}
      end
    end
    f.write("var SystemEmojis = map[string]string{#{emoji_dict.values.join(', ')}}\n")

    puts "\nwrote #{emojis.length} emojis to emoji_data.go"
end

# If SERVER_DIR is defined we can update the file emoji_data.go in
# the server directory
if ENV.key?('SERVER_DIR')
  server_dir = File.join(ENV['SERVER_DIR'], 'model')
  FileUtils.mv(File.join(project_root, 'emoji_data.go'), server_dir)
end

Emoji::Extractor.new(64, emoji_path).extract!

Dir["#{Emoji.images_path}/*.png"].each do |png|
    if blacklist.include? File.basename(png, '.png')
        next
    end
    FileUtils.cp(png, File.join(emoji_path, File.basename(png)))
end

puts "images written to images/emoji"

### Spritesheet Generation ###

css_rules = [
    '@charset "UTF-8";',
    '.emojisprite-preview {',
    '    @include transform(scale(.55));',
    '    background-repeat: no-repeat;',
    '    cursor: pointer;',
    '    height: 64px;',
    '    max-width: none;',
    '    transform-origin: 0 0;',
    '    width: 64px;',
    '    padding: 0 10px 0 0;',
    '}',
    '.emojisprite {',
    '    @include transform(scale(.35));',
    '    background-repeat: no-repeat;',
    '    border-radius: 18px;',
    '    cursor: pointer;',
    '    height: 64px;',
    '    max-width: none;',
    '    transform-origin: 0 0;',
    '    width: 64px;',
    '}',
    '.emojisprite-loading {',
    '    background-image: none !important;',
    '    @include transform(scale(.35));',
    '    background-repeat: no-repeat;',
    '    border-radius: 18px;',
    '    cursor: pointer;',
    '    height: 64px;',
    '    max-width: none;',
    '    transform-origin: 0 0;',
    '    width: 64px;',
    '}',
]

spritesheet_path = File.join(project_root, 'images', 'emoji-sheets')
if File.directory? spritesheet_path
    FileUtils.remove_dir spritesheet_path
end
Dir.mkdir spritesheet_path

categories.each do |category|
    count = 0
    batch = 0
    i = 0

    tmp_directory = File.join(spritesheet_path, 'temp')
    Dir.mkdir tmp_directory
    Emoji.all.each do |emoji|
        i += 1
        if blacklist.include? emoji.name
            next
        end
        if category == (emoji.category ? emoji.category.downcase : 'custom')
            FileUtils.cp(File.join(emoji_path, emoji.image_filename), File.join(tmp_directory, emoji.image_filename))
            count += 1
        end
        if count == 45 || Emoji.all.length == i
            batch += 1

            css_rules << ".emoji-category-#{category}-#{batch} { background-image: url('../images/emoji-sheets/#{category}-#{batch}.png'); }"

            SpriteFactory.run!(
                tmp_directory,
                :layout => :packed,
                :library => 'chunkypng',
                :output_image => File.join(spritesheet_path, category + '-' + batch.to_s + '.png'),
                :nocomments => true,
                :nocss => true,
            ) do |images|
                images.each do |name, image|
                    if image[:cssw] != 64 || image[:cssh] != 64
                        css_rules << ".emoji-#{name} { background-position: -#{image[:cssx]}px -#{image[:cssy]}px; width: #{image[:cssw]}px; height: #{image[:cssh]}px; }"
                    else
                        css_rules << ".emoji-#{name} { background-position: -#{image[:cssx]}px -#{image[:cssy]}px; }"
                    end
                end
            end

            puts "#{count} emojis written to images/emoji-sheets/#{category}-#{batch}.png"
            count = 0

            FileUtils.remove_dir tmp_directory
            tmp_directory = File.join(spritesheet_path, 'temp')
            Dir.mkdir tmp_directory

        end
    end
    
    FileUtils.remove_dir tmp_directory
    
end

File.write(File.join(project_root, 'sass', 'components', '_emojisprite.scss'), css_rules.join("\n"))
puts "sprite stylesheet written to sass/components/_emojisprite.scss"
