#!/usr/bin/env groovy

pipeline {
    agent {
        docker {
            image 'mattermost/mattermost-build-webapp:v5.2.0'
        }
    }

    environment {
        GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    }

    stages {
        stage('Install') {
            steps {
                sh 'make .npminstall'
            }
        }

        stage('Check Style') {
            steps {
                sh 'make check-style'
            }
        }

        stage('Test') {
            steps {
                sh 'make test'
            }
            post {
                always {
                    junit 'build/test-results.xml'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'make package'
            }
        }

        stage('Push to S3') {
            steps {
                step([$class: 'S3BucketPublisher', dontWaitForConcurrentBuildCompletion: false, entries: [[
                    bucket: 'releases.mattermost.com/mattermost-webapp/${BRANCH_NAME}',
                    excludedFile: '',
                    flatten: true,
                    gzipFiles: false,
                    keepForever: false,
                    managedArtifacts: false,
                    noUploadOnFailure: true,
                    selectedRegion: 'us-east-1',
                    showDirectlyInBrowser: false,
                    sourceFile: '*.tar.gz',
                    storageClass: 'STANDARD',
                    uploadFromSlave: false,
                    useServerSideEncryption: false,
                    userMetadata: [[key: 'Cache-Control', value: 'no-cache']]
                ], [
                    bucket: "releases.mattermost.com/mattermost-webapp/commit/${GIT_COMMIT}",
                    excludedFile: '',
                    flatten: true,
                    gzipFiles: false,
                    keepForever: false,
                    managedArtifacts: false,
                    noUploadOnFailure: true,
                    selectedRegion: 'us-east-1',
                    showDirectlyInBrowser: false,
                    sourceFile: '*.tar.gz',
                    storageClass: 'STANDARD',
                    uploadFromSlave: false,
                    useServerSideEncryption: false,
                    userMetadata: [[key: 'Cache-Control', value: 'no-cache']]
                ]], profileName: 'Releases', userMetadAta: []])
            }
        }
    }

    post {
        always {
            cleanWs notFailBuild: true
        }
    }
}
